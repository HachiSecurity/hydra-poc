(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl fUnsafeFromDataUnit_cunsafeFromBuiltinData (fun (con data) Unit))
      (lam
        d
        (con data)
        (let
          (nonrec)
          (termbind
            (nonstrict) (vardecl x Unit) [ { error Unit } (con unit ()) ]
          )
          [
            [
              [
                [
                  { (builtin ifThenElse) (fun Unit Unit) }
                  [
                    [
                      (builtin equalsInteger)
                      [
                        {
                          { (builtin fstPair) (con integer) }
                          [(con list) (con data)]
                        }
                        [ (builtin unConstrData) d ]
                      ]
                    ]
                    (con integer 0)
                  ]
                ]
                (lam ds Unit Unit)
              ]
              (lam ds Unit x)
            ]
            Unit
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        bad_name
        (all b (type) (all c (type) (all a (type) (fun (fun b c) (fun (fun a b) (fun a c))))))
      )
      (abs
        b
        (type)
        (abs
          c
          (type)
          (abs
            a (type) (lam f (fun b c) (lam g (fun a b) (lam x a [ f [ g x ] ])))
          )
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Credential (type))

        Credential_match
        (vardecl PubKeyCredential (fun (con bytestring) Credential))
        (vardecl ScriptCredential (fun (con bytestring) Credential))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl StakingCredential (type))

        StakingCredential_match
        (vardecl StakingHash (fun Credential StakingCredential))
        (vardecl
          StakingPtr
          (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl DCert (type))

        DCert_match
        (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
        (vardecl
          DCertDelegDelegate
          (fun StakingCredential (fun (con bytestring) DCert))
        )
        (vardecl DCertDelegRegKey (fun StakingCredential DCert))
        (vardecl DCertGenesis DCert)
        (vardecl DCertMir DCert)
        (vardecl
          DCertPoolRegister (fun (con bytestring) (fun (con bytestring) DCert))
        )
        (vardecl
          DCertPoolRetire (fun (con bytestring) (fun (con integer) DCert))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl TxOutRef (type))

        TxOutRef_match
        (vardecl TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef)))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl ScriptPurpose (type))

        ScriptPurpose_match
        (vardecl Certifying (fun DCert ScriptPurpose))
        (vardecl Minting (fun (con bytestring) ScriptPurpose))
        (vardecl Rewarding (fun StakingCredential ScriptPurpose))
        (vardecl Spending (fun TxOutRef ScriptPurpose))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Extended (fun (type) (type)))
        (tyvardecl a (type))
        Extended_match
        (vardecl Finite (fun a [Extended a]))
        (vardecl NegInf [Extended a])
        (vardecl PosInf [Extended a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl LowerBound (fun (type) (type)))
        (tyvardecl a (type))
        LowerBound_match
        (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl UpperBound (fun (type) (type)))
        (tyvardecl a (type))
        UpperBound_match
        (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Interval (fun (type) (type)))
        (tyvardecl a (type))
        Interval_match
        (vardecl Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Address (type))

        Address_match
        (vardecl
          Address (fun Credential (fun [Maybe StakingCredential] Address))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl TxOut (type))

            TxOut_match
            (vardecl
              TxOut
              (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInInfo (type))

            TxInInfo_match
            (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInfo (type))

            TxInfo_match
            (vardecl
              TxInfo
              (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptContext (type))

            ScriptContext_match
            (vardecl
              ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
            )
          )
        )
        (termbind
          (strict)
          (vardecl bad_name (fun Bool (fun Bool Bool)))
          (lam
            l
            Bool
            (lam
              r
              Bool
              [
                [
                  [ { [ Bool_match l ] (fun Unit Bool) } (lam thunk Unit True) ]
                  (lam thunk Unit r)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            validateMintingPolicy
            (fun (con integer) (fun Unit (fun ScriptContext Bool)))
          )
          (lam
            outRef
            (con integer)
            (lam ctx Unit (lam ctx ScriptContext [ [ bad_name True ] True ]))
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxId_cunsafeFromBuiltinData
            (fun (con data) (con bytestring))
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ { error (con bytestring) } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit (con bytestring)) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
            (fun (con data) TxOutRef)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [ { error TxOutRef } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOutRef) [ [ TxOutRef x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOutRef) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataCredential_cunsafeFromBuiltinData
            (fun (con data) Credential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [ { error Credential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ PubKeyCredential x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Credential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ ScriptCredential x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Credential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
            (fun (con data) StakingCredential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ { error StakingCredential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x StakingCredential) [ StakingHash x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit StakingCredential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ [ [ StakingPtr x ] x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit StakingCredential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataDCert_cunsafeFromBuiltinData (fun (con data) DCert)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x DCert) [ { error DCert } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegRegKey x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegDeRegKey x ])
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertDelegDelegate x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRegister x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 3) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRetire x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 4) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 5) ]
                      ]
                      (lam ds Unit DCertGenesis)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit DCert) }
                      [ [ (builtin equalsInteger) index ] (con integer 6) ]
                    ]
                    (lam ds Unit DCertMir)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptPurpose)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [ { error ScriptPurpose } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Minting x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Spending x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Rewarding x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Certifying x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                      [ [ (builtin equalsInteger) index ] (con integer 3) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
            (fun (con data) (con data))
          )
          (lam d (con data) d)
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
            (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) a)) a] (fun [(lam a (type) (fun (con data) a)) b] (fun (con data) [[Tuple2 a] b])))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) a]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) b]
                  (lam
                    d
                    (con data)
                    (let
                      (nonrec)
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ { error [[Tuple2 a] b] } (con unit ()) ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl
                          tup
                          [[(con pair) (con integer)] [(con list) (con data)]]
                        )
                        [ (builtin unConstrData) d ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl t [(con list) (con data)])
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x b)
                        [
                          dUnsafeFromData
                          [
                            { (builtin headList) (con data) }
                            [ { (builtin tailList) (con data) } t ]
                          ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x a)
                        [
                          dUnsafeFromData
                          [ { (builtin headList) (con data) } t ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ [ { { Tuple2 a } b } x ] x ]
                      )
                      [
                        [
                          [
                            [
                              { (builtin ifThenElse) (fun Unit [[Tuple2 a] b]) }
                              [
                                [
                                  (builtin equalsInteger)
                                  [
                                    {
                                      { (builtin fstPair) (con integer) }
                                      [(con list) (con data)]
                                    }
                                    tup
                                  ]
                                ]
                                (con integer 0)
                              ]
                            ]
                            (lam ds Unit x)
                          ]
                          (lam ds Unit x)
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataNil_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [List a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (rec)
                  (termbind
                    (strict)
                    (vardecl go (fun [(con list) (con data)] [List a]))
                    (lam
                      l
                      [(con list) (con data)]
                      [
                        [
                          [
                            [
                              {
                                { (builtin chooseList) (fun Unit [List a]) }
                                (con data)
                              }
                              (lam ds Unit { Nil a })
                            ]
                            (lam
                              ds
                              Unit
                              [
                                [
                                  { Cons a }
                                  [
                                    dUnsafeFromData
                                    [ { (builtin headList) (con data) } l ]
                                  ]
                                ]
                                [ go [ { (builtin tailList) (con data) } l ] ]
                              ]
                            )
                          ]
                          l
                        ]
                        Unit
                      ]
                    )
                  )
                  [ go [ (builtin unListData) d ] ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBool_cunsafeFromBuiltinData (fun (con data) Bool)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x Bool) [ { error Bool } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  [ (builtin unConstrData) d ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Bool)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Bool) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit False)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Bool) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit True)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataExtended_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Extended a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [ { error [Extended a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 0)
                            ]
                          ]
                          (lam ds Unit { NegInf a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict) (vardecl x [Extended a]) [ { Finite a } x ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit x)
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Extended a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 2) ]
                        ]
                        (lam ds Unit { PosInf a })
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [UpperBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ { error [UpperBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ [ { UpperBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [UpperBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [LowerBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ { error [LowerBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ [ { LowerBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [LowerBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Interval a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ { error [Interval a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ [ { Interval a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Interval a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMap
            (all k (type) (all v (type) (fun [(lam a (type) (fun (con data) a)) k] (fun [(lam a (type) (fun (con data) a)) v] (fun (con data) [List [[Tuple2 k] v]])))))
          )
          (abs
            k
            (type)
            (abs
              v
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) k]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) v]
                  (lam
                    eta
                    (con data)
                    [
                      [
                        {
                          fUnsafeFromDataNil_cunsafeFromBuiltinData
                          [[Tuple2 k] v]
                        }
                        [
                          [
                            {
                              { fUnsafeFromDataTuple2_cunsafeFromBuiltinData k }
                              v
                            }
                            dUnsafeFromData
                          ]
                          dUnsafeFromData
                        ]
                      ]
                      eta
                    ]
                  )
                )
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [List [[Tuple2 (con bytestring)] (con integer)]])
          )
          [
            [
              { { fUnsafeFromDataMap (con bytestring) } (con integer) }
              (builtin unBData)
            ]
            (builtin unIData)
          ]
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
          )
          [
            [
              {
                {
                  fUnsafeFromDataTuple2_cunsafeFromBuiltinData (con bytestring)
                }
                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
              }
              (builtin unBData)
            ]
            fUnsafeFromDataValue
          ]
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMaybe_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Maybe a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [ { error [Maybe a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Maybe a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit { Nothing a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind (nonstrict) (vardecl x [Maybe a]) [ { Just a } x ])
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Maybe a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 0) ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataAddress_cunsafeFromBuiltinData
            (fun (con data) Address)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Address)
                [ { error Address } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe StakingCredential])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      StakingCredential
                    }
                    fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x Address) [ [ Address x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Address) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOut_cunsafeFromBuiltinData (fun (con data) TxOut)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x TxOut) [ { error TxOut } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Address)
                [
                  fUnsafeFromDataAddress_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOut) [ [ [ TxOut x ] x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOut) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInInfo)
                [ { error TxInInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOut)
                [
                  fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxInInfo) [ [ TxInInfo x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [ { error TxInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 (con bytestring)] (con data)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] (con data)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            (con bytestring)
                          }
                          (con data)
                        }
                        (builtin unBData)
                      ]
                      fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Interval (con integer)])
                [
                  [
                    {
                      fUnsafeFromDataInterval_cunsafeFromBuiltinData
                      (con integer)
                    }
                    (builtin unIData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 StakingCredential] (con integer)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 StakingCredential] (con integer)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            StakingCredential
                          }
                          (con integer)
                        }
                        fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                      ]
                      (builtin unIData)
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List DCert])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData DCert }
                    fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxOut])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxOut }
                    fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxInInfo])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxInInfo }
                    fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  [ [ [ [ [ [ [ [ [ TxInfo x ] x ] x ] x ] x ] x ] x ] x ] x ] x
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptContext)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptContext)
                [ { error ScriptContext } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x ScriptContext) [ [ ScriptContext x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptContext) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl check (fun Bool Unit))
          (lam
            b
            Bool
            [
              [
                [ { [ Bool_match b ] (fun Unit Unit) } (lam thunk Unit Unit) ]
                (lam
                  thunk
                  Unit
                  [
                    { error Unit }
                    [
                      {
                        [
                          Unit_match
                          [
                            [
                              { (builtin chooseUnit) Unit }
                              [
                                (builtin trace) (con string "Check has failed")
                              ]
                            ]
                            Unit
                          ]
                        ]
                        (con unit)
                      }
                      (con unit ())
                    ]
                  ]
                )
              ]
              Unit
            ]
          )
        )
        (termbind
          (strict)
          (vardecl
            wrapMintingPolicy
            (all r (type) (fun [(lam a (type) (fun (con data) a)) r] (fun (fun r (fun ScriptContext Bool)) (fun (con data) (fun (con data) Unit)))))
          )
          (abs
            r
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) r]
              (lam
                f
                (fun r (fun ScriptContext Bool))
                (lam
                  r
                  (con data)
                  (lam
                    p
                    (con data)
                    [
                      check
                      [
                        [ f [ dUnsafeFromData r ] ]
                        [
                          fUnsafeFromDataScriptContext_cunsafeFromBuiltinData p
                        ]
                      ]
                    ]
                  )
                )
              )
            )
          )
        )
        [
          [
            {
              {
                { bad_name (fun Unit (fun ScriptContext Bool)) }
                (fun (con data) (fun (con data) Unit))
              }
              (con integer)
            }
            [
              { wrapMintingPolicy Unit }
              fUnsafeFromDataUnit_cunsafeFromBuiltinData
            ]
          ]
          validateMintingPolicy
        ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl These (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        These_match
        (vardecl That (fun b [[These a] b]))
        (vardecl These (fun a (fun b [[These a] b])))
        (vardecl This (fun a [[These a] b]))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (datatypebind
          (datatype
            (tyvardecl Bool (type))

            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Credential (type))

            Credential_match
            (vardecl PubKeyCredential (fun (con bytestring) Credential))
            (vardecl ScriptCredential (fun (con bytestring) Credential))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl StakingCredential (type))

            StakingCredential_match
            (vardecl StakingHash (fun Credential StakingCredential))
            (vardecl
              StakingPtr
              (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl DCert (type))

            DCert_match
            (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
            (vardecl
              DCertDelegDelegate
              (fun StakingCredential (fun (con bytestring) DCert))
            )
            (vardecl DCertDelegRegKey (fun StakingCredential DCert))
            (vardecl DCertGenesis DCert)
            (vardecl DCertMir DCert)
            (vardecl
              DCertPoolRegister
              (fun (con bytestring) (fun (con bytestring) DCert))
            )
            (vardecl
              DCertPoolRetire (fun (con bytestring) (fun (con integer) DCert))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxOutRef (type))

            TxOutRef_match
            (vardecl
              TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptPurpose (type))

            ScriptPurpose_match
            (vardecl Certifying (fun DCert ScriptPurpose))
            (vardecl Minting (fun (con bytestring) ScriptPurpose))
            (vardecl Rewarding (fun StakingCredential ScriptPurpose))
            (vardecl Spending (fun TxOutRef ScriptPurpose))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Extended (fun (type) (type)))
            (tyvardecl a (type))
            Extended_match
            (vardecl Finite (fun a [Extended a]))
            (vardecl NegInf [Extended a])
            (vardecl PosInf [Extended a])
          )
        )
        (datatypebind
          (datatype
            (tyvardecl LowerBound (fun (type) (type)))
            (tyvardecl a (type))
            LowerBound_match
            (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl UpperBound (fun (type) (type)))
            (tyvardecl a (type))
            UpperBound_match
            (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Interval (fun (type) (type)))
            (tyvardecl a (type))
            Interval_match
            (vardecl
              Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Maybe (fun (type) (type)))
            (tyvardecl a (type))
            Maybe_match
            (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Address (type))

            Address_match
            (vardecl
              Address (fun Credential (fun [Maybe StakingCredential] Address))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxOut (type))

            TxOut_match
            (vardecl
              TxOut
              (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInInfo (type))

            TxInInfo_match
            (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInfo (type))

            TxInfo_match
            (vardecl
              TxInfo
              (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptContext (type))

            ScriptContext_match
            (vardecl
              ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
            )
          )
        )
        (termbind
          (strict)
          (vardecl scriptContextTxInfo (fun ScriptContext TxInfo))
          (lam
            ds
            ScriptContext
            [
              { [ ScriptContext_match ds ] TxInfo }
              (lam ds TxInfo (lam ds ScriptPurpose ds))
            ]
          )
        )
        (termbind
          (strict)
          (vardecl
            bad_name
            (all f (fun (type) (type)) (all a (type) (all b (type) (fun [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f] (fun (fun a b) (fun [f a] [f b]))))))
          )
          (abs
            f
            (fun (type) (type))
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  dFunctor
                  [(lam f (fun (type) (type)) (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b]))))) f]
                  (lam
                    f (fun a b) (lam fa [f a] [ [ { { dFunctor a } b } f ] fa ])
                  )
                )
              )
            )
          )
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              foldr
              (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a (fun b b))
                  (lam
                    acc
                    b
                    (lam
                      l
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } l ] (fun Unit b) }
                            (lam thunk Unit acc)
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ f x ] [ [ [ { { foldr a } b } f ] acc ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                filterInputs
                (fun (fun TxInInfo Bool) (fun ScriptContext [List [[Tuple2 TxOutRef] TxOut]]))
              )
              (lam
                predicate
                (fun TxInInfo Bool)
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      f
                      (fun TxInInfo (fun [List [[Tuple2 TxOutRef] TxOut]] [List [[Tuple2 TxOutRef] TxOut]]))
                    )
                    (lam
                      e
                      TxInInfo
                      (lam
                        xs
                        [List [[Tuple2 TxOutRef] TxOut]]
                        [
                          [
                            [
                              {
                                [
                                  { Maybe_match [[Tuple2 TxOutRef] TxOut] }
                                  [
                                    [
                                      [
                                        {
                                          [ Bool_match [ predicate e ] ]
                                          (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                                        }
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            { Just [[Tuple2 TxOutRef] TxOut] }
                                            [
                                              [
                                                { { Tuple2 TxOutRef } TxOut }
                                                [
                                                  {
                                                    [ TxInInfo_match e ]
                                                    TxOutRef
                                                  }
                                                  (lam
                                                    ds
                                                    TxOutRef
                                                    (lam ds TxOut ds)
                                                  )
                                                ]
                                              ]
                                              [
                                                { [ TxInInfo_match e ] TxOut }
                                                (lam
                                                  ds TxOutRef (lam ds TxOut ds)
                                                )
                                              ]
                                            ]
                                          ]
                                        )
                                      ]
                                      (lam
                                        thunk
                                        Unit
                                        { Nothing [[Tuple2 TxOutRef] TxOut] }
                                      )
                                    ]
                                    Unit
                                  ]
                                ]
                                (fun Unit [List [[Tuple2 TxOutRef] TxOut]])
                              }
                              (lam
                                e
                                [[Tuple2 TxOutRef] TxOut]
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [ { Cons [[Tuple2 TxOutRef] TxOut] } e ] xs
                                  ]
                                )
                              )
                            ]
                            (lam thunk Unit xs)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (lam
                    x
                    ScriptContext
                    [
                      [
                        [
                          {
                            { foldr TxInInfo } [List [[Tuple2 TxOutRef] TxOut]]
                          }
                          f
                        ]
                        { Nil [[Tuple2 TxOutRef] TxOut] }
                      ]
                      [
                        {
                          [
                            TxInfo_match
                            [
                              { [ ScriptContext_match x ] TxInfo }
                              (lam ds TxInfo (lam ds ScriptPurpose ds))
                            ]
                          ]
                          [List TxInInfo]
                        }
                        (lam
                          ds
                          [List TxInInfo]
                          (lam
                            ds
                            [List TxOut]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [List DCert]
                                  (lam
                                    ds
                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                    (lam
                                      ds
                                      [Interval (con integer)]
                                      (lam
                                        ds
                                        [List (con bytestring)]
                                        (lam
                                          ds
                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                          (lam ds (con bytestring) ds)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ]
                    ]
                  )
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl AdditiveMonoid (fun (type) (type)))
                (tyvardecl a (type))
                AdditiveMonoid_match
                (vardecl
                  CConsAdditiveMonoid
                  (fun [(lam a (type) (fun a (fun a a))) a] (fun a [AdditiveMonoid a]))
                )
              )
            )
            (termbind
              (strict)
              (vardecl bad_name (fun Bool (fun Bool Bool)))
              (lam
                ds
                Bool
                (lam
                  ds
                  Bool
                  [
                    [
                      [
                        { [ Bool_match ds ] (fun Unit Bool) }
                        (lam thunk Unit True)
                      ]
                      (lam thunk Unit ds)
                    ]
                    Unit
                  ]
                )
              )
            )
            (termbind
              (nonstrict)
              (vardecl fAdditiveMonoidBool [AdditiveMonoid Bool])
              [ [ { CConsAdditiveMonoid Bool } bad_name ] False ]
            )
            (termbind
              (strict)
              (vardecl
                p1AdditiveMonoid
                (all a (type) (fun [AdditiveMonoid a] [(lam a (type) (fun a (fun a a))) a]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    {
                      [ { AdditiveMonoid_match a } v ]
                      [(lam a (type) (fun a (fun a a))) a]
                    }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Monoid (fun (type) (type)))
                (tyvardecl a (type))
                Monoid_match
                (vardecl
                  CConsMonoid
                  (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
                )
              )
            )
            (termbind
              (strict)
              (vardecl zero (all a (type) (fun [AdditiveMonoid a] a)))
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    { [ { AdditiveMonoid_match a } v ] a }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fMonoidSum
                (all a (type) (fun [AdditiveMonoid a] [Monoid [(lam a (type) a) a]]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [AdditiveMonoid a]
                  [
                    [
                      { CConsMonoid [(lam a (type) a) a] }
                      (lam
                        eta
                        [(lam a (type) a) a]
                        (lam
                          eta
                          [(lam a (type) a) a]
                          [ [ [ { p1AdditiveMonoid a } v ] eta ] eta ]
                        )
                      )
                    ]
                    [ { zero a } v ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                addInteger (fun (con integer) (fun (con integer) (con integer)))
              )
              (lam
                x
                (con integer)
                (lam y (con integer) [ [ (builtin addInteger) x ] y ])
              )
            )
            (termbind
              (nonstrict)
              (vardecl fAdditiveMonoidInteger [AdditiveMonoid (con integer)])
              [
                [ { CConsAdditiveMonoid (con integer) } addInteger ]
                (con integer 0)
              ]
            )
            (termbind
              (strict)
              (vardecl snd (all a (type) (all b (type) (fun [[Tuple2 a] b] b))))
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    ds
                    [[Tuple2 a] b]
                    [
                      { [ { { Tuple2_match a } b } ds ] b }
                      (lam ds a (lam b b b))
                    ]
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                equalsByteString
                (fun (con bytestring) (fun (con bytestring) Bool))
              )
              (lam
                x
                (con bytestring)
                (lam
                  y
                  (con bytestring)
                  [
                    [
                      [
                        { (builtin ifThenElse) Bool }
                        [ [ (builtin equalsByteString) x ] y ]
                      ]
                      True
                    ]
                    False
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                p1Monoid
                (all a (type) (fun [Monoid a] [(lam a (type) (fun a (fun a a))) a]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [Monoid a]
                  [
                    {
                      [ { Monoid_match a } v ]
                      [(lam a (type) (fun a (fun a a))) a]
                    }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl mempty (all a (type) (fun [Monoid a] a)))
              (abs
                a
                (type)
                (lam
                  v
                  [Monoid a]
                  [
                    { [ { Monoid_match a } v ] a }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (let
              (rec)
              (termbind
                (nonstrict)
                (vardecl
                  fFoldableNil_cfoldMap
                  (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
                )
                (abs
                  m
                  (type)
                  (abs
                    a
                    (type)
                    (lam
                      dMonoid
                      [Monoid m]
                      (let
                        (nonrec)
                        (termbind
                          (nonstrict)
                          (vardecl
                            dSemigroup [(lam a (type) (fun a (fun a a))) m]
                          )
                          [ { p1Monoid m } dMonoid ]
                        )
                        (lam
                          ds
                          (fun a m)
                          (lam
                            ds
                            [List a]
                            [
                              [
                                [
                                  { [ { Nil_match a } ds ] (fun Unit m) }
                                  (lam thunk Unit [ { mempty m } dMonoid ])
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [List a]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [ dSemigroup [ ds x ] ]
                                        [
                                          [
                                            [
                                              { { fFoldableNil_cfoldMap m } a }
                                              dMonoid
                                            ]
                                            ds
                                          ]
                                          xs
                                        ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                )
              )
              (let
                (rec)
                (termbind
                  (nonstrict)
                  (vardecl
                    fFunctorNil_cfmap
                    (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
                  )
                  (abs
                    a
                    (type)
                    (abs
                      b
                      (type)
                      (lam
                        f
                        (fun a b)
                        (lam
                          l
                          [List a]
                          [
                            [
                              [
                                { [ { Nil_match a } l ] (fun Unit [List b]) }
                                (lam thunk Unit { Nil b })
                              ]
                              (lam
                                x
                                a
                                (lam
                                  xs
                                  [List a]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [ { Cons b } [ f x ] ]
                                      [ [ { { fFunctorNil_cfmap a } b } f ] xs ]
                                    ]
                                  )
                                )
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                )
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      f
                      (fun [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List (con bytestring)] [List (con bytestring)]))
                    )
                    (lam
                      ds
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        acc
                        [List (con bytestring)]
                        [
                          {
                            [
                              {
                                { Tuple2_match (con bytestring) }
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                              }
                              ds
                            ]
                            [List (con bytestring)]
                          }
                          (lam
                            currency
                            (con bytestring)
                            (lam
                              tokens
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                              (let
                                (nonrec)
                                (termbind
                                  (nonstrict)
                                  (vardecl
                                    dMonoid [Monoid [(lam a (type) a) Bool]]
                                  )
                                  [ { fMonoidSum Bool } fAdditiveMonoidBool ]
                                )
                                [
                                  [
                                    [
                                      {
                                        [
                                          Bool_match
                                          [
                                            [
                                              [
                                                {
                                                  {
                                                    fFoldableNil_cfoldMap
                                                    [(lam a (type) a) Bool]
                                                  }
                                                  (con bytestring)
                                                }
                                                dMonoid
                                              ]
                                              [ equalsByteString currency ]
                                            ]
                                            acc
                                          ]
                                        ]
                                        (fun Unit [List (con bytestring)])
                                      }
                                      (lam thunk Unit acc)
                                    ]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            {
                                              [
                                                Bool_match
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) a) (con integer)]
                                                                  }
                                                                  (con integer)
                                                                }
                                                                [
                                                                  {
                                                                    fMonoidSum
                                                                    (con integer)
                                                                  }
                                                                  fAdditiveMonoidInteger
                                                                ]
                                                              ]
                                                              (lam
                                                                v
                                                                (con integer)
                                                                v
                                                              )
                                                            ]
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFunctorNil_cfmap
                                                                    [[Tuple2 (con bytestring)] (con integer)]
                                                                  }
                                                                  (con integer)
                                                                }
                                                                {
                                                                  {
                                                                    snd
                                                                    (con bytestring)
                                                                  }
                                                                  (con integer)
                                                                }
                                                              ]
                                                              tokens
                                                            ]
                                                          ]
                                                        ]
                                                        (con integer 0)
                                                      ]
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              ]
                                              (fun Unit [List (con bytestring)])
                                            }
                                            (lam thunk Unit acc)
                                          ]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                { Cons (con bytestring) }
                                                currency
                                              ]
                                              acc
                                            ]
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      bad_name
                      (all b (type) (all c (type) (all a (type) (fun (fun b c) (fun (fun a b) (fun a c))))))
                    )
                    (abs
                      b
                      (type)
                      (abs
                        c
                        (type)
                        (abs
                          a
                          (type)
                          (lam
                            f
                            (fun b c)
                            (lam g (fun a b) (lam x a [ f [ g x ] ]))
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fSemigroupEndo_c
                      (all a (type) (fun [(lam a (type) (fun a a)) a] (fun [(lam a (type) (fun a a)) a] [(lam a (type) (fun a a)) a])))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        ds
                        [(lam a (type) (fun a a)) a]
                        (lam
                          ds
                          [(lam a (type) (fun a a)) a]
                          [ [ { { { bad_name a } a } a } ds ] ds ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl id (all a (type) (fun a a)))
                    (abs a (type) (lam x a x))
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidEndo
                      (all a (type) [Monoid [(lam a (type) (fun a a)) a]])
                    )
                    (abs
                      a
                      (type)
                      [
                        [
                          { CConsMonoid [(lam a (type) (fun a a)) a] }
                          { fSemigroupEndo_c a }
                        ]
                        { id a }
                      ]
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      symbols
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [List (con bytestring)])
                    )
                    (lam
                      x
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      [
                        [
                          [
                            [
                              {
                                {
                                  fFoldableNil_cfoldMap
                                  [(lam a (type) (fun a a)) [List (con bytestring)]]
                                }
                                [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              }
                              { fMonoidEndo [List (con bytestring)] }
                            ]
                            f
                          ]
                          x
                        ]
                        { Nil (con bytestring) }
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl hasParty (fun (con bytestring) (fun TxInInfo Bool))
                    )
                    (lam
                      policyId
                      (con bytestring)
                      (lam
                        input
                        TxInInfo
                        (let
                          (nonrec)
                          (termbind
                            (nonstrict)
                            (vardecl dMonoid [Monoid [(lam a (type) a) Bool]])
                            [ { fMonoidSum Bool } fAdditiveMonoidBool ]
                          )
                          [
                            [
                              [
                                {
                                  {
                                    fFoldableNil_cfoldMap
                                    [(lam a (type) a) Bool]
                                  }
                                  (con bytestring)
                                }
                                dMonoid
                              ]
                              [ equalsByteString policyId ]
                            ]
                            [
                              symbols
                              [
                                {
                                  [
                                    TxOut_match
                                    [
                                      { [ TxInInfo_match input ] TxOut }
                                      (lam ds TxOutRef (lam ds TxOut ds))
                                    ]
                                  ]
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                }
                                (lam
                                  ds
                                  Address
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam ds [Maybe (con bytestring)] ds)
                                  )
                                )
                              ]
                            ]
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataByteString_cfromBuiltinData
                      (fun (con data) [Maybe (con bytestring)])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe (con bytestring)])
                                    }
                                    (lam ds Unit { Nothing (con bytestring) })
                                  ]
                                  (lam ds Unit { Nothing (con bytestring) })
                                ]
                                (lam ds Unit { Nothing (con bytestring) })
                              ]
                              (lam ds Unit { Nothing (con bytestring) })
                            ]
                            (lam
                              ds
                              Unit
                              [
                                { Just (con bytestring) }
                                [ (builtin unBData) d ]
                              ]
                            )
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataCredential_cfromBuiltinData
                      (fun (con data) [Maybe Credential])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe Credential])
                                    }
                                    (lam
                                      ds
                                      Unit
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            tup
                                            [[(con pair) (con integer)] [(con list) (con data)]]
                                          )
                                          [ (builtin unConstrData) d ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl args [(con list) (con data)])
                                          [
                                            {
                                              {
                                                (builtin sndPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl nilCase [Maybe Credential])
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    {
                                                      Maybe_match
                                                      (con bytestring)
                                                    }
                                                    [
                                                      fFromDataByteString_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        args
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe Credential])
                                                }
                                                (lam
                                                  ipv
                                                  (con bytestring)
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      { Just Credential }
                                                      [ PubKeyCredential ipv ]
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                { Nothing Credential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe Credential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Credential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam
                                                  ds Unit { Nothing Credential }
                                                )
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                args
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe Credential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Credential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    { Nothing Credential }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              args
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl index (con integer))
                                          [
                                            {
                                              {
                                                (builtin fstPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe Credential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    (builtin ifThenElse)
                                                    (fun Unit [Maybe Credential])
                                                  }
                                                  [
                                                    [
                                                      (builtin equalsInteger)
                                                      index
                                                    ]
                                                    (con integer 0)
                                                  ]
                                                ]
                                                (lam ds Unit x)
                                              ]
                                              (lam
                                                ds Unit { Nothing Credential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl nilCase [Maybe Credential])
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    {
                                                      Maybe_match
                                                      (con bytestring)
                                                    }
                                                    [
                                                      fFromDataByteString_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        args
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe Credential])
                                                }
                                                (lam
                                                  ipv
                                                  (con bytestring)
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      { Just Credential }
                                                      [ ScriptCredential ipv ]
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                { Nothing Credential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe Credential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Credential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam
                                                  ds Unit { Nothing Credential }
                                                )
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                args
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe Credential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Credential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    { Nothing Credential }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              args
                                            ]
                                            Unit
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  (builtin ifThenElse)
                                                  (fun Unit [Maybe Credential])
                                                }
                                                [
                                                  [
                                                    (builtin equalsInteger)
                                                    index
                                                  ]
                                                  (con integer 1)
                                                ]
                                              ]
                                              (lam ds Unit x)
                                            ]
                                            (lam ds Unit x)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam ds Unit { Nothing Credential })
                                ]
                                (lam ds Unit { Nothing Credential })
                              ]
                              (lam ds Unit { Nothing Credential })
                            ]
                            (lam ds Unit { Nothing Credential })
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataInteger_cfromBuiltinData
                      (fun (con data) [Maybe (con integer)])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe (con integer)])
                                    }
                                    (lam ds Unit { Nothing (con integer) })
                                  ]
                                  (lam ds Unit { Nothing (con integer) })
                                ]
                                (lam ds Unit { Nothing (con integer) })
                              ]
                              (lam
                                ds
                                Unit
                                [
                                  { Just (con integer) } [ (builtin unIData) d ]
                                ]
                              )
                            ]
                            (lam ds Unit { Nothing (con integer) })
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataStakingCredential_cfromBuiltinData
                      (fun (con data) [Maybe StakingCredential])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe StakingCredential])
                                    }
                                    (lam
                                      ds
                                      Unit
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            tup
                                            [[(con pair) (con integer)] [(con list) (con data)]]
                                          )
                                          [ (builtin unConstrData) d ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl args [(con list) (con data)])
                                          [
                                            {
                                              {
                                                (builtin sndPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            nilCase [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    { Maybe_match Credential }
                                                    [
                                                      fFromDataCredential_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        args
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe StakingCredential])
                                                }
                                                (lam
                                                  ipv
                                                  Credential
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      { Just StakingCredential }
                                                      [ StakingHash ipv ]
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                { Nothing StakingCredential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam
                                                  ds
                                                  Unit
                                                  { Nothing StakingCredential }
                                                )
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                args
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe StakingCredential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    {
                                                      Nothing StakingCredential
                                                    }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              args
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl index (con integer))
                                          [
                                            {
                                              {
                                                (builtin fstPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe StakingCredential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    (builtin ifThenElse)
                                                    (fun Unit [Maybe StakingCredential])
                                                  }
                                                  [
                                                    [
                                                      (builtin equalsInteger)
                                                      index
                                                    ]
                                                    (con integer 0)
                                                  ]
                                                ]
                                                (lam ds Unit x)
                                              ]
                                              (lam
                                                ds
                                                Unit
                                                { Nothing StakingCredential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            { (builtin tailList) (con data) }
                                            args
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            { (builtin tailList) (con data) } l
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            nilCase [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    {
                                                      Maybe_match (con integer)
                                                    }
                                                    [
                                                      fFromDataInteger_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        args
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe StakingCredential])
                                                }
                                                (lam
                                                  ipv
                                                  (con integer)
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Maybe_match
                                                                (con integer)
                                                              }
                                                              [
                                                                fFromDataInteger_cfromBuiltinData
                                                                [
                                                                  {
                                                                    (builtin
                                                                      headList
                                                                    )
                                                                    (con data)
                                                                  }
                                                                  l
                                                                ]
                                                              ]
                                                            ]
                                                            (fun Unit [Maybe StakingCredential])
                                                          }
                                                          (lam
                                                            ipv
                                                            (con integer)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Maybe_match
                                                                          (con integer)
                                                                        }
                                                                        [
                                                                          fFromDataInteger_cfromBuiltinData
                                                                          [
                                                                            {
                                                                              (builtin
                                                                                headList
                                                                              )
                                                                              (con data)
                                                                            }
                                                                            l
                                                                          ]
                                                                        ]
                                                                      ]
                                                                      (fun Unit [Maybe StakingCredential])
                                                                    }
                                                                    (lam
                                                                      ipv
                                                                      (con integer)
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          {
                                                                            Just
                                                                            StakingCredential
                                                                          }
                                                                          [
                                                                            [
                                                                              [
                                                                                StakingPtr
                                                                                ipv
                                                                              ]
                                                                              ipv
                                                                            ]
                                                                            ipv
                                                                          ]
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    {
                                                                      Nothing
                                                                      StakingCredential
                                                                    }
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          {
                                                            Nothing
                                                            StakingCredential
                                                          }
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                { Nothing StakingCredential }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam
                                                  ds
                                                  Unit
                                                  { Nothing StakingCredential }
                                                )
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                l
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    {
                                                      Nothing StakingCredential
                                                    }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe StakingCredential]
                                          )
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    {
                                                      Nothing StakingCredential
                                                    }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe StakingCredential])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe StakingCredential])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds
                                                    Unit
                                                    {
                                                      Nothing StakingCredential
                                                    }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              args
                                            ]
                                            Unit
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  (builtin ifThenElse)
                                                  (fun Unit [Maybe StakingCredential])
                                                }
                                                [
                                                  [
                                                    (builtin equalsInteger)
                                                    index
                                                  ]
                                                  (con integer 1)
                                                ]
                                              ]
                                              (lam ds Unit x)
                                            ]
                                            (lam ds Unit x)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam ds Unit { Nothing StakingCredential })
                                ]
                                (lam ds Unit { Nothing StakingCredential })
                              ]
                              (lam ds Unit { Nothing StakingCredential })
                            ]
                            (lam ds Unit { Nothing StakingCredential })
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataMaybe_cfromBuiltinData
                      (all a (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun (con data) [Maybe [Maybe a]])))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dFromData
                        [(lam a (type) (fun (con data) [Maybe a])) a]
                        (lam
                          d
                          (con data)
                          [
                            [
                              [
                                [
                                  [
                                    [
                                      [
                                        {
                                          (builtin chooseData)
                                          (fun Unit [Maybe [Maybe a]])
                                        }
                                        (lam
                                          ds
                                          Unit
                                          (let
                                            (nonrec)
                                            (termbind
                                              (nonstrict)
                                              (vardecl nilCase [Maybe [Maybe a]]
                                              )
                                              [
                                                { Just [Maybe a] } { Nothing a }
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl
                                                tup
                                                [[(con pair) (con integer)] [(con list) (con data)]]
                                              )
                                              [ (builtin unConstrData) d ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl
                                                args [(con list) (con data)]
                                              )
                                              [
                                                {
                                                  {
                                                    (builtin sndPair)
                                                    (con integer)
                                                  }
                                                  [(con list) (con data)]
                                                }
                                                tup
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl x [Maybe [Maybe a]])
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        {
                                                          (builtin chooseList)
                                                          (fun Unit [Maybe [Maybe a]])
                                                        }
                                                        (con data)
                                                      }
                                                      (lam ds Unit nilCase)
                                                    ]
                                                    (lam
                                                      ds
                                                      Unit
                                                      { Nothing [Maybe a] }
                                                    )
                                                  ]
                                                  args
                                                ]
                                                Unit
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl index (con integer))
                                              [
                                                {
                                                  {
                                                    (builtin fstPair)
                                                    (con integer)
                                                  }
                                                  [(con list) (con data)]
                                                }
                                                tup
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl x [Maybe [Maybe a]])
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        (fun Unit [Maybe [Maybe a]])
                                                      }
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          index
                                                        ]
                                                        (con integer 1)
                                                      ]
                                                    ]
                                                    (lam ds Unit x)
                                                  ]
                                                  (lam
                                                    ds
                                                    Unit
                                                    { Nothing [Maybe a] }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl nilCase [Maybe [Maybe a]]
                                              )
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        { Maybe_match a }
                                                        [
                                                          dFromData
                                                          [
                                                            {
                                                              (builtin headList)
                                                              (con data)
                                                            }
                                                            args
                                                          ]
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe [Maybe a]])
                                                    }
                                                    (lam
                                                      ipv
                                                      a
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          { Just [Maybe a] }
                                                          [ { Just a } ipv ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing [Maybe a] }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl lvl [Maybe [Maybe a]])
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        {
                                                          (builtin chooseList)
                                                          (fun Unit [Maybe [Maybe a]])
                                                        }
                                                        (con data)
                                                      }
                                                      (lam ds Unit nilCase)
                                                    ]
                                                    (lam
                                                      ds
                                                      Unit
                                                      { Nothing [Maybe a] }
                                                    )
                                                  ]
                                                  [
                                                    {
                                                      (builtin tailList)
                                                      (con data)
                                                    }
                                                    args
                                                  ]
                                                ]
                                                Unit
                                              ]
                                            )
                                            (termbind
                                              (nonstrict)
                                              (vardecl x [Maybe [Maybe a]])
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        {
                                                          (builtin chooseList)
                                                          (fun Unit [Maybe [Maybe a]])
                                                        }
                                                        (con data)
                                                      }
                                                      (lam
                                                        ds
                                                        Unit
                                                        { Nothing [Maybe a] }
                                                      )
                                                    ]
                                                    (lam ds Unit lvl)
                                                  ]
                                                  args
                                                ]
                                                Unit
                                              ]
                                            )
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      (builtin ifThenElse)
                                                      (fun Unit [Maybe [Maybe a]])
                                                    }
                                                    [
                                                      [
                                                        (builtin equalsInteger)
                                                        index
                                                      ]
                                                      (con integer 0)
                                                    ]
                                                  ]
                                                  (lam ds Unit x)
                                                ]
                                                (lam ds Unit x)
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      ]
                                      (lam ds Unit { Nothing [Maybe a] })
                                    ]
                                    (lam ds Unit { Nothing [Maybe a] })
                                  ]
                                  (lam ds Unit { Nothing [Maybe a] })
                                ]
                                (lam ds Unit { Nothing [Maybe a] })
                              ]
                              d
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataAddress_cfromBuiltinData
                      (fun (con data) [Maybe Address])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe Address])
                                    }
                                    (lam
                                      ds
                                      Unit
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            tup
                                            [[(con pair) (con integer)] [(con list) (con data)]]
                                          )
                                          [ (builtin unConstrData) d ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            {
                                              {
                                                (builtin sndPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            { (builtin tailList) (con data) } l
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl nilCase [Maybe Address])
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    { Maybe_match Credential }
                                                    [
                                                      fFromDataCredential_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        l
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe Address])
                                                }
                                                (lam
                                                  ipv
                                                  Credential
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Maybe_match
                                                                [Maybe StakingCredential]
                                                              }
                                                              [
                                                                [
                                                                  {
                                                                    fFromDataMaybe_cfromBuiltinData
                                                                    StakingCredential
                                                                  }
                                                                  fFromDataStakingCredential_cfromBuiltinData
                                                                ]
                                                                [
                                                                  {
                                                                    (builtin
                                                                      headList
                                                                    )
                                                                    (con data)
                                                                  }
                                                                  l
                                                                ]
                                                              ]
                                                            ]
                                                            (fun Unit [Maybe Address])
                                                          }
                                                          (lam
                                                            ipv
                                                            [Maybe StakingCredential]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                { Just Address }
                                                                [
                                                                  [
                                                                    Address ipv
                                                                  ]
                                                                  ipv
                                                                ]
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          { Nothing Address }
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk Unit { Nothing Address }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe Address])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Address])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam ds Unit { Nothing Address }
                                                )
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                l
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe Address])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Address])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds Unit { Nothing Address }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe Address])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe Address])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam
                                                    ds Unit { Nothing Address }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  (builtin ifThenElse)
                                                  (fun Unit [Maybe Address])
                                                }
                                                [
                                                  [
                                                    (builtin equalsInteger)
                                                    [
                                                      {
                                                        {
                                                          (builtin fstPair)
                                                          (con integer)
                                                        }
                                                        [(con list) (con data)]
                                                      }
                                                      tup
                                                    ]
                                                  ]
                                                  (con integer 0)
                                                ]
                                              ]
                                              (lam ds Unit x)
                                            ]
                                            (lam ds Unit { Nothing Address })
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam ds Unit { Nothing Address })
                                ]
                                (lam ds Unit { Nothing Address })
                              ]
                              (lam ds Unit { Nothing Address })
                            ]
                            (lam ds Unit { Nothing Address })
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataTuple2_cfromBuiltinData
                      (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun [(lam a (type) (fun (con data) [Maybe a])) b] (fun (con data) [Maybe [[Tuple2 a] b]])))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          dFromData
                          [(lam a (type) (fun (con data) [Maybe a])) a]
                          (lam
                            dFromData
                            [(lam a (type) (fun (con data) [Maybe a])) b]
                            (lam
                              d
                              (con data)
                              [
                                [
                                  [
                                    [
                                      [
                                        [
                                          [
                                            {
                                              (builtin chooseData)
                                              (fun Unit [Maybe [[Tuple2 a] b]])
                                            }
                                            (lam
                                              ds
                                              Unit
                                              (let
                                                (nonrec)
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    tup
                                                    [[(con pair) (con integer)] [(con list) (con data)]]
                                                  )
                                                  [ (builtin unConstrData) d ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    l [(con list) (con data)]
                                                  )
                                                  [
                                                    {
                                                      {
                                                        (builtin sndPair)
                                                        (con integer)
                                                      }
                                                      [(con list) (con data)]
                                                    }
                                                    tup
                                                  ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    l [(con list) (con data)]
                                                  )
                                                  [
                                                    {
                                                      (builtin tailList)
                                                      (con data)
                                                    }
                                                    l
                                                  ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    nilCase
                                                    [Maybe [[Tuple2 a] b]]
                                                  )
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            { Maybe_match a }
                                                            [
                                                              dFromData
                                                              [
                                                                {
                                                                  (builtin
                                                                    headList
                                                                  )
                                                                  (con data)
                                                                }
                                                                l
                                                              ]
                                                            ]
                                                          ]
                                                          (fun Unit [Maybe [[Tuple2 a] b]])
                                                        }
                                                        (lam
                                                          ipv
                                                          a
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        Maybe_match
                                                                        b
                                                                      }
                                                                      [
                                                                        dFromData
                                                                        [
                                                                          {
                                                                            (builtin
                                                                              headList
                                                                            )
                                                                            (con data)
                                                                          }
                                                                          l
                                                                        ]
                                                                      ]
                                                                    ]
                                                                    (fun Unit [Maybe [[Tuple2 a] b]])
                                                                  }
                                                                  (lam
                                                                    ipv
                                                                    b
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        {
                                                                          Just
                                                                          [[Tuple2 a] b]
                                                                        }
                                                                        [
                                                                          [
                                                                            {
                                                                              {
                                                                                Tuple2
                                                                                a
                                                                              }
                                                                              b
                                                                            }
                                                                            ipv
                                                                          ]
                                                                          ipv
                                                                        ]
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  {
                                                                    Nothing
                                                                    [[Tuple2 a] b]
                                                                  }
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        {
                                                          Nothing [[Tuple2 a] b]
                                                        }
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    lvl [Maybe [[Tuple2 a] b]]
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              (builtin
                                                                chooseList
                                                              )
                                                              (fun Unit [Maybe [[Tuple2 a] b]])
                                                            }
                                                            (con data)
                                                          }
                                                          (lam ds Unit nilCase)
                                                        ]
                                                        (lam
                                                          ds
                                                          Unit
                                                          {
                                                            Nothing
                                                            [[Tuple2 a] b]
                                                          }
                                                        )
                                                      ]
                                                      [
                                                        {
                                                          (builtin tailList)
                                                          (con data)
                                                        }
                                                        l
                                                      ]
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    lvl [Maybe [[Tuple2 a] b]]
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              (builtin
                                                                chooseList
                                                              )
                                                              (fun Unit [Maybe [[Tuple2 a] b]])
                                                            }
                                                            (con data)
                                                          }
                                                          (lam
                                                            ds
                                                            Unit
                                                            {
                                                              Nothing
                                                              [[Tuple2 a] b]
                                                            }
                                                          )
                                                        ]
                                                        (lam ds Unit lvl)
                                                      ]
                                                      l
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                                (termbind
                                                  (nonstrict)
                                                  (vardecl
                                                    x [Maybe [[Tuple2 a] b]]
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              (builtin
                                                                chooseList
                                                              )
                                                              (fun Unit [Maybe [[Tuple2 a] b]])
                                                            }
                                                            (con data)
                                                          }
                                                          (lam
                                                            ds
                                                            Unit
                                                            {
                                                              Nothing
                                                              [[Tuple2 a] b]
                                                            }
                                                          )
                                                        ]
                                                        (lam ds Unit lvl)
                                                      ]
                                                      l
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                                [
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          (fun Unit [Maybe [[Tuple2 a] b]])
                                                        }
                                                        [
                                                          [
                                                            (builtin
                                                              equalsInteger
                                                            )
                                                            [
                                                              {
                                                                {
                                                                  (builtin
                                                                    fstPair
                                                                  )
                                                                  (con integer)
                                                                }
                                                                [(con list) (con data)]
                                                              }
                                                              tup
                                                            ]
                                                          ]
                                                          (con integer 0)
                                                        ]
                                                      ]
                                                      (lam ds Unit x)
                                                    ]
                                                    (lam
                                                      ds
                                                      Unit
                                                      { Nothing [[Tuple2 a] b] }
                                                    )
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          ]
                                          (lam
                                            ds Unit { Nothing [[Tuple2 a] b] }
                                          )
                                        ]
                                        (lam ds Unit { Nothing [[Tuple2 a] b] })
                                      ]
                                      (lam ds Unit { Nothing [[Tuple2 a] b] })
                                    ]
                                    (lam ds Unit { Nothing [[Tuple2 a] b] })
                                  ]
                                  d
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fFromDataValue
                      (fun (con data) [Maybe [[Tuple2 (con bytestring)] (con integer)]])
                    )
                    [
                      [
                        {
                          { fFromDataTuple2_cfromBuiltinData (con bytestring) }
                          (con integer)
                        }
                        fFromDataByteString_cfromBuiltinData
                      ]
                      fFromDataInteger_cfromBuiltinData
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataNil_cfromBuiltinData
                      (all a (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun (con data) [Maybe [List a]])))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dFromData
                        [(lam a (type) (fun (con data) [Maybe a])) a]
                        (lam
                          d
                          (con data)
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [(con list) (con data)] [Maybe [List a]])
                              )
                              (lam
                                l
                                [(con list) (con data)]
                                (let
                                  (nonrec)
                                  (termbind
                                    (nonstrict)
                                    (vardecl x [Maybe [List a]])
                                    [ { Just [List a] } { Nil a } ]
                                  )
                                  [
                                    [
                                      [
                                        [
                                          {
                                            {
                                              (builtin chooseList)
                                              (fun Unit [Maybe [List a]])
                                            }
                                            (con data)
                                          }
                                          (lam ds Unit x)
                                        ]
                                        (lam
                                          ds
                                          Unit
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    { Maybe_match a }
                                                    [
                                                      dFromData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        l
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe [List a]])
                                                }
                                                (lam
                                                  a
                                                  a
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Maybe_match
                                                                [List a]
                                                              }
                                                              [
                                                                go
                                                                [
                                                                  {
                                                                    (builtin
                                                                      tailList
                                                                    )
                                                                    (con data)
                                                                  }
                                                                  l
                                                                ]
                                                              ]
                                                            ]
                                                            (fun Unit [Maybe [List a]])
                                                          }
                                                          (lam
                                                            ipv
                                                            [List a]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                {
                                                                  Just [List a]
                                                                }
                                                                [
                                                                  [
                                                                    { Cons a } a
                                                                  ]
                                                                  ipv
                                                                ]
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          { Nothing [List a] }
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam
                                                thunk Unit { Nothing [List a] }
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      ]
                                      l
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            )
                            [
                              [
                                [
                                  [
                                    [
                                      [
                                        [
                                          {
                                            (builtin chooseData)
                                            (fun Unit [Maybe [List a]])
                                          }
                                          (lam ds Unit { Nothing [List a] })
                                        ]
                                        (lam ds Unit { Nothing [List a] })
                                      ]
                                      (lam
                                        ds
                                        Unit
                                        [ go [ (builtin unListData) d ] ]
                                      )
                                    ]
                                    (lam ds Unit { Nothing [List a] })
                                  ]
                                  (lam ds Unit { Nothing [List a] })
                                ]
                                d
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataValue
                      (fun (con data) [Maybe [List [[Tuple2 (con bytestring)] (con integer)]]])
                    )
                    (lam
                      eta
                      (con data)
                      [
                        [
                          {
                            fFromDataNil_cfromBuiltinData
                            [[Tuple2 (con bytestring)] (con integer)]
                          }
                          fFromDataValue
                        ]
                        eta
                      ]
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fFromDataValue
                      (fun (con data) [Maybe [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                    )
                    [
                      [
                        {
                          { fFromDataTuple2_cfromBuiltinData (con bytestring) }
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                        }
                        fFromDataByteString_cfromBuiltinData
                      ]
                      fFromDataValue
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFromDataTxOut_cfromBuiltinData
                      (fun (con data) [Maybe TxOut])
                    )
                    (lam
                      d
                      (con data)
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    {
                                      (builtin chooseData)
                                      (fun Unit [Maybe TxOut])
                                    }
                                    (lam
                                      ds
                                      Unit
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl
                                            tup
                                            [[(con pair) (con integer)] [(con list) (con data)]]
                                          )
                                          [ (builtin unConstrData) d ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            {
                                              {
                                                (builtin sndPair) (con integer)
                                              }
                                              [(con list) (con data)]
                                            }
                                            tup
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            { (builtin tailList) (con data) } l
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl l [(con list) (con data)])
                                          [
                                            { (builtin tailList) (con data) } l
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl nilCase [Maybe TxOut])
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    { Maybe_match Address }
                                                    [
                                                      fFromDataAddress_cfromBuiltinData
                                                      [
                                                        {
                                                          (builtin headList)
                                                          (con data)
                                                        }
                                                        l
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit [Maybe TxOut])
                                                }
                                                (lam
                                                  ipv
                                                  Address
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Maybe_match
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              }
                                                              [
                                                                [
                                                                  {
                                                                    fFromDataNil_cfromBuiltinData
                                                                    [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                  }
                                                                  fFromDataValue
                                                                ]
                                                                [
                                                                  {
                                                                    (builtin
                                                                      headList
                                                                    )
                                                                    (con data)
                                                                  }
                                                                  l
                                                                ]
                                                              ]
                                                            ]
                                                            (fun Unit [Maybe TxOut])
                                                          }
                                                          (lam
                                                            ipv
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Maybe_match
                                                                          [Maybe (con bytestring)]
                                                                        }
                                                                        [
                                                                          [
                                                                            {
                                                                              fFromDataMaybe_cfromBuiltinData
                                                                              (con bytestring)
                                                                            }
                                                                            fFromDataByteString_cfromBuiltinData
                                                                          ]
                                                                          [
                                                                            {
                                                                              (builtin
                                                                                headList
                                                                              )
                                                                              (con data)
                                                                            }
                                                                            l
                                                                          ]
                                                                        ]
                                                                      ]
                                                                      (fun Unit [Maybe TxOut])
                                                                    }
                                                                    (lam
                                                                      ipv
                                                                      [Maybe (con bytestring)]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          {
                                                                            Just
                                                                            TxOut
                                                                          }
                                                                          [
                                                                            [
                                                                              [
                                                                                TxOut
                                                                                ipv
                                                                              ]
                                                                              ipv
                                                                            ]
                                                                            ipv
                                                                          ]
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    {
                                                                      Nothing
                                                                      TxOut
                                                                    }
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          { Nothing TxOut }
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam thunk Unit { Nothing TxOut })
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe TxOut])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe TxOut])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit nilCase)
                                                ]
                                                (lam ds Unit { Nothing TxOut })
                                              ]
                                              [
                                                {
                                                  (builtin tailList) (con data)
                                                }
                                                l
                                              ]
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe TxOut])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe TxOut])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit { Nothing TxOut }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl lvl [Maybe TxOut])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe TxOut])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit { Nothing TxOut }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        (termbind
                                          (nonstrict)
                                          (vardecl x [Maybe TxOut])
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      (builtin chooseList)
                                                      (fun Unit [Maybe TxOut])
                                                    }
                                                    (con data)
                                                  }
                                                  (lam ds Unit { Nothing TxOut }
                                                  )
                                                ]
                                                (lam ds Unit lvl)
                                              ]
                                              l
                                            ]
                                            Unit
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  (builtin ifThenElse)
                                                  (fun Unit [Maybe TxOut])
                                                }
                                                [
                                                  [
                                                    (builtin equalsInteger)
                                                    [
                                                      {
                                                        {
                                                          (builtin fstPair)
                                                          (con integer)
                                                        }
                                                        [(con list) (con data)]
                                                      }
                                                      tup
                                                    ]
                                                  ]
                                                  (con integer 0)
                                                ]
                                              ]
                                              (lam ds Unit x)
                                            ]
                                            (lam ds Unit { Nothing TxOut })
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam ds Unit { Nothing TxOut })
                                ]
                                (lam ds Unit { Nothing TxOut })
                              ]
                              (lam ds Unit { Nothing TxOut })
                            ]
                            (lam ds Unit { Nothing TxOut })
                          ]
                          d
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fApplicativeMaybe_c
                      (all a (type) (all b (type) (fun [Maybe a] (fun [Maybe b] [Maybe a]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          [Maybe a]
                          (lam
                            ds
                            [Maybe b]
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match a } ds ]
                                    (fun Unit [Maybe a])
                                  }
                                  (lam
                                    x
                                    a
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            {
                                              [ { Maybe_match b } ds ]
                                              (fun Unit [Maybe a])
                                            }
                                            (lam
                                              y
                                              b
                                              (lam thunk Unit [ { Just a } x ])
                                            )
                                          ]
                                          (lam thunk Unit { Nothing a })
                                        ]
                                        Unit
                                      ]
                                    )
                                  )
                                ]
                                (lam thunk Unit { Nothing a })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fApplicativeMaybe_cfmap
                      (all a (type) (all b (type) (fun (fun a b) (fun [Maybe a] [Maybe b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          (fun a b)
                          (lam
                            ds
                            [Maybe a]
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match a } ds ]
                                    (fun Unit [Maybe b])
                                  }
                                  (lam
                                    a a (lam thunk Unit [ { Just b } [ ds a ] ])
                                  )
                                ]
                                (lam thunk Unit { Nothing b })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fApplicativeMaybe_c
                      (all a (type) (all b (type) (fun [Maybe (fun a b)] (fun [Maybe a] [Maybe b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          [Maybe (fun a b)]
                          (lam
                            m
                            [Maybe a]
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match (fun a b) } ds ]
                                    (fun Unit [Maybe b])
                                  }
                                  (lam
                                    f
                                    (fun a b)
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          { { fApplicativeMaybe_cfmap a } b } f
                                        ]
                                        m
                                      ]
                                    )
                                  )
                                ]
                                (lam thunk Unit { Nothing b })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fApplicativeMaybe_cliftA
                      (all a (type) (all b (type) (all c (type) (fun (fun a (fun b c)) (fun [Maybe a] (fun [Maybe b] [Maybe c]))))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (abs
                          c
                          (type)
                          (lam
                            f
                            (fun a (fun b c))
                            (lam
                              ds
                              [Maybe a]
                              (lam
                                ds
                                [Maybe b]
                                [
                                  [
                                    [
                                      {
                                        [ { Maybe_match a } ds ]
                                        (fun Unit [Maybe c])
                                      }
                                      (lam
                                        x
                                        a
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              [
                                                {
                                                  [ { Maybe_match b } ds ]
                                                  (fun Unit [Maybe c])
                                                }
                                                (lam
                                                  y
                                                  b
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [ { Just c } [ [ f x ] y ] ]
                                                  )
                                                )
                                              ]
                                              (lam thunk Unit { Nothing c })
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    ]
                                    (lam thunk Unit { Nothing c })
                                  ]
                                  Unit
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fFunctorMaybe_c
                      (all a (type) (all b (type) (fun a (fun [Maybe b] [Maybe a]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          x
                          a
                          (lam
                            ds
                            [Maybe b]
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match b } ds ]
                                    (fun Unit [Maybe a])
                                  }
                                  (lam a b (lam thunk Unit [ { Just a } x ]))
                                ]
                                (lam thunk Unit { Nothing a })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Functor (fun (fun (type) (type)) (type)))
                      (tyvardecl f (fun (type) (type)))
                      Functor_match
                      (vardecl
                        CConsFunctor
                        (fun (all a (type) (all b (type) (fun (fun a b) (fun [f a] [f b])))) (fun (all a (type) (all b (type) (fun a (fun [f b] [f a])))) [Functor f]))
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fFunctorMaybe [Functor Maybe])
                    [
                      [ { CConsFunctor Maybe } fApplicativeMaybe_cfmap ]
                      fFunctorMaybe_c
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fApplicativeMaybe_c
                      (all a (type) (all b (type) (fun [Maybe a] (fun [Maybe b] [Maybe b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          [Maybe a]
                          (lam
                            m
                            [Maybe b]
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match a } ds ]
                                    (fun Unit [Maybe b])
                                  }
                                  (lam m a (lam thunk Unit m))
                                ]
                                (lam thunk Unit { Nothing b })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Applicative (fun (fun (type) (type)) (type)))
                      (tyvardecl f (fun (type) (type)))
                      Applicative_match
                      (vardecl
                        CConsApplicative
                        (fun [Functor f] (fun (all a (type) (fun a [f a])) (fun (all a (type) (all b (type) (fun [f (fun a b)] (fun [f a] [f b])))) (fun (all a (type) (all b (type) (all c (type) (fun (fun a (fun b c)) (fun [f a] (fun [f b] [f c])))))) (fun (all a (type) (all b (type) (fun [f a] (fun [f b] [f b])))) (fun (all a (type) (all b (type) (fun [f a] (fun [f b] [f a])))) [Applicative f]))))))
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fApplicativeMaybe [Applicative Maybe])
                    [
                      [
                        [
                          [
                            [
                              [ { CConsApplicative Maybe } fFunctorMaybe ] Just
                            ]
                            fApplicativeMaybe_c
                          ]
                          fApplicativeMaybe_cliftA
                        ]
                        fApplicativeMaybe_c
                      ]
                      fApplicativeMaybe_c
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonadMaybe_c
                      (all a (type) (all b (type) (fun [Maybe a] (fun (fun a [Maybe b]) [Maybe b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          [Maybe a]
                          (lam
                            k
                            (fun a [Maybe b])
                            [
                              [
                                [
                                  {
                                    [ { Maybe_match a } ds ]
                                    (fun Unit [Maybe b])
                                  }
                                  (lam x a (lam thunk Unit [ k x ]))
                                ]
                                (lam thunk Unit { Nothing b })
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Monad (fun (fun (type) (type)) (type)))
                      (tyvardecl m (fun (type) (type)))
                      Monad_match
                      (vardecl
                        CConsMonad
                        (fun [Applicative m] (fun (all a (type) (all b (type) (fun [m a] (fun (fun a [m b]) [m b])))) (fun (all a (type) (all b (type) (fun [m a] (fun [m b] [m b])))) (fun (all a (type) (fun a [m a])) [Monad m]))))
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fMonadMaybe [Monad Maybe])
                    [
                      [
                        [
                          [ { CConsMonad Maybe } fApplicativeMaybe ]
                          fMonadMaybe_c
                        ]
                        fApplicativeMaybe_c
                      ]
                      Just
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataCredential_ctoBuiltinData
                      (fun Credential (con data))
                    )
                    (lam
                      ds
                      Credential
                      [
                        [
                          { [ Credential_match ds ] (con data) }
                          (lam
                            arg
                            (con bytestring)
                            [
                              [ (builtin constrData) (con integer 0) ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [ (builtin bData) arg ]
                                ]
                                [ (builtin mkNilData) (con unit ()) ]
                              ]
                            ]
                          )
                        ]
                        (lam
                          arg
                          (con bytestring)
                          [
                            [ (builtin constrData) (con integer 1) ]
                            [
                              [
                                { (builtin mkCons) (con data) }
                                [ (builtin bData) arg ]
                              ]
                              [ (builtin mkNilData) (con unit ()) ]
                            ]
                          ]
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataStakingCredential_ctoBuiltinData
                      (fun StakingCredential (con data))
                    )
                    (lam
                      ds
                      StakingCredential
                      [
                        [
                          { [ StakingCredential_match ds ] (con data) }
                          (lam
                            arg
                            Credential
                            [
                              [ (builtin constrData) (con integer 0) ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [ fToDataCredential_ctoBuiltinData arg ]
                                ]
                                [ (builtin mkNilData) (con unit ()) ]
                              ]
                            ]
                          )
                        ]
                        (lam
                          arg
                          (con integer)
                          (lam
                            arg
                            (con integer)
                            (lam
                              arg
                              (con integer)
                              [
                                [ (builtin constrData) (con integer 1) ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ (builtin iData) arg ]
                                  ]
                                  [
                                    [
                                      { (builtin mkCons) (con data) }
                                      [ (builtin iData) arg ]
                                    ]
                                    [
                                      [
                                        { (builtin mkCons) (con data) }
                                        [ (builtin iData) arg ]
                                      ]
                                      [ (builtin mkNilData) (con unit ()) ]
                                    ]
                                  ]
                                ]
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataMaybe_ctoBuiltinData
                      (all a (type) (fun [(lam a (type) (fun a (con data))) a] (fun [Maybe a] (con data))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dToData
                        [(lam a (type) (fun a (con data))) a]
                        (lam
                          ds
                          [Maybe a]
                          [
                            [
                              [
                                {
                                  [ { Maybe_match a } ds ] (fun Unit (con data))
                                }
                                (lam
                                  arg
                                  a
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [ (builtin constrData) (con integer 0) ]
                                      [
                                        [
                                          { (builtin mkCons) (con data) }
                                          [ dToData arg ]
                                        ]
                                        [ (builtin mkNilData) (con unit ()) ]
                                      ]
                                    ]
                                  )
                                )
                              ]
                              (lam
                                thunk
                                Unit
                                [
                                  [ (builtin constrData) (con integer 1) ]
                                  [ (builtin mkNilData) (con unit ()) ]
                                ]
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataAddress_ctoBuiltinData (fun Address (con data))
                    )
                    (lam
                      ds
                      Address
                      [
                        { [ Address_match ds ] (con data) }
                        (lam
                          arg
                          Credential
                          (lam
                            arg
                            [Maybe StakingCredential]
                            [
                              [ (builtin constrData) (con integer 0) ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [ fToDataCredential_ctoBuiltinData arg ]
                                ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [
                                      [
                                        {
                                          fToDataMaybe_ctoBuiltinData
                                          StakingCredential
                                        }
                                        fToDataStakingCredential_ctoBuiltinData
                                      ]
                                      arg
                                    ]
                                  ]
                                  [ (builtin mkNilData) (con unit ()) ]
                                ]
                              ]
                            ]
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataByteString_ctoBuiltinData
                      (fun (con bytestring) (con data))
                    )
                    (lam b (con bytestring) [ (builtin bData) b ])
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataInteger_ctoBuiltinData
                      (fun (con integer) (con data))
                    )
                    (lam i (con integer) [ (builtin iData) i ])
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataTuple2_ctoBuiltinData
                      (all a (type) (all b (type) (fun [(lam a (type) (fun a (con data))) a] (fun [(lam a (type) (fun a (con data))) b] (fun [[Tuple2 a] b] (con data))))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) a]
                          (lam
                            dToData
                            [(lam a (type) (fun a (con data))) b]
                            (lam
                              ds
                              [[Tuple2 a] b]
                              [
                                { [ { { Tuple2_match a } b } ds ] (con data) }
                                (lam
                                  arg
                                  a
                                  (lam
                                    arg
                                    b
                                    [
                                      [ (builtin constrData) (con integer 0) ]
                                      [
                                        [
                                          { (builtin mkCons) (con data) }
                                          [ dToData arg ]
                                        ]
                                        [
                                          [
                                            { (builtin mkCons) (con data) }
                                            [ dToData arg ]
                                          ]
                                          [ (builtin mkNilData) (con unit ()) ]
                                        ]
                                      ]
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fToDataMap [(con list) (con data)])
                    [ (builtin mkNilData) (con unit ()) ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fToDataMap_ctoBuiltinData
                      (all k (type) (all v (type) (fun [(lam a (type) (fun a (con data))) k] (fun [(lam a (type) (fun a (con data))) v] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v] (con data))))))
                    )
                    (abs
                      k
                      (type)
                      (abs
                        v
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) k]
                          (lam
                            dToData
                            [(lam a (type) (fun a (con data))) v]
                            (lam
                              eta
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v]
                              (let
                                (rec)
                                (termbind
                                  (strict)
                                  (vardecl
                                    go
                                    (fun [List [[Tuple2 k] v]] [(con list) (con data)])
                                  )
                                  (lam
                                    ds
                                    [List [[Tuple2 k] v]]
                                    [
                                      [
                                        [
                                          {
                                            [ { Nil_match [[Tuple2 k] v] } ds ]
                                            (fun Unit [(con list) (con data)])
                                          }
                                          (lam thunk Unit fToDataMap)
                                        ]
                                        (lam
                                          x
                                          [[Tuple2 k] v]
                                          (lam
                                            xs
                                            [List [[Tuple2 k] v]]
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  {
                                                    (builtin mkCons) (con data)
                                                  }
                                                  [
                                                    [
                                                      [
                                                        {
                                                          {
                                                            fToDataTuple2_ctoBuiltinData
                                                            k
                                                          }
                                                          v
                                                        }
                                                        dToData
                                                      ]
                                                      dToData
                                                    ]
                                                    x
                                                  ]
                                                ]
                                                [ go xs ]
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                )
                                [ (builtin listData) [ go eta ] ]
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fToDataValue
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)] (con data))
                    )
                    [
                      [
                        {
                          { fToDataMap_ctoBuiltinData (con bytestring) }
                          (con integer)
                        }
                        fToDataByteString_ctoBuiltinData
                      ]
                      fToDataInteger_ctoBuiltinData
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl fToDataTxOut_ctoBuiltinData (fun TxOut (con data)))
                    (lam
                      ds
                      TxOut
                      [
                        { [ TxOut_match ds ] (con data) }
                        (lam
                          arg
                          Address
                          (lam
                            arg
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (lam
                              arg
                              [Maybe (con bytestring)]
                              [
                                [ (builtin constrData) (con integer 0) ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ fToDataAddress_ctoBuiltinData arg ]
                                  ]
                                  [
                                    [
                                      { (builtin mkCons) (con data) }
                                      [
                                        [
                                          [
                                            {
                                              {
                                                fToDataMap_ctoBuiltinData
                                                (con bytestring)
                                              }
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                            }
                                            fToDataByteString_ctoBuiltinData
                                          ]
                                          fToDataValue
                                        ]
                                        arg
                                      ]
                                    ]
                                    [
                                      [
                                        { (builtin mkCons) (con data) }
                                        [
                                          [
                                            {
                                              fToDataMaybe_ctoBuiltinData
                                              (con bytestring)
                                            }
                                            fToDataByteString_ctoBuiltinData
                                          ]
                                          arg
                                        ]
                                      ]
                                      [ (builtin mkNilData) (con unit ()) ]
                                    ]
                                  ]
                                ]
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl dToData (fun [List TxOut] (con data)))
                    (lam
                      l
                      [List TxOut]
                      (let
                        (rec)
                        (termbind
                          (strict)
                          (vardecl go (fun [List TxOut] [(con list) (con data)])
                          )
                          (lam
                            ds
                            [List TxOut]
                            [
                              [
                                [
                                  {
                                    [ { Nil_match TxOut } ds ]
                                    (fun Unit [(con list) (con data)])
                                  }
                                  (lam
                                    thunk
                                    Unit
                                    [ (builtin mkNilData) (con unit ()) ]
                                  )
                                ]
                                (lam
                                  x
                                  TxOut
                                  (lam
                                    xs
                                    [List TxOut]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          { (builtin mkCons) (con data) }
                                          [ fToDataTxOut_ctoBuiltinData x ]
                                        ]
                                        [ go xs ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                        [ (builtin listData) [ go l ] ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl State (type))

                      State_match
                      (vardecl Final State)
                      (vardecl Initial State)
                      (vardecl Open (fun [List TxOut] State))
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl ctoBuiltinData (fun State (con data)))
                    (lam
                      ds
                      State
                      [
                        [
                          [
                            [
                              { [ State_match ds ] (fun Unit (con data)) }
                              (lam
                                thunk
                                Unit
                                [
                                  [ (builtin constrData) (con integer 2) ]
                                  [ (builtin mkNilData) (con unit ()) ]
                                ]
                              )
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                [ (builtin constrData) (con integer 0) ]
                                [ (builtin mkNilData) (con unit ()) ]
                              ]
                            )
                          ]
                          (lam
                            arg
                            [List TxOut]
                            (lam
                              thunk
                              Unit
                              [
                                [ (builtin constrData) (con integer 1) ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ dToData arg ]
                                  ]
                                  [ (builtin mkNilData) (con unit ()) ]
                                ]
                              ]
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl bad_name (fun Bool (fun Bool Bool)))
                    (lam
                      l
                      Bool
                      (lam
                        r
                        Bool
                        [
                          [
                            [
                              { [ Bool_match l ] (fun Unit Bool) }
                              (lam thunk Unit r)
                            ]
                            (lam thunk Unit False)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      bad_name
                      (all m (fun (type) (type)) (fun [Monad m] (all a (type) (all b (type) (fun [m a] (fun (fun a [m b]) [m b]))))))
                    )
                    (abs
                      m
                      (fun (type) (type))
                      (lam
                        v
                        [Monad m]
                        [
                          {
                            [ { Monad_match m } v ]
                            (all a (type) (all b (type) (fun [m a] (fun (fun a [m b]) [m b]))))
                          }
                          (lam
                            v
                            [Applicative m]
                            (lam
                              v
                              (all a (type) (all b (type) (fun [m a] (fun (fun a [m b]) [m b]))))
                              (lam
                                v
                                (all a (type) (all b (type) (fun [m a] (fun [m b] [m b]))))
                                (lam v (all a (type) (fun a [m a])) v)
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      bad_name
                      (all m (fun (type) (type)) (all a (type) (all b (type) (all c (type) (fun [Monad m] (fun (fun a [m b]) (fun (fun b [m c]) (fun a [m c]))))))))
                    )
                    (abs
                      m
                      (fun (type) (type))
                      (abs
                        a
                        (type)
                        (abs
                          b
                          (type)
                          (abs
                            c
                            (type)
                            (lam
                              dMonad
                              [Monad m]
                              (lam
                                f
                                (fun a [m b])
                                (lam
                                  g
                                  (fun b [m c])
                                  (lam
                                    x
                                    a
                                    [
                                      [
                                        { { [ { bad_name m } dMonad ] b } c }
                                        [ f x ]
                                      ]
                                      g
                                    ]
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl HeadParameters (type))

                      HeadParameters_match
                      (vardecl
                        HeadParameters
                        (fun [List (con bytestring)] (fun (con bytestring) HeadParameters))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Transition (type))

                      Transition_match
                      (vardecl Abort Transition) (vardecl CollectCom Transition)
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl MultiplicativeMonoid (fun (type) (type)))
                      (tyvardecl a (type))
                      MultiplicativeMonoid_match
                      (vardecl
                        CConsMultiplicativeMonoid
                        (fun [(lam a (type) (fun a (fun a a))) a] (fun a [MultiplicativeMonoid a]))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      p1MultiplicativeMonoid
                      (all a (type) (fun [MultiplicativeMonoid a] [(lam a (type) (fun a (fun a a))) a]))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        v
                        [MultiplicativeMonoid a]
                        [
                          {
                            [ { MultiplicativeMonoid_match a } v ]
                            [(lam a (type) (fun a (fun a a))) a]
                          }
                          (lam
                            v [(lam a (type) (fun a (fun a a))) a] (lam v a v)
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl one (all a (type) (fun [MultiplicativeMonoid a] a))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        v
                        [MultiplicativeMonoid a]
                        [
                          { [ { MultiplicativeMonoid_match a } v ] a }
                          (lam
                            v [(lam a (type) (fun a (fun a a))) a] (lam v a v)
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidProduct
                      (all a (type) (fun [MultiplicativeMonoid a] [Monoid [(lam a (type) a) a]]))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        v
                        [MultiplicativeMonoid a]
                        [
                          [
                            { CConsMonoid [(lam a (type) a) a] }
                            (lam
                              eta
                              [(lam a (type) a) a]
                              (lam
                                eta
                                [(lam a (type) a) a]
                                [
                                  [ [ { p1MultiplicativeMonoid a } v ] eta ] eta
                                ]
                              )
                            )
                          ]
                          [ { one a } v ]
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl bad_name (fun Bool (fun Bool Bool)))
                    (lam
                      ds
                      Bool
                      (lam
                        x
                        Bool
                        [
                          [
                            [
                              { [ Bool_match ds ] (fun Unit Bool) }
                              (lam thunk Unit x)
                            ]
                            (lam thunk Unit False)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fMultiplicativeMonoidBool [MultiplicativeMonoid Bool]
                    )
                    [ [ { CConsMultiplicativeMonoid Bool } bad_name ] True ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      all
                      (all t (fun (type) (type)) (all a (type) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun (fun a Bool) (fun [t a] Bool)))))
                    )
                    (abs
                      t
                      (fun (type) (type))
                      (abs
                        a
                        (type)
                        (lam
                          dFoldable
                          [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
                          (let
                            (nonrec)
                            (termbind
                              (nonstrict)
                              (vardecl dMonoid [Monoid [(lam a (type) a) Bool]])
                              [
                                { fMonoidProduct Bool }
                                fMultiplicativeMonoidBool
                              ]
                            )
                            (lam
                              p
                              (fun a Bool)
                              [
                                [
                                  { { dFoldable [(lam a (type) a) Bool] } a }
                                  dMonoid
                                ]
                                p
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      and
                      (all t (fun (type) (type)) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun [t Bool] Bool)))
                    )
                    (abs
                      t
                      (fun (type) (type))
                      (lam
                        dFoldable
                        [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
                        [
                          [
                            { { dFoldable [(lam a (type) a) Bool] } Bool }
                            [
                              { fMonoidProduct Bool } fMultiplicativeMonoidBool
                            ]
                          ]
                          (lam v Bool v)
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      foldMap
                      (all t (fun (type) (type)) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))))
                    )
                    (abs
                      t
                      (fun (type) (type))
                      (lam
                        v
                        [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
                        v
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fromBuiltinData
                      (all a (type) (fun [(lam a (type) (fun (con data) [Maybe a])) a] (fun (con data) [Maybe a])))
                    )
                    (abs
                      a
                      (type)
                      (lam v [(lam a (type) (fun (con data) [Maybe a])) a] v)
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl getDatum (fun (con data) (con data)))
                    (lam ds (con data) ds)
                  )
                  (termbind
                    (strict)
                    (vardecl
                      lovelaceValueOf
                      (fun (con integer) [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                    )
                    (lam
                      i
                      (con integer)
                      [
                        [
                          {
                            Cons
                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          }
                          [
                            [
                              {
                                { Tuple2 (con bytestring) }
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                              }
                              (con bytestring #)
                            ]
                            [
                              [
                                {
                                  Cons [[Tuple2 (con bytestring)] (con integer)]
                                }
                                [
                                  [
                                    {
                                      { Tuple2 (con bytestring) } (con integer)
                                    }
                                    (con bytestring #)
                                  ]
                                  i
                                ]
                              ]
                              { Nil [[Tuple2 (con bytestring)] (con integer)] }
                            ]
                          ]
                        ]
                        {
                          Nil
                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mapMaybe
                      (all a (type) (all b (type) (fun (fun a [Maybe b]) (fun [List a] [List b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          p
                          (fun a [Maybe b])
                          [
                            [
                              { { foldr a } [List b] }
                              (lam
                                e
                                a
                                (lam
                                  xs
                                  [List b]
                                  [
                                    [
                                      [
                                        {
                                          [ { Maybe_match b } [ p e ] ]
                                          (fun Unit [List b])
                                        }
                                        (lam
                                          e
                                          b
                                          (lam
                                            thunk Unit [ [ { Cons b } e ] xs ]
                                          )
                                        )
                                      ]
                                      (lam thunk Unit xs)
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            ]
                            { Nil b }
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fToDataUnit_ctoBuiltinData (fun Unit (con data)))
                    (lam
                      ds
                      Unit
                      [
                        { [ Unit_match ds ] (con data) }
                        [
                          [ (builtin constrData) (con integer 0) ]
                          [ (builtin mkNilData) (con unit ()) ]
                        ]
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fEqTxOutRef_c (fun TxOutRef (fun TxOutRef Bool)))
                    (lam
                      l
                      TxOutRef
                      (lam
                        r
                        TxOutRef
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [
                                            (builtin equalsByteString)
                                            [
                                              {
                                                [ TxOutRef_match l ]
                                                (con bytestring)
                                              }
                                              (lam
                                                ds
                                                (con bytestring)
                                                (lam ds (con integer) ds)
                                              )
                                            ]
                                          ]
                                          [
                                            {
                                              [ TxOutRef_match r ]
                                              (con bytestring)
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam ds (con integer) ds)
                                            )
                                          ]
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit Bool)
                              }
                              (lam
                                thunk
                                Unit
                                [
                                  [
                                    [
                                      { (builtin ifThenElse) Bool }
                                      [
                                        [
                                          (builtin equalsInteger)
                                          [
                                            {
                                              [ TxOutRef_match l ] (con integer)
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam ds (con integer) ds)
                                            )
                                          ]
                                        ]
                                        [
                                          { [ TxOutRef_match r ] (con integer) }
                                          (lam
                                            ds
                                            (con bytestring)
                                            (lam ds (con integer) ds)
                                          )
                                        ]
                                      ]
                                    ]
                                    True
                                  ]
                                  False
                                ]
                              )
                            ]
                            (lam thunk Unit False)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl InputConstraint (fun (type) (type)))
                      (tyvardecl a (type))
                      InputConstraint_match
                      (vardecl
                        InputConstraint
                        (fun a (fun TxOutRef [InputConstraint a]))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkOwnInputConstraint
                      (all a (type) (fun ScriptContext (fun [InputConstraint a] Bool)))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        ds
                        ScriptContext
                        (lam
                          ds
                          [InputConstraint a]
                          [
                            { [ ScriptContext_match ds ] Bool }
                            (lam
                              ds
                              TxInfo
                              (lam
                                ds
                                ScriptPurpose
                                [
                                  { [ { InputConstraint_match a } ds ] Bool }
                                  (lam
                                    ds
                                    a
                                    (lam
                                      ds
                                      TxOutRef
                                      [
                                        { [ TxInfo_match ds ] Bool }
                                        (lam
                                          ds
                                          [List TxInInfo]
                                          (lam
                                            ds
                                            [List TxOut]
                                            (lam
                                              ds
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              (lam
                                                ds
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                (lam
                                                  ds
                                                  [List DCert]
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                    (lam
                                                      ds
                                                      [Interval (con integer)]
                                                      (lam
                                                        ds
                                                        [List (con bytestring)]
                                                        (lam
                                                          ds
                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                          (lam
                                                            ds
                                                            (con bytestring)
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      Bool_match
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              {
                                                                                fFoldableNil_cfoldMap
                                                                                [(lam a (type) a) Bool]
                                                                              }
                                                                              TxInInfo
                                                                            }
                                                                            [
                                                                              {
                                                                                fMonoidSum
                                                                                Bool
                                                                              }
                                                                              fAdditiveMonoidBool
                                                                            ]
                                                                          ]
                                                                          (lam
                                                                            ds
                                                                            TxInInfo
                                                                            [
                                                                              {
                                                                                [
                                                                                  TxInInfo_match
                                                                                  ds
                                                                                ]
                                                                                Bool
                                                                              }
                                                                              (lam
                                                                                ds
                                                                                TxOutRef
                                                                                (lam
                                                                                  ds
                                                                                  TxOut
                                                                                  [
                                                                                    [
                                                                                      fEqTxOutRef_c
                                                                                      ds
                                                                                    ]
                                                                                    ds
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        ds
                                                                      ]
                                                                    ]
                                                                    (fun Unit Bool)
                                                                  }
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    True
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      {
                                                                        (builtin
                                                                          chooseUnit
                                                                        )
                                                                        Bool
                                                                      }
                                                                      [
                                                                        (builtin
                                                                          trace
                                                                        )
                                                                        (con
                                                                          string
                                                                            "Input constraint"
                                                                        )
                                                                      ]
                                                                    ]
                                                                    False
                                                                  ]
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fSemigroupFirst_c
                      (all a (type) (fun [(lam a (type) [Maybe a]) a] (fun [(lam a (type) [Maybe a]) a] [(lam a (type) [Maybe a]) a])))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        ds
                        [(lam a (type) [Maybe a]) a]
                        (lam
                          b
                          [(lam a (type) [Maybe a]) a]
                          [
                            [
                              [
                                {
                                  [ { Maybe_match a } ds ]
                                  (fun Unit [(lam a (type) [Maybe a]) a])
                                }
                                (lam ipv a (lam thunk Unit ds))
                              ]
                              (lam thunk Unit b)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidFirst
                      (all a (type) [Monoid [(lam a (type) [Maybe a]) a]])
                    )
                    (abs
                      a
                      (type)
                      [
                        [
                          { CConsMonoid [(lam a (type) [Maybe a]) a] }
                          { fSemigroupFirst_c a }
                        ]
                        { Nothing a }
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findDatumHash
                      (fun (con data) (fun TxInfo [Maybe (con bytestring)]))
                    )
                    (lam
                      ds
                      (con data)
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe (con bytestring)] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          [[Tuple2 (con bytestring)] (con data)]
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        (con bytestring)
                                                                      }
                                                                      (con data)
                                                                    }
                                                                    x
                                                                  ]
                                                                  [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                (lam
                                                                  ds
                                                                  (con bytestring)
                                                                  (lam
                                                                    ds
                                                                    (con data)
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        ifThenElse
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        (builtin
                                                                                          equalsData
                                                                                        )
                                                                                        ds
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                  True
                                                                                ]
                                                                                False
                                                                              ]
                                                                            ]
                                                                            (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                Just
                                                                                [[Tuple2 (con bytestring)] (con data)]
                                                                              }
                                                                              x
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nothing
                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                          }
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe (con bytestring)])
                                                    }
                                                    (lam
                                                      a
                                                      [[Tuple2 (con bytestring)] (con data)]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          {
                                                            Just
                                                            (con bytestring)
                                                          }
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  {
                                                                    Tuple2_match
                                                                    (con bytestring)
                                                                  }
                                                                  (con data)
                                                                }
                                                                a
                                                              ]
                                                              (con bytestring)
                                                            }
                                                            (lam
                                                              a
                                                              (con bytestring)
                                                              (lam
                                                                ds (con data) a
                                                              )
                                                            )
                                                          ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing (con bytestring) }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl error (all a (type) (fun (con unit) a)))
                    (abs a (type) (lam thunk (con unit) (error a)))
                  )
                  (termbind
                    (strict)
                    (vardecl findOwnInput (fun ScriptContext [Maybe TxInInfo]))
                    (lam
                      ds
                      ScriptContext
                      [
                        { [ ScriptContext_match ds ] [Maybe TxInInfo] }
                        (lam
                          ds
                          TxInfo
                          (lam
                            ds
                            ScriptPurpose
                            [
                              { [ TxInfo_match ds ] [Maybe TxInInfo] }
                              (lam
                                ds
                                [List TxInInfo]
                                (lam
                                  ds
                                  [List TxOut]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                      (lam
                                        ds
                                        [List DCert]
                                        (lam
                                          ds
                                          [List [[Tuple2 StakingCredential] (con integer)]]
                                          (lam
                                            ds
                                            [Interval (con integer)]
                                            (lam
                                              ds
                                              [List (con bytestring)]
                                              (lam
                                                ds
                                                [List [[Tuple2 (con bytestring)] (con data)]]
                                                (lam
                                                  ds
                                                  (con bytestring)
                                                  [
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                ScriptPurpose_match
                                                                ds
                                                              ]
                                                              (fun Unit [Maybe TxInInfo])
                                                            }
                                                            (lam
                                                              default_arg0
                                                              DCert
                                                              (lam
                                                                thunk
                                                                Unit
                                                                {
                                                                  Nothing
                                                                  TxInInfo
                                                                }
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            default_arg0
                                                            (con bytestring)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              {
                                                                Nothing TxInInfo
                                                              }
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          default_arg0
                                                          StakingCredential
                                                          (lam
                                                            thunk
                                                            Unit
                                                            { Nothing TxInInfo }
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        txOutRef
                                                        TxOutRef
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) [Maybe a]) TxInInfo]
                                                                  }
                                                                  TxInInfo
                                                                }
                                                                {
                                                                  fMonoidFirst
                                                                  TxInInfo
                                                                }
                                                              ]
                                                              (lam
                                                                x
                                                                TxInInfo
                                                                [
                                                                  {
                                                                    [
                                                                      TxInInfo_match
                                                                      x
                                                                    ]
                                                                    [Maybe TxInInfo]
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    TxOutRef
                                                                    (lam
                                                                      ds
                                                                      TxOut
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                [
                                                                                  [
                                                                                    fEqTxOutRef_c
                                                                                    ds
                                                                                  ]
                                                                                  txOutRef
                                                                                ]
                                                                              ]
                                                                              (fun Unit [Maybe TxInInfo])
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                {
                                                                                  Just
                                                                                  TxInInfo
                                                                                }
                                                                                x
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            {
                                                                              Nothing
                                                                              TxInInfo
                                                                            }
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            ds
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fEqCredential_c (fun Credential (fun Credential Bool))
                    )
                    (lam
                      ds
                      Credential
                      (lam
                        ds
                        Credential
                        [
                          [
                            { [ Credential_match ds ] Bool }
                            (lam
                              l
                              (con bytestring)
                              [
                                [
                                  { [ Credential_match ds ] Bool }
                                  (lam
                                    r
                                    (con bytestring)
                                    [ [ equalsByteString l ] r ]
                                  )
                                ]
                                (lam ipv (con bytestring) False)
                              ]
                            )
                          ]
                          (lam
                            a
                            (con bytestring)
                            [
                              [
                                { [ Credential_match ds ] Bool }
                                (lam ipv (con bytestring) False)
                              ]
                              (lam
                                a (con bytestring) [ [ equalsByteString a ] a ]
                              )
                            ]
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      equalsInteger (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin equalsInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fEqStakingCredential_c
                      (fun StakingCredential (fun StakingCredential Bool))
                    )
                    (lam
                      ds
                      StakingCredential
                      (lam
                        ds
                        StakingCredential
                        [
                          [
                            { [ StakingCredential_match ds ] Bool }
                            (lam
                              l
                              Credential
                              [
                                [
                                  { [ StakingCredential_match ds ] Bool }
                                  (lam r Credential [ [ fEqCredential_c l ] r ])
                                ]
                                (lam
                                  ipv
                                  (con integer)
                                  (lam
                                    ipv
                                    (con integer)
                                    (lam ipv (con integer) False)
                                  )
                                )
                              ]
                            )
                          ]
                          (lam
                            a
                            (con integer)
                            (lam
                              b
                              (con integer)
                              (lam
                                c
                                (con integer)
                                [
                                  [
                                    { [ StakingCredential_match ds ] Bool }
                                    (lam ipv Credential False)
                                  ]
                                  (lam
                                    a
                                    (con integer)
                                    (lam
                                      b
                                      (con integer)
                                      (lam
                                        c
                                        (con integer)
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          Bool
                                                        }
                                                        [
                                                          [
                                                            (builtin
                                                              equalsInteger
                                                            )
                                                            a
                                                          ]
                                                          a
                                                        ]
                                                      ]
                                                      True
                                                    ]
                                                    False
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  [
                                                                    (builtin
                                                                      equalsInteger
                                                                    )
                                                                    b
                                                                  ]
                                                                  b
                                                                ]
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [ equalsInteger c ] c
                                                        ]
                                                      )
                                                    ]
                                                    (lam thunk Unit False)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            ]
                                            (lam thunk Unit False)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fEqAddress_c (fun Address (fun Address Bool)))
                    (lam
                      ds
                      Address
                      (lam
                        ds
                        Address
                        [
                          { [ Address_match ds ] Bool }
                          (lam
                            cred
                            Credential
                            (lam
                              stakingCred
                              [Maybe StakingCredential]
                              [
                                { [ Address_match ds ] Bool }
                                (lam
                                  cred
                                  Credential
                                  (lam
                                    stakingCred
                                    [Maybe StakingCredential]
                                    (let
                                      (nonrec)
                                      (termbind
                                        (nonstrict)
                                        (vardecl j Bool)
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  {
                                                    Maybe_match
                                                    StakingCredential
                                                  }
                                                  stakingCred
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                a
                                                StakingCredential
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            {
                                                              Maybe_match
                                                              StakingCredential
                                                            }
                                                            stakingCred
                                                          ]
                                                          (fun Unit Bool)
                                                        }
                                                        (lam
                                                          a
                                                          StakingCredential
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                fEqStakingCredential_c
                                                                a
                                                              ]
                                                              a
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam thunk Unit False)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            ]
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          StakingCredential
                                                        }
                                                        stakingCred
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam
                                                      ipv
                                                      StakingCredential
                                                      (lam thunk Unit False)
                                                    )
                                                  ]
                                                  (lam thunk Unit True)
                                                ]
                                                Unit
                                              ]
                                            )
                                          ]
                                          Unit
                                        ]
                                      )
                                      [
                                        [
                                          { [ Credential_match cred ] Bool }
                                          (lam
                                            l
                                            (con bytestring)
                                            [
                                              [
                                                {
                                                  [ Credential_match cred ] Bool
                                                }
                                                (lam
                                                  r
                                                  (con bytestring)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            Bool_match
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    (builtin
                                                                      ifThenElse
                                                                    )
                                                                    Bool
                                                                  }
                                                                  [
                                                                    [
                                                                      (builtin
                                                                        equalsByteString
                                                                      )
                                                                      l
                                                                    ]
                                                                    r
                                                                  ]
                                                                ]
                                                                True
                                                              ]
                                                              False
                                                            ]
                                                          ]
                                                          (fun Unit Bool)
                                                        }
                                                        (lam thunk Unit j)
                                                      ]
                                                      (lam thunk Unit False)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              (lam ipv (con bytestring) False)
                                            ]
                                          )
                                        ]
                                        (lam
                                          a
                                          (con bytestring)
                                          [
                                            [
                                              { [ Credential_match cred ] Bool }
                                              (lam ipv (con bytestring) False)
                                            ]
                                            (lam
                                              a
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                [
                                                                  (builtin
                                                                    equalsByteString
                                                                  )
                                                                  a
                                                                ]
                                                                a
                                                              ]
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam thunk Unit j)
                                                  ]
                                                  (lam thunk Unit False)
                                                ]
                                                Unit
                                              ]
                                            )
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      getContinuingOutputs (fun ScriptContext [List TxOut])
                    )
                    (lam
                      ctx
                      ScriptContext
                      [
                        [
                          [
                            {
                              [ { Maybe_match TxInInfo } [ findOwnInput ctx ] ]
                              (fun Unit [List TxOut])
                            }
                            (lam
                              ds
                              TxInInfo
                              (lam
                                thunk
                                Unit
                                [
                                  { [ TxInInfo_match ds ] [List TxOut] }
                                  (lam
                                    ds
                                    TxOutRef
                                    (lam
                                      ds
                                      TxOut
                                      [
                                        { [ TxOut_match ds ] [List TxOut] }
                                        (lam
                                          ds
                                          Address
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam
                                              ds
                                              [Maybe (con bytestring)]
                                              [
                                                {
                                                  [ ScriptContext_match ctx ]
                                                  [List TxOut]
                                                }
                                                (lam
                                                  ds
                                                  TxInfo
                                                  (lam
                                                    ds
                                                    ScriptPurpose
                                                    [
                                                      {
                                                        [ TxInfo_match ds ]
                                                        [List TxOut]
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    foldr
                                                                                    TxOut
                                                                                  }
                                                                                  [List TxOut]
                                                                                }
                                                                                (lam
                                                                                  e
                                                                                  TxOut
                                                                                  (lam
                                                                                    xs
                                                                                    [List TxOut]
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          TxOut_match
                                                                                          e
                                                                                        ]
                                                                                        [List TxOut]
                                                                                      }
                                                                                      (lam
                                                                                        ds
                                                                                        Address
                                                                                        (lam
                                                                                          ds
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          (lam
                                                                                            ds
                                                                                            [Maybe (con bytestring)]
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    [
                                                                                                      Bool_match
                                                                                                      [
                                                                                                        [
                                                                                                          fEqAddress_c
                                                                                                          ds
                                                                                                        ]
                                                                                                        ds
                                                                                                      ]
                                                                                                    ]
                                                                                                    (fun Unit [List TxOut])
                                                                                                  }
                                                                                                  (lam
                                                                                                    thunk
                                                                                                    Unit
                                                                                                    [
                                                                                                      [
                                                                                                        {
                                                                                                          Cons
                                                                                                          TxOut
                                                                                                        }
                                                                                                        e
                                                                                                      ]
                                                                                                      xs
                                                                                                    ]
                                                                                                  )
                                                                                                ]
                                                                                                (lam
                                                                                                  thunk
                                                                                                  Unit
                                                                                                  xs
                                                                                                )
                                                                                              ]
                                                                                              Unit
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              {
                                                                                Nil
                                                                                TxOut
                                                                              }
                                                                            ]
                                                                            ds
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                          ]
                          (lam
                            thunk
                            Unit
                            [
                              { error [List TxOut] }
                              [
                                {
                                  [
                                    Unit_match
                                    [
                                      [
                                        { (builtin chooseUnit) Unit }
                                        [
                                          (builtin trace)
                                          (con
                                            string
                                              "Can't get any continuing outputs"
                                          )
                                        ]
                                      ]
                                      Unit
                                    ]
                                  ]
                                  (con unit)
                                }
                                (con unit ())
                              ]
                            ]
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      union
                      (all k (type) (all v (type) (all r (type) (fun [(lam a (type) (fun a (fun a Bool))) k] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] [[These v] r]]))))))
                    )
                    (abs
                      k
                      (type)
                      (abs
                        v
                        (type)
                        (abs
                          r
                          (type)
                          (lam
                            dEq
                            [(lam a (type) (fun a (fun a Bool))) k]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r]
                                [
                                  [
                                    [
                                      {
                                        { foldr [[Tuple2 k] [[These v] r]] }
                                        [List [[Tuple2 k] [[These v] r]]]
                                      }
                                      { Cons [[Tuple2 k] [[These v] r]] }
                                    ]
                                    [
                                      [
                                        {
                                          { fFunctorNil_cfmap [[Tuple2 k] r] }
                                          [[Tuple2 k] [[These v] r]]
                                        }
                                        (lam
                                          ds
                                          [[Tuple2 k] r]
                                          [
                                            {
                                              [ { { Tuple2_match k } r } ds ]
                                              [[Tuple2 k] [[These v] r]]
                                            }
                                            (lam
                                              c
                                              k
                                              (lam
                                                b
                                                r
                                                [
                                                  [
                                                    {
                                                      { Tuple2 k } [[These v] r]
                                                    }
                                                    c
                                                  ]
                                                  [ { { That v } r } b ]
                                                ]
                                              )
                                            )
                                          ]
                                        )
                                      ]
                                      [
                                        [
                                          [
                                            {
                                              { foldr [[Tuple2 k] r] }
                                              [List [[Tuple2 k] r]]
                                            }
                                            (lam
                                              e
                                              [[Tuple2 k] r]
                                              (lam
                                                xs
                                                [List [[Tuple2 k] r]]
                                                [
                                                  {
                                                    [
                                                      { { Tuple2_match k } r } e
                                                    ]
                                                    [List [[Tuple2 k] r]]
                                                  }
                                                  (lam
                                                    c
                                                    k
                                                    (lam
                                                      ds
                                                      r
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        {
                                                                          fFoldableNil_cfoldMap
                                                                          [(lam a (type) a) Bool]
                                                                        }
                                                                        [[Tuple2 k] v]
                                                                      }
                                                                      [
                                                                        {
                                                                          fMonoidSum
                                                                          Bool
                                                                        }
                                                                        fAdditiveMonoidBool
                                                                      ]
                                                                    ]
                                                                    (lam
                                                                      ds
                                                                      [[Tuple2 k] v]
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              {
                                                                                Tuple2_match
                                                                                k
                                                                              }
                                                                              v
                                                                            }
                                                                            ds
                                                                          ]
                                                                          Bool
                                                                        }
                                                                        (lam
                                                                          c
                                                                          k
                                                                          (lam
                                                                            ds
                                                                            v
                                                                            [
                                                                              [
                                                                                dEq
                                                                                c
                                                                              ]
                                                                              c
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  ds
                                                                ]
                                                              ]
                                                              (fun Unit [List [[Tuple2 k] r]])
                                                            }
                                                            (lam thunk Unit xs)
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  Cons
                                                                  [[Tuple2 k] r]
                                                                }
                                                                e
                                                              ]
                                                              xs
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          ]
                                          { Nil [[Tuple2 k] r] }
                                        ]
                                        ds
                                      ]
                                    ]
                                  ]
                                  [
                                    [
                                      {
                                        { fFunctorNil_cfmap [[Tuple2 k] v] }
                                        [[Tuple2 k] [[These v] r]]
                                      }
                                      (lam
                                        ds
                                        [[Tuple2 k] v]
                                        [
                                          {
                                            [ { { Tuple2_match k } v } ds ]
                                            [[Tuple2 k] [[These v] r]]
                                          }
                                          (lam
                                            c
                                            k
                                            (lam
                                              i
                                              v
                                              (let
                                                (rec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    go
                                                    (fun [List [[Tuple2 k] r]] [[These v] r])
                                                  )
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 k] r]]
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Nil_match
                                                                [[Tuple2 k] r]
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit [[These v] r])
                                                          }
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              { { This v } r } i
                                                            ]
                                                          )
                                                        ]
                                                        (lam
                                                          ds
                                                          [[Tuple2 k] r]
                                                          (lam
                                                            xs
                                                            [List [[Tuple2 k] r]]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        k
                                                                      }
                                                                      r
                                                                    }
                                                                    ds
                                                                  ]
                                                                  [[These v] r]
                                                                }
                                                                (lam
                                                                  c
                                                                  k
                                                                  (lam
                                                                    i
                                                                    r
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  dEq
                                                                                  c
                                                                                ]
                                                                                c
                                                                              ]
                                                                            ]
                                                                            (fun Unit [[These v] r])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    These
                                                                                    v
                                                                                  }
                                                                                  r
                                                                                }
                                                                                i
                                                                              ]
                                                                              i
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            go
                                                                            xs
                                                                          ]
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                                [
                                                  [
                                                    {
                                                      { Tuple2 k } [[These v] r]
                                                    }
                                                    c
                                                  ]
                                                  [ go ds ]
                                                ]
                                              )
                                            )
                                          )
                                        ]
                                      )
                                    ]
                                    ds
                                  ]
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      unionVal
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]))
                    )
                    (lam
                      ds
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        ds
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (let
                          (rec)
                          (termbind
                            (strict)
                            (vardecl
                              go
                              (fun [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                            )
                            (lam
                              ds
                              [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                              [
                                [
                                  [
                                    {
                                      [
                                        {
                                          Nil_match
                                          [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                        }
                                        ds
                                      ]
                                      (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                                    }
                                    (lam
                                      thunk
                                      Unit
                                      {
                                        Nil
                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      }
                                    )
                                  ]
                                  (lam
                                    ds
                                    [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                    (lam
                                      xs
                                      [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          {
                                            [
                                              {
                                                {
                                                  Tuple2_match (con bytestring)
                                                }
                                                [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              }
                                              ds
                                            ]
                                            [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                          }
                                          (lam
                                            c
                                            (con bytestring)
                                            (lam
                                              i
                                              [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              [
                                                [
                                                  {
                                                    Cons
                                                    [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                                  }
                                                  [
                                                    [
                                                      {
                                                        {
                                                          Tuple2
                                                          (con bytestring)
                                                        }
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                      }
                                                      c
                                                    ]
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                {
                                                                  These_match
                                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                                }
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                              }
                                                              i
                                                            ]
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                          }
                                                          (lam
                                                            b
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            (let
                                                              (rec)
                                                              (termbind
                                                                (strict)
                                                                (vardecl
                                                                  go
                                                                  (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                )
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Nil_match
                                                                              [[Tuple2 (con bytestring)] (con integer)]
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                        }
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nil
                                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                          }
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        ds
                                                                        [[Tuple2 (con bytestring)] (con integer)]
                                                                        (lam
                                                                          xs
                                                                          [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      Tuple2_match
                                                                                      (con bytestring)
                                                                                    }
                                                                                    (con integer)
                                                                                  }
                                                                                  ds
                                                                                ]
                                                                                [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                              }
                                                                              (lam
                                                                                c
                                                                                (con bytestring)
                                                                                (lam
                                                                                  i
                                                                                  (con integer)
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        Cons
                                                                                        [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                      }
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              Tuple2
                                                                                              (con bytestring)
                                                                                            }
                                                                                            [[These (con integer)] (con integer)]
                                                                                          }
                                                                                          c
                                                                                        ]
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              That
                                                                                              (con integer)
                                                                                            }
                                                                                            (con integer)
                                                                                          }
                                                                                          i
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                    [
                                                                                      go
                                                                                      xs
                                                                                    ]
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                              [ go b ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          a
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                          (lam
                                                            b
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    {
                                                                      {
                                                                        union
                                                                        (con bytestring)
                                                                      }
                                                                      (con integer)
                                                                    }
                                                                    (con integer)
                                                                  }
                                                                  equalsByteString
                                                                ]
                                                                a
                                                              ]
                                                              b
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        a
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                        (let
                                                          (rec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              go
                                                              (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                            )
                                                            (lam
                                                              ds
                                                              [List [[Tuple2 (con bytestring)] (con integer)]]
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Nil_match
                                                                          [[Tuple2 (con bytestring)] (con integer)]
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      {
                                                                        Nil
                                                                        [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                      }
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    ds
                                                                    [[Tuple2 (con bytestring)] (con integer)]
                                                                    (lam
                                                                      xs
                                                                      [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                {
                                                                                  Tuple2_match
                                                                                  (con bytestring)
                                                                                }
                                                                                (con integer)
                                                                              }
                                                                              ds
                                                                            ]
                                                                            [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                          }
                                                                          (lam
                                                                            c
                                                                            (con bytestring)
                                                                            (lam
                                                                              i
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  {
                                                                                    Cons
                                                                                    [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                  }
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          Tuple2
                                                                                          (con bytestring)
                                                                                        }
                                                                                        [[These (con integer)] (con integer)]
                                                                                      }
                                                                                      c
                                                                                    ]
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          This
                                                                                          (con integer)
                                                                                        }
                                                                                        (con integer)
                                                                                      }
                                                                                      i
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                                [
                                                                                  go
                                                                                  xs
                                                                                ]
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                          [ go a ]
                                                        )
                                                      )
                                                    ]
                                                  ]
                                                ]
                                                [ go xs ]
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                          [
                            go
                            [
                              [
                                [
                                  {
                                    {
                                      { union (con bytestring) }
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                    }
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                  }
                                  equalsByteString
                                ]
                                ds
                              ]
                              ds
                            ]
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkBinRel
                      (fun (fun (con integer) (fun (con integer) Bool)) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] Bool)))
                    )
                    (lam
                      f
                      (fun (con integer) (fun (con integer) Bool))
                      (lam
                        l
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          r
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] Bool)
                              )
                              (lam
                                xs
                                [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                          }
                                          xs
                                        ]
                                        (fun Unit Bool)
                                      }
                                      (lam thunk Unit True)
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                }
                                                ds
                                              ]
                                              Bool
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam
                                                x
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                (let
                                                  (rec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      go
                                                      (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] Bool)
                                                    )
                                                    (lam
                                                      xs
                                                      [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Nil_match
                                                                  [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                }
                                                                xs
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [ go xs ]
                                                            )
                                                          ]
                                                          (lam
                                                            ds
                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                            (lam
                                                              xs
                                                              [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          (con bytestring)
                                                                        }
                                                                        [[These (con integer)] (con integer)]
                                                                      }
                                                                      ds
                                                                    ]
                                                                    Bool
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    (con bytestring)
                                                                    (lam
                                                                      x
                                                                      [[These (con integer)] (con integer)]
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  {
                                                                                    These_match
                                                                                    (con integer)
                                                                                  }
                                                                                  (con integer)
                                                                                }
                                                                                x
                                                                              ]
                                                                              Bool
                                                                            }
                                                                            (lam
                                                                              b
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            f
                                                                                            (con
                                                                                              integer
                                                                                                0
                                                                                            )
                                                                                          ]
                                                                                          b
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit Bool)
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        go
                                                                                        xs
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    False
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            a
                                                                            (con integer)
                                                                            (lam
                                                                              b
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            f
                                                                                            a
                                                                                          ]
                                                                                          b
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit Bool)
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        go
                                                                                        xs
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    False
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          a
                                                                          (con integer)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    Bool_match
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        a
                                                                                      ]
                                                                                      (con
                                                                                        integer
                                                                                          0
                                                                                      )
                                                                                    ]
                                                                                  ]
                                                                                  (fun Unit Bool)
                                                                                }
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    go
                                                                                    xs
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                False
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [ go x ]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                            [ go [ [ unionVal l ] r ] ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl OutputConstraint (fun (type) (type)))
                      (tyvardecl a (type))
                      OutputConstraint_match
                      (vardecl
                        OutputConstraint
                        (fun a (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [OutputConstraint a]))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkOwnOutputConstraint
                      (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun ScriptContext (fun [OutputConstraint o] Bool))))
                    )
                    (abs
                      o
                      (type)
                      (lam
                        dToData
                        [(lam a (type) (fun a (con data))) o]
                        (lam
                          ctx
                          ScriptContext
                          (lam
                            ds
                            [OutputConstraint o]
                            [
                              { [ ScriptContext_match ctx ] Bool }
                              (lam
                                ds
                                TxInfo
                                (lam
                                  ds
                                  ScriptPurpose
                                  [
                                    { [ { OutputConstraint_match o } ds ] Bool }
                                    (lam
                                      ds
                                      o
                                      (lam
                                        ds
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        (let
                                          (nonrec)
                                          (termbind
                                            (nonstrict)
                                            (vardecl
                                              hsh [Maybe (con bytestring)]
                                            )
                                            [
                                              [ findDatumHash [ dToData ds ] ]
                                              ds
                                            ]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              fFoldableNil_cfoldMap
                                                              [(lam a (type) a) Bool]
                                                            }
                                                            TxOut
                                                          }
                                                          [
                                                            { fMonoidSum Bool }
                                                            fAdditiveMonoidBool
                                                          ]
                                                        ]
                                                        (lam
                                                          ds
                                                          TxOut
                                                          [
                                                            {
                                                              [ TxOut_match ds ]
                                                              Bool
                                                            }
                                                            (lam
                                                              ds
                                                              Address
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Maybe (con bytestring)]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Maybe_match
                                                                              (con bytestring)
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          svh
                                                                          (con bytestring)
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            checkBinRel
                                                                                            equalsInteger
                                                                                          ]
                                                                                          ds
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            [
                                                                                              {
                                                                                                Maybe_match
                                                                                                (con bytestring)
                                                                                              }
                                                                                              hsh
                                                                                            ]
                                                                                            (fun Unit Bool)
                                                                                          }
                                                                                          (lam
                                                                                            a
                                                                                            (con bytestring)
                                                                                            (lam
                                                                                              thunk
                                                                                              Unit
                                                                                              [
                                                                                                [
                                                                                                  equalsByteString
                                                                                                  a
                                                                                                ]
                                                                                                svh
                                                                                              ]
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          False
                                                                                        )
                                                                                      ]
                                                                                      Unit
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  False
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        False
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      [
                                                        getContinuingOutputs ctx
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam thunk Unit True)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    {
                                                      (builtin chooseUnit) Bool
                                                    }
                                                    [
                                                      (builtin trace)
                                                      (con
                                                        string
                                                          "Output constraint"
                                                      )
                                                    ]
                                                  ]
                                                  False
                                                ]
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Ordering (type))

                      Ordering_match
                      (vardecl EQ Ordering)
                      (vardecl GT Ordering)
                      (vardecl LT Ordering)
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdData_ccompare
                      (fun (con integer) (fun (con integer) Ordering))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [ [ (builtin equalsInteger) x ] y ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit Ordering)
                              }
                              (lam thunk Unit EQ)
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                [
                                  [
                                    {
                                      [
                                        Bool_match
                                        [
                                          [
                                            [
                                              { (builtin ifThenElse) Bool }
                                              [
                                                [
                                                  (builtin lessThanEqualsInteger
                                                  )
                                                  x
                                                ]
                                                y
                                              ]
                                            ]
                                            True
                                          ]
                                          False
                                        ]
                                      ]
                                      (fun Unit Ordering)
                                    }
                                    (lam thunk Unit LT)
                                  ]
                                  (lam thunk Unit GT)
                                ]
                                Unit
                              ]
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdInteger_cmax
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [ (builtin lessThanEqualsInteger) x ]
                                          y
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit (con integer))
                              }
                              (lam thunk Unit y)
                            ]
                            (lam thunk Unit x)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdInteger_cmin
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [ (builtin lessThanEqualsInteger) x ]
                                          y
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit (con integer))
                              }
                              (lam thunk Unit x)
                            ]
                            (lam thunk Unit y)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin greaterThanEqualsInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin greaterThanInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      lessThanInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin lessThanInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Ord (fun (type) (type)))
                      (tyvardecl a (type))
                      Ord_match
                      (vardecl
                        CConsOrd
                        (fun [(lam a (type) (fun a (fun a Bool))) a] (fun (fun a (fun a Ordering)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a a)) (fun (fun a (fun a a)) [Ord a]))))))))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      lessThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin lessThanEqualsInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fOrdPOSIXTime [Ord (con integer)])
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [ { CConsOrd (con integer) } equalsInteger ]
                                  fOrdData_ccompare
                                ]
                                lessThanInteger
                              ]
                              lessThanEqInteger
                            ]
                            greaterThanInteger
                          ]
                          greaterThanEqInteger
                        ]
                        fOrdInteger_cmax
                      ]
                      fOrdInteger_cmin
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      compare
                      (all a (type) (fun [Ord a] (fun a (fun a Ordering))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        v
                        [Ord a]
                        [
                          { [ { Ord_match a } v ] (fun a (fun a Ordering)) }
                          (lam
                            v
                            [(lam a (type) (fun a (fun a Bool))) a]
                            (lam
                              v
                              (fun a (fun a Ordering))
                              (lam
                                v
                                (fun a (fun a Bool))
                                (lam
                                  v
                                  (fun a (fun a Bool))
                                  (lam
                                    v
                                    (fun a (fun a Bool))
                                    (lam
                                      v
                                      (fun a (fun a Bool))
                                      (lam
                                        v
                                        (fun a (fun a a))
                                        (lam v (fun a (fun a a)) v)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      hull_ccompare
                      (all a (type) (fun [Ord a] (fun [Extended a] (fun [Extended a] Ordering))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          ds
                          [Extended a]
                          (lam
                            ds
                            [Extended a]
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl fail (fun (all a (type) a) Ordering))
                                (lam ds (all a (type) a) (error Ordering))
                              )
                              [
                                [
                                  [
                                    [
                                      {
                                        [ { Extended_match a } ds ]
                                        (fun Unit Ordering)
                                      }
                                      (lam
                                        default_arg0
                                        a
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    [ { Extended_match a } ds ]
                                                    (fun Unit Ordering)
                                                  }
                                                  (lam
                                                    default_arg0
                                                    a
                                                    (lam
                                                      thunk
                                                      Unit
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (strict)
                                                          (vardecl
                                                            fail
                                                            (fun (all a (type) a) Ordering)
                                                          )
                                                          (lam
                                                            ds
                                                            (all a (type) a)
                                                            [
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Extended_match
                                                                          a
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit Ordering)
                                                                    }
                                                                    (lam
                                                                      default_arg0
                                                                      a
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    {
                                                                                      Extended_match
                                                                                      a
                                                                                    }
                                                                                    ds
                                                                                  ]
                                                                                  (fun Unit Ordering)
                                                                                }
                                                                                (lam
                                                                                  l
                                                                                  a
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              [
                                                                                                {
                                                                                                  Extended_match
                                                                                                  a
                                                                                                }
                                                                                                ds
                                                                                              ]
                                                                                              (fun Unit Ordering)
                                                                                            }
                                                                                            (lam
                                                                                              r
                                                                                              a
                                                                                              (lam
                                                                                                thunk
                                                                                                Unit
                                                                                                [
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        compare
                                                                                                        a
                                                                                                      }
                                                                                                      dOrd
                                                                                                    ]
                                                                                                    l
                                                                                                  ]
                                                                                                  r
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              fail
                                                                                              (abs
                                                                                                e
                                                                                                (type)
                                                                                                (error
                                                                                                  e
                                                                                                )
                                                                                              )
                                                                                            ]
                                                                                          )
                                                                                        ]
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            fail
                                                                                            (abs
                                                                                              e
                                                                                              (type)
                                                                                              (error
                                                                                                e
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                        )
                                                                                      ]
                                                                                      Unit
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              GT
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              l
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            {
                                                                                              Extended_match
                                                                                              a
                                                                                            }
                                                                                            ds
                                                                                          ]
                                                                                          (fun Unit Ordering)
                                                                                        }
                                                                                        (lam
                                                                                          r
                                                                                          a
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    compare
                                                                                                    a
                                                                                                  }
                                                                                                  dOrd
                                                                                                ]
                                                                                                l
                                                                                              ]
                                                                                              r
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          fail
                                                                                          (abs
                                                                                            e
                                                                                            (type)
                                                                                            (error
                                                                                              e
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          GT
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk Unit LT
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        default_arg0
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    EQ
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                ]
                                                (lam thunk Unit GT)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      fail
                                                      (fun (all a (type) a) Ordering)
                                                    )
                                                    (lam
                                                      ds
                                                      (all a (type) a)
                                                      [
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Extended_match
                                                                    a
                                                                  }
                                                                  ds
                                                                ]
                                                                (fun Unit Ordering)
                                                              }
                                                              (lam
                                                                default_arg0
                                                                a
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Extended_match
                                                                                a
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit Ordering)
                                                                          }
                                                                          (lam
                                                                            l
                                                                            a
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          {
                                                                                            Extended_match
                                                                                            a
                                                                                          }
                                                                                          ds
                                                                                        ]
                                                                                        (fun Unit Ordering)
                                                                                      }
                                                                                      (lam
                                                                                        r
                                                                                        a
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            [
                                                                                              [
                                                                                                {
                                                                                                  compare
                                                                                                  a
                                                                                                }
                                                                                                dOrd
                                                                                              ]
                                                                                              l
                                                                                            ]
                                                                                            r
                                                                                          ]
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        GT
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        l
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    r
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              compare
                                                                                              a
                                                                                            }
                                                                                            dOrd
                                                                                          ]
                                                                                          l
                                                                                        ]
                                                                                        r
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    GT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit LT)
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit EQ)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    ]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            [
                                              {
                                                [ { Extended_match a } ds ]
                                                (fun Unit Ordering)
                                              }
                                              (lam
                                                default_arg0
                                                a
                                                (lam thunk Unit LT)
                                              )
                                            ]
                                            (lam thunk Unit EQ)
                                          ]
                                          (lam thunk Unit LT)
                                        ]
                                        Unit
                                      ]
                                    )
                                  ]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [
                                        [
                                          [
                                            {
                                              [ { Extended_match a } ds ]
                                              (fun Unit Ordering)
                                            }
                                            (lam
                                              default_arg0
                                              a
                                              (lam
                                                thunk
                                                Unit
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      fail
                                                      (fun (all a (type) a) Ordering)
                                                    )
                                                    (lam
                                                      ds
                                                      (all a (type) a)
                                                      [
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Extended_match
                                                                    a
                                                                  }
                                                                  ds
                                                                ]
                                                                (fun Unit Ordering)
                                                              }
                                                              (lam
                                                                default_arg0
                                                                a
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Extended_match
                                                                                a
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit Ordering)
                                                                          }
                                                                          (lam
                                                                            l
                                                                            a
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          {
                                                                                            Extended_match
                                                                                            a
                                                                                          }
                                                                                          ds
                                                                                        ]
                                                                                        (fun Unit Ordering)
                                                                                      }
                                                                                      (lam
                                                                                        r
                                                                                        a
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            [
                                                                                              [
                                                                                                {
                                                                                                  compare
                                                                                                  a
                                                                                                }
                                                                                                dOrd
                                                                                              ]
                                                                                              l
                                                                                            ]
                                                                                            r
                                                                                          ]
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        GT
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        l
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    r
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              compare
                                                                                              a
                                                                                            }
                                                                                            dOrd
                                                                                          ]
                                                                                          l
                                                                                        ]
                                                                                        r
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    GT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit LT)
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit EQ)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                          (lam thunk Unit GT)
                                        ]
                                        (lam
                                          thunk
                                          Unit
                                          (let
                                            (nonrec)
                                            (termbind
                                              (strict)
                                              (vardecl
                                                fail
                                                (fun (all a (type) a) Ordering)
                                              )
                                              (lam
                                                ds
                                                (all a (type) a)
                                                [
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            { Extended_match a }
                                                            ds
                                                          ]
                                                          (fun Unit Ordering)
                                                        }
                                                        (lam
                                                          default_arg0
                                                          a
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Extended_match
                                                                          a
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit Ordering)
                                                                    }
                                                                    (lam
                                                                      l
                                                                      a
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    {
                                                                                      Extended_match
                                                                                      a
                                                                                    }
                                                                                    ds
                                                                                  ]
                                                                                  (fun Unit Ordering)
                                                                                }
                                                                                (lam
                                                                                  r
                                                                                  a
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            compare
                                                                                            a
                                                                                          }
                                                                                          dOrd
                                                                                        ]
                                                                                        l
                                                                                      ]
                                                                                      r
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                fail
                                                                                (abs
                                                                                  e
                                                                                  (type)
                                                                                  (error
                                                                                    e
                                                                                  )
                                                                                )
                                                                              ]
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk Unit GT
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  l
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              r
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        compare
                                                                                        a
                                                                                      }
                                                                                      dOrd
                                                                                    ]
                                                                                    l
                                                                                  ]
                                                                                  r
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit GT)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    (lam thunk Unit LT)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        { Extended_match a } ds
                                                      ]
                                                      (fun Unit Ordering)
                                                    }
                                                    (lam
                                                      default_arg0
                                                      a
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          fail
                                                          (abs
                                                            e (type) (error e)
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      fail
                                                      (abs e (type) (error e))
                                                    ]
                                                  )
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam thunk Unit EQ)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdUpperBound0_c
                      (all a (type) (fun [Ord a] (fun [UpperBound a] (fun [UpperBound a] Bool))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          x
                          [UpperBound a]
                          (lam
                            y
                            [UpperBound a]
                            [
                              { [ { UpperBound_match a } x ] Bool }
                              (lam
                                v
                                [Extended a]
                                (lam
                                  in
                                  Bool
                                  [
                                    { [ { UpperBound_match a } y ] Bool }
                                    (lam
                                      v
                                      [Extended a]
                                      (lam
                                        in
                                        Bool
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Ordering_match
                                                    [
                                                      [
                                                        [
                                                          { hull_ccompare a }
                                                          dOrd
                                                        ]
                                                        v
                                                      ]
                                                      v
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [ Bool_match in ]
                                                          (fun Unit Bool)
                                                        }
                                                        (lam thunk Unit in)
                                                      ]
                                                      (lam thunk Unit True)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              (lam thunk Unit False)
                                            ]
                                            (lam thunk Unit True)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      contains
                      (all a (type) (fun [Ord a] (fun [Interval a] (fun [Interval a] Bool))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          ds
                          [Interval a]
                          (lam
                            ds
                            [Interval a]
                            [
                              { [ { Interval_match a } ds ] Bool }
                              (lam
                                l
                                [LowerBound a]
                                (lam
                                  h
                                  [UpperBound a]
                                  [
                                    { [ { Interval_match a } ds ] Bool }
                                    (lam
                                      l
                                      [LowerBound a]
                                      (lam
                                        h
                                        [UpperBound a]
                                        [
                                          { [ { LowerBound_match a } l ] Bool }
                                          (lam
                                            v
                                            [Extended a]
                                            (lam
                                              in
                                              Bool
                                              [
                                                {
                                                  [ { LowerBound_match a } l ]
                                                  Bool
                                                }
                                                (lam
                                                  v
                                                  [Extended a]
                                                  (lam
                                                    in
                                                    Bool
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Ordering_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        hull_ccompare
                                                                        a
                                                                      }
                                                                      dOrd
                                                                    ]
                                                                    v
                                                                  ]
                                                                  v
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        Bool_match
                                                                        in
                                                                      ]
                                                                      (fun Unit Bool)
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                in
                                                                              ]
                                                                              (fun Unit Bool)
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      fOrdUpperBound0_c
                                                                                      a
                                                                                    }
                                                                                    dOrd
                                                                                  ]
                                                                                  h
                                                                                ]
                                                                                h
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            False
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            fOrdUpperBound0_c
                                                                            a
                                                                          }
                                                                          dOrd
                                                                        ]
                                                                        h
                                                                      ]
                                                                      h
                                                                    ]
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit False)
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  fOrdUpperBound0_c
                                                                  a
                                                                }
                                                                dOrd
                                                              ]
                                                              h
                                                            ]
                                                            h
                                                          ]
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl equalsData (fun (con data) (fun (con data) Bool)))
                    (lam
                      d
                      (con data)
                      (lam
                        d
                        (con data)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin equalsData) d ] d ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findDatum
                      (fun (con bytestring) (fun TxInfo [Maybe (con data)]))
                    )
                    (lam
                      dsh
                      (con bytestring)
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe (con data)] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          [[Tuple2 (con bytestring)] (con data)]
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        (con bytestring)
                                                                      }
                                                                      (con data)
                                                                    }
                                                                    x
                                                                  ]
                                                                  [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                (lam
                                                                  dsh
                                                                  (con bytestring)
                                                                  (lam
                                                                    ds
                                                                    (con data)
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        ifThenElse
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        (builtin
                                                                                          equalsByteString
                                                                                        )
                                                                                        dsh
                                                                                      ]
                                                                                      dsh
                                                                                    ]
                                                                                  ]
                                                                                  True
                                                                                ]
                                                                                False
                                                                              ]
                                                                            ]
                                                                            (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                Just
                                                                                [[Tuple2 (con bytestring)] (con data)]
                                                                              }
                                                                              x
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nothing
                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                          }
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe (con data)])
                                                    }
                                                    (lam
                                                      a
                                                      [[Tuple2 (con bytestring)] (con data)]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          { Just (con data) }
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  {
                                                                    Tuple2_match
                                                                    (con bytestring)
                                                                  }
                                                                  (con data)
                                                                }
                                                                a
                                                              ]
                                                              (con data)
                                                            }
                                                            (lam
                                                              ds
                                                              (con bytestring)
                                                              (lam
                                                                b (con data) b
                                                              )
                                                            )
                                                          ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing (con data) }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findTxInByTxOutRef
                      (fun TxOutRef (fun TxInfo [Maybe TxInInfo]))
                    )
                    (lam
                      outRef
                      TxOutRef
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe TxInInfo] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      {
                                                        fFoldableNil_cfoldMap
                                                        [(lam a (type) [Maybe a]) TxInInfo]
                                                      }
                                                      TxInInfo
                                                    }
                                                    { fMonoidFirst TxInInfo }
                                                  ]
                                                  (lam
                                                    x
                                                    TxInInfo
                                                    [
                                                      {
                                                        [ TxInInfo_match x ]
                                                        [Maybe TxInInfo]
                                                      }
                                                      (lam
                                                        ds
                                                        TxOutRef
                                                        (lam
                                                          ds
                                                          TxOut
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    Bool_match
                                                                    [
                                                                      [
                                                                        fEqTxOutRef_c
                                                                        ds
                                                                      ]
                                                                      outRef
                                                                    ]
                                                                  ]
                                                                  (fun Unit [Maybe TxInInfo])
                                                                }
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    {
                                                                      Just
                                                                      TxInInfo
                                                                    }
                                                                    x
                                                                  ]
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                {
                                                                  Nothing
                                                                  TxInInfo
                                                                }
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                  )
                                                ]
                                                ds
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxConstraint (type))

                      TxConstraint_match
                      (vardecl
                        MustBeSignedBy (fun (con bytestring) TxConstraint)
                      )
                      (vardecl
                        MustHashDatum
                        (fun (con bytestring) (fun (con data) TxConstraint))
                      )
                      (vardecl MustIncludeDatum (fun (con data) TxConstraint))
                      (vardecl
                        MustMintValue
                        (fun (con bytestring) (fun (con data) (fun (con bytestring) (fun (con integer) TxConstraint))))
                      )
                      (vardecl
                        MustPayToOtherScript
                        (fun (con bytestring) (fun (con data) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)))
                      )
                      (vardecl
                        MustPayToPubKey
                        (fun (con bytestring) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint))
                      )
                      (vardecl
                        MustProduceAtLeast
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
                      )
                      (vardecl
                        MustSpendAtLeast
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
                      )
                      (vardecl MustSpendPubKeyOutput (fun TxOutRef TxConstraint)
                      )
                      (vardecl
                        MustSpendScriptOutput
                        (fun TxOutRef (fun (con data) TxConstraint))
                      )
                      (vardecl
                        MustValidateIn
                        (fun [Interval (con integer)] TxConstraint)
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl txSignedBy (fun TxInfo (fun (con bytestring) Bool))
                    )
                    (lam
                      ds
                      TxInfo
                      (lam
                        k
                        (con bytestring)
                        [
                          { [ TxInfo_match ds ] Bool }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          (con bytestring)
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) (con bytestring)]
                                                                }
                                                                (con bytestring)
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                (con bytestring)
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              (con bytestring)
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        Bool_match
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                (builtin
                                                                                  ifThenElse
                                                                                )
                                                                                Bool
                                                                              }
                                                                              [
                                                                                [
                                                                                  (builtin
                                                                                    equalsByteString
                                                                                  )
                                                                                  k
                                                                                ]
                                                                                x
                                                                              ]
                                                                            ]
                                                                            True
                                                                          ]
                                                                          False
                                                                        ]
                                                                      ]
                                                                      (fun Unit [Maybe (con bytestring)])
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        {
                                                                          Just
                                                                          (con bytestring)
                                                                        }
                                                                        x
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    {
                                                                      Nothing
                                                                      (con bytestring)
                                                                    }
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam
                                                      ds
                                                      (con bytestring)
                                                      (lam thunk Unit True)
                                                    )
                                                  ]
                                                  (lam thunk Unit False)
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valueOf
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun (con bytestring) (fun (con bytestring) (con integer))))
                    )
                    (lam
                      ds
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        cur
                        (con bytestring)
                        (lam
                          tn
                          (con bytestring)
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                j
                                (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)] (con integer))
                              )
                              (lam
                                i
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                (let
                                  (rec)
                                  (termbind
                                    (strict)
                                    (vardecl
                                      go
                                      (fun [List [[Tuple2 (con bytestring)] (con integer)]] (con integer))
                                    )
                                    (lam
                                      ds
                                      [List [[Tuple2 (con bytestring)] (con integer)]]
                                      [
                                        [
                                          {
                                            [
                                              {
                                                Nil_match
                                                [[Tuple2 (con bytestring)] (con integer)]
                                              }
                                              ds
                                            ]
                                            (con integer)
                                          }
                                          (con integer 0)
                                        ]
                                        (lam
                                          ds
                                          [[Tuple2 (con bytestring)] (con integer)]
                                          (lam
                                            xs
                                            [List [[Tuple2 (con bytestring)] (con integer)]]
                                            [
                                              {
                                                [
                                                  {
                                                    {
                                                      Tuple2_match
                                                      (con bytestring)
                                                    }
                                                    (con integer)
                                                  }
                                                  ds
                                                ]
                                                (con integer)
                                              }
                                              (lam
                                                c
                                                (con bytestring)
                                                (lam
                                                  i
                                                  (con integer)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            Bool_match
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    (builtin
                                                                      ifThenElse
                                                                    )
                                                                    Bool
                                                                  }
                                                                  [
                                                                    [
                                                                      (builtin
                                                                        equalsByteString
                                                                      )
                                                                      c
                                                                    ]
                                                                    tn
                                                                  ]
                                                                ]
                                                                True
                                                              ]
                                                              False
                                                            ]
                                                          ]
                                                          (fun Unit (con integer))
                                                        }
                                                        (lam thunk Unit i)
                                                      ]
                                                      (lam thunk Unit [ go xs ])
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      ]
                                    )
                                  )
                                  [ go i ]
                                )
                              )
                            )
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl
                                  go
                                  (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]] (con integer))
                                )
                                (lam
                                  ds
                                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          }
                                          ds
                                        ]
                                        (con integer)
                                      }
                                      (con integer 0)
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                        [
                                          {
                                            [
                                              {
                                                {
                                                  Tuple2_match (con bytestring)
                                                }
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                              }
                                              ds
                                            ]
                                            (con integer)
                                          }
                                          (lam
                                            c
                                            (con bytestring)
                                            (lam
                                              i
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                [
                                                                  (builtin
                                                                    equalsByteString
                                                                  )
                                                                  c
                                                                ]
                                                                cur
                                                              ]
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      ]
                                                      (fun Unit (con integer))
                                                    }
                                                    (lam thunk Unit [ j i ])
                                                  ]
                                                  (lam thunk Unit [ go xs ])
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                              [ go ds ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      foldr
                      (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          k
                          (fun a (fun b b))
                          (lam
                            z
                            b
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl go (fun [List a] b))
                                (lam
                                  ds
                                  [List a]
                                  [
                                    [
                                      [
                                        { [ { Nil_match a } ds ] (fun Unit b) }
                                        (lam thunk Unit z)
                                      ]
                                      (lam
                                        y
                                        a
                                        (lam
                                          ys
                                          [List a]
                                          (lam thunk Unit [ [ k y ] [ go ys ] ])
                                        )
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              )
                              go
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      pubKeyOutputsAt
                      (fun (con bytestring) (fun TxInfo [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]))
                    )
                    (lam
                      pk
                      (con bytestring)
                      (lam
                        p
                        TxInfo
                        [
                          {
                            [ TxInfo_match p ]
                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                          }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      { foldr TxOut }
                                                      [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                    }
                                                    (lam
                                                      e
                                                      TxOut
                                                      (lam
                                                        xs
                                                        [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                        [
                                                          {
                                                            [ TxOut_match e ]
                                                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                          }
                                                          (lam
                                                            ds
                                                            Address
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [Maybe (con bytestring)]
                                                                [
                                                                  {
                                                                    [
                                                                      Address_match
                                                                      ds
                                                                    ]
                                                                    [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    Credential
                                                                    (lam
                                                                      ds
                                                                      [Maybe StakingCredential]
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Credential_match
                                                                              ds
                                                                            ]
                                                                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                          }
                                                                          (lam
                                                                            pk
                                                                            (con bytestring)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              (builtin
                                                                                                ifThenElse
                                                                                              )
                                                                                              Bool
                                                                                            }
                                                                                            [
                                                                                              [
                                                                                                (builtin
                                                                                                  equalsByteString
                                                                                                )
                                                                                                pk
                                                                                              ]
                                                                                              pk
                                                                                            ]
                                                                                          ]
                                                                                          True
                                                                                        ]
                                                                                        False
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          Cons
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        }
                                                                                        ds
                                                                                      ]
                                                                                      xs
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  xs
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          ipv
                                                                          (con bytestring)
                                                                          xs
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  {
                                                    Nil
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  }
                                                ]
                                                ds
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      unionWith
                      (fun (fun (con integer) (fun (con integer) (con integer))) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])))
                    )
                    (lam
                      f
                      (fun (con integer) (fun (con integer) (con integer)))
                      (lam
                        ls
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          rs
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                              )
                              (lam
                                ds
                                [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                          }
                                          ds
                                        ]
                                        (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                      }
                                      (lam
                                        thunk
                                        Unit
                                        {
                                          Nil
                                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        }
                                      )
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                }
                                                ds
                                              ]
                                              [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                            }
                                            (lam
                                              c
                                              (con bytestring)
                                              (lam
                                                i
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                (let
                                                  (rec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      go
                                                      (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] [List [[Tuple2 (con bytestring)] (con integer)]])
                                                    )
                                                    (lam
                                                      ds
                                                      [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Nil_match
                                                                  [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit [List [[Tuple2 (con bytestring)] (con integer)]])
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              {
                                                                Nil
                                                                [[Tuple2 (con bytestring)] (con integer)]
                                                              }
                                                            )
                                                          ]
                                                          (lam
                                                            ds
                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                            (lam
                                                              xs
                                                              [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          (con bytestring)
                                                                        }
                                                                        [[These (con integer)] (con integer)]
                                                                      }
                                                                      ds
                                                                    ]
                                                                    [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                  }
                                                                  (lam
                                                                    c
                                                                    (con bytestring)
                                                                    (lam
                                                                      i
                                                                      [[These (con integer)] (con integer)]
                                                                      [
                                                                        [
                                                                          {
                                                                            Cons
                                                                            [[Tuple2 (con bytestring)] (con integer)]
                                                                          }
                                                                          [
                                                                            [
                                                                              {
                                                                                {
                                                                                  Tuple2
                                                                                  (con bytestring)
                                                                                }
                                                                                (con integer)
                                                                              }
                                                                              c
                                                                            ]
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          These_match
                                                                                          (con integer)
                                                                                        }
                                                                                        (con integer)
                                                                                      }
                                                                                      i
                                                                                    ]
                                                                                    (con integer)
                                                                                  }
                                                                                  (lam
                                                                                    b
                                                                                    (con integer)
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        (con
                                                                                          integer
                                                                                            0
                                                                                        )
                                                                                      ]
                                                                                      b
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  a
                                                                                  (con integer)
                                                                                  (lam
                                                                                    b
                                                                                    (con integer)
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        a
                                                                                      ]
                                                                                      b
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                a
                                                                                (con integer)
                                                                                [
                                                                                  [
                                                                                    f
                                                                                    a
                                                                                  ]
                                                                                  (con
                                                                                    integer
                                                                                      0
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                          ]
                                                                        ]
                                                                        [
                                                                          go xs
                                                                        ]
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      {
                                                        Cons
                                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      }
                                                      [
                                                        [
                                                          {
                                                            {
                                                              Tuple2
                                                              (con bytestring)
                                                            }
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                          }
                                                          c
                                                        ]
                                                        [ go i ]
                                                      ]
                                                    ]
                                                    [ go xs ]
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                            [ go [ [ unionVal ls ] rs ] ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fMonoidValue_c
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                    )
                    [ unionWith addInteger ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valuePaidTo
                      (fun TxInfo (fun (con bytestring) [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                    )
                    (lam
                      ptx
                      TxInfo
                      (lam
                        pkh
                        (con bytestring)
                        [
                          [
                            [
                              {
                                {
                                  foldr
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                }
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              }
                              fMonoidValue_c
                            ]
                            {
                              Nil
                              [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            }
                          ]
                          [ [ pubKeyOutputsAt pkh ] ptx ]
                        ]
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fMonoidValue
                      [Monoid [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                    )
                    [
                      [
                        {
                          CConsMonoid
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        fMonoidValue_c
                      ]
                      {
                        Nil
                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      }
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      txOutValue
                      (fun TxOut [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                    )
                    (lam
                      ds
                      TxOut
                      [
                        {
                          [ TxOut_match ds ]
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        (lam
                          ds
                          Address
                          (lam
                            ds
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (lam ds [Maybe (con bytestring)] ds)
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valueProduced
                      (fun TxInfo [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                    )
                    (lam
                      x
                      TxInfo
                      [
                        {
                          [ TxInfo_match x ]
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        (lam
                          ds
                          [List TxInInfo]
                          (lam
                            ds
                            [List TxOut]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [List DCert]
                                  (lam
                                    ds
                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                    (lam
                                      ds
                                      [Interval (con integer)]
                                      (lam
                                        ds
                                        [List (con bytestring)]
                                        (lam
                                          ds
                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                          (lam
                                            ds
                                            (con bytestring)
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      fFoldableNil_cfoldMap
                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                    }
                                                    TxOut
                                                  }
                                                  fMonoidValue
                                                ]
                                                txOutValue
                                              ]
                                              ds
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkTxConstraint
                      (fun ScriptContext (fun TxConstraint Bool))
                    )
                    (lam
                      ds
                      ScriptContext
                      [
                        { [ ScriptContext_match ds ] (fun TxConstraint Bool) }
                        (lam
                          ds
                          TxInfo
                          (lam
                            ds
                            ScriptPurpose
                            (lam
                              ds
                              TxConstraint
                              [
                                [
                                  [
                                    [
                                      [
                                        [
                                          [
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      [ TxConstraint_match ds ]
                                                      Bool
                                                    }
                                                    (lam
                                                      pubKey
                                                      (con bytestring)
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    txSignedBy
                                                                    ds
                                                                  ]
                                                                  pubKey
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam thunk Unit True
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    chooseUnit
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  (builtin trace
                                                                  )
                                                                  (con
                                                                    string
                                                                      "Missing signature"
                                                                  )
                                                                ]
                                                              ]
                                                              False
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  ]
                                                  (lam
                                                    dvh
                                                    (con bytestring)
                                                    (lam
                                                      dv
                                                      (con data)
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (nonstrict)
                                                          (vardecl j Bool)
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  chooseUnit
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                (builtin trace)
                                                                (con
                                                                  string
                                                                    "MustHashDatum"
                                                                )
                                                              ]
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Maybe_match
                                                                    (con data)
                                                                  }
                                                                  [
                                                                    [
                                                                      findDatum
                                                                      dvh
                                                                    ]
                                                                    ds
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                a
                                                                (con data)
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            Bool_match
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    (builtin
                                                                                      ifThenElse
                                                                                    )
                                                                                    Bool
                                                                                  }
                                                                                  [
                                                                                    [
                                                                                      (builtin
                                                                                        equalsData
                                                                                      )
                                                                                      a
                                                                                    ]
                                                                                    dv
                                                                                  ]
                                                                                ]
                                                                                True
                                                                              ]
                                                                              False
                                                                            ]
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          True
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        j
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam thunk Unit j)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                ]
                                                (lam
                                                  dv
                                                  (con data)
                                                  [
                                                    { [ TxInfo_match ds ] Bool }
                                                    (lam
                                                      ds
                                                      [List TxInInfo]
                                                      (lam
                                                        ds
                                                        [List TxOut]
                                                        (lam
                                                          ds
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [List DCert]
                                                              (lam
                                                                ds
                                                                [List [[Tuple2 StakingCredential] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Interval (con integer)]
                                                                  (lam
                                                                    ds
                                                                    [List (con bytestring)]
                                                                    (lam
                                                                      ds
                                                                      [List [[Tuple2 (con bytestring)] (con data)]]
                                                                      (lam
                                                                        ds
                                                                        (con bytestring)
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  Bool_match
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            fFoldableNil_cfoldMap
                                                                                            [(lam a (type) a) Bool]
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                        [
                                                                                          {
                                                                                            fMonoidSum
                                                                                            Bool
                                                                                          }
                                                                                          fAdditiveMonoidBool
                                                                                        ]
                                                                                      ]
                                                                                      [
                                                                                        equalsData
                                                                                        dv
                                                                                      ]
                                                                                    ]
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            fFunctorNil_cfmap
                                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                        {
                                                                                          {
                                                                                            snd
                                                                                            (con bytestring)
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                                (fun Unit Bool)
                                                                              }
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                True
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  {
                                                                                    (builtin
                                                                                      chooseUnit
                                                                                    )
                                                                                    Bool
                                                                                  }
                                                                                  [
                                                                                    (builtin
                                                                                      trace
                                                                                    )
                                                                                    (con
                                                                                      string
                                                                                        "Missing datum"
                                                                                    )
                                                                                  ]
                                                                                ]
                                                                                False
                                                                              ]
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              ]
                                              (lam
                                                mps
                                                (con bytestring)
                                                (lam
                                                  ds
                                                  (con data)
                                                  (lam
                                                    tn
                                                    (con bytestring)
                                                    (lam
                                                      v
                                                      (con integer)
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        (builtin
                                                                          ifThenElse
                                                                        )
                                                                        Bool
                                                                      }
                                                                      [
                                                                        [
                                                                          (builtin
                                                                            equalsInteger
                                                                          )
                                                                          [
                                                                            [
                                                                              [
                                                                                valueOf
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      TxInfo_match
                                                                                      ds
                                                                                    ]
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  (lam
                                                                                    ds
                                                                                    [List TxInInfo]
                                                                                    (lam
                                                                                      ds
                                                                                      [List TxOut]
                                                                                      (lam
                                                                                        ds
                                                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        (lam
                                                                                          ds
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          (lam
                                                                                            ds
                                                                                            [List DCert]
                                                                                            (lam
                                                                                              ds
                                                                                              [List [[Tuple2 StakingCredential] (con integer)]]
                                                                                              (lam
                                                                                                ds
                                                                                                [Interval (con integer)]
                                                                                                (lam
                                                                                                  ds
                                                                                                  [List (con bytestring)]
                                                                                                  (lam
                                                                                                    ds
                                                                                                    [List [[Tuple2 (con bytestring)] (con data)]]
                                                                                                    (lam
                                                                                                      ds
                                                                                                      (con bytestring)
                                                                                                      ds
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              ]
                                                                              mps
                                                                            ]
                                                                            tn
                                                                          ]
                                                                        ]
                                                                        v
                                                                      ]
                                                                    ]
                                                                    True
                                                                  ]
                                                                  False
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam thunk Unit True
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    chooseUnit
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  (builtin trace
                                                                  )
                                                                  (con
                                                                    string
                                                                      "Value minted not OK"
                                                                  )
                                                                ]
                                                              ]
                                                              False
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                            (lam
                                              vlh
                                              (con bytestring)
                                              (lam
                                                dv
                                                (con data)
                                                (lam
                                                  vl
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl
                                                        hsh
                                                        [Maybe (con bytestring)]
                                                      )
                                                      [
                                                        [ findDatumHash dv ] ds
                                                      ]
                                                    )
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl addr Credential)
                                                      [ ScriptCredential vlh ]
                                                    )
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl addr Address)
                                                      [
                                                        [ Address addr ]
                                                        {
                                                          Nothing
                                                          StakingCredential
                                                        }
                                                      ]
                                                    )
                                                    [
                                                      {
                                                        [ TxInfo_match ds ] Bool
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    Bool_match
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              fFoldableNil_cfoldMap
                                                                                              [(lam a (type) a) Bool]
                                                                                            }
                                                                                            TxOut
                                                                                          }
                                                                                          [
                                                                                            {
                                                                                              fMonoidSum
                                                                                              Bool
                                                                                            }
                                                                                            fAdditiveMonoidBool
                                                                                          ]
                                                                                        ]
                                                                                        (lam
                                                                                          ds
                                                                                          TxOut
                                                                                          [
                                                                                            {
                                                                                              [
                                                                                                TxOut_match
                                                                                                ds
                                                                                              ]
                                                                                              Bool
                                                                                            }
                                                                                            (lam
                                                                                              ds
                                                                                              Address
                                                                                              (lam
                                                                                                ds
                                                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                                (lam
                                                                                                  ds
                                                                                                  [Maybe (con bytestring)]
                                                                                                  [
                                                                                                    [
                                                                                                      [
                                                                                                        {
                                                                                                          [
                                                                                                            {
                                                                                                              Maybe_match
                                                                                                              (con bytestring)
                                                                                                            }
                                                                                                            ds
                                                                                                          ]
                                                                                                          (fun Unit Bool)
                                                                                                        }
                                                                                                        (lam
                                                                                                          svh
                                                                                                          (con bytestring)
                                                                                                          (lam
                                                                                                            thunk
                                                                                                            Unit
                                                                                                            [
                                                                                                              [
                                                                                                                [
                                                                                                                  {
                                                                                                                    [
                                                                                                                      Bool_match
                                                                                                                      [
                                                                                                                        [
                                                                                                                          [
                                                                                                                            checkBinRel
                                                                                                                            equalsInteger
                                                                                                                          ]
                                                                                                                          ds
                                                                                                                        ]
                                                                                                                        vl
                                                                                                                      ]
                                                                                                                    ]
                                                                                                                    (fun Unit Bool)
                                                                                                                  }
                                                                                                                  (lam
                                                                                                                    thunk
                                                                                                                    Unit
                                                                                                                    [
                                                                                                                      [
                                                                                                                        [
                                                                                                                          {
                                                                                                                            [
                                                                                                                              {
                                                                                                                                Maybe_match
                                                                                                                                (con bytestring)
                                                                                                                              }
                                                                                                                              hsh
                                                                                                                            ]
                                                                                                                            (fun Unit Bool)
                                                                                                                          }
                                                                                                                          (lam
                                                                                                                            a
                                                                                                                            (con bytestring)
                                                                                                                            (lam
                                                                                                                              thunk
                                                                                                                              Unit
                                                                                                                              [
                                                                                                                                [
                                                                                                                                  [
                                                                                                                                    {
                                                                                                                                      [
                                                                                                                                        Bool_match
                                                                                                                                        [
                                                                                                                                          [
                                                                                                                                            [
                                                                                                                                              {
                                                                                                                                                (builtin
                                                                                                                                                  ifThenElse
                                                                                                                                                )
                                                                                                                                                Bool
                                                                                                                                              }
                                                                                                                                              [
                                                                                                                                                [
                                                                                                                                                  (builtin
                                                                                                                                                    equalsByteString
                                                                                                                                                  )
                                                                                                                                                  a
                                                                                                                                                ]
                                                                                                                                                svh
                                                                                                                                              ]
                                                                                                                                            ]
                                                                                                                                            True
                                                                                                                                          ]
                                                                                                                                          False
                                                                                                                                        ]
                                                                                                                                      ]
                                                                                                                                      (fun Unit Bool)
                                                                                                                                    }
                                                                                                                                    (lam
                                                                                                                                      thunk
                                                                                                                                      Unit
                                                                                                                                      [
                                                                                                                                        [
                                                                                                                                          fEqAddress_c
                                                                                                                                          ds
                                                                                                                                        ]
                                                                                                                                        addr
                                                                                                                                      ]
                                                                                                                                    )
                                                                                                                                  ]
                                                                                                                                  (lam
                                                                                                                                    thunk
                                                                                                                                    Unit
                                                                                                                                    False
                                                                                                                                  )
                                                                                                                                ]
                                                                                                                                Unit
                                                                                                                              ]
                                                                                                                            )
                                                                                                                          )
                                                                                                                        ]
                                                                                                                        (lam
                                                                                                                          thunk
                                                                                                                          Unit
                                                                                                                          False
                                                                                                                        )
                                                                                                                      ]
                                                                                                                      Unit
                                                                                                                    ]
                                                                                                                  )
                                                                                                                ]
                                                                                                                (lam
                                                                                                                  thunk
                                                                                                                  Unit
                                                                                                                  False
                                                                                                                )
                                                                                                              ]
                                                                                                              Unit
                                                                                                            ]
                                                                                                          )
                                                                                                        )
                                                                                                      ]
                                                                                                      (lam
                                                                                                        thunk
                                                                                                        Unit
                                                                                                        False
                                                                                                      )
                                                                                                    ]
                                                                                                    Unit
                                                                                                  ]
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                        )
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                  (fun Unit Bool)
                                                                                }
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  True
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        chooseUnit
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      (builtin
                                                                                        trace
                                                                                      )
                                                                                      (con
                                                                                        string
                                                                                          "MustPayToOtherScript"
                                                                                      )
                                                                                    ]
                                                                                  ]
                                                                                  False
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          ]
                                          (lam
                                            pk
                                            (con bytestring)
                                            (lam
                                              vl
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              checkBinRel
                                                              lessThanEqInteger
                                                            ]
                                                            vl
                                                          ]
                                                          [
                                                            [ valuePaidTo ds ]
                                                            pk
                                                          ]
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam thunk Unit True)
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        {
                                                          (builtin chooseUnit)
                                                          Bool
                                                        }
                                                        [
                                                          (builtin trace)
                                                          (con
                                                            string
                                                              "MustPayToPubKey"
                                                          )
                                                        ]
                                                      ]
                                                      False
                                                    ]
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                        (lam
                                          vl
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          checkBinRel
                                                          lessThanEqInteger
                                                        ]
                                                        vl
                                                      ]
                                                      [ valueProduced ds ]
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam thunk Unit True)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    {
                                                      (builtin chooseUnit) Bool
                                                    }
                                                    [
                                                      (builtin trace)
                                                      (con
                                                        string
                                                          "Produced value not OK"
                                                      )
                                                    ]
                                                  ]
                                                  False
                                                ]
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      ]
                                      (lam
                                        vl
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        checkBinRel
                                                        lessThanEqInteger
                                                      ]
                                                      vl
                                                    ]
                                                    [
                                                      {
                                                        [ TxInfo_match ds ]
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    fFoldableNil_cfoldMap
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  TxInInfo
                                                                                }
                                                                                fMonoidValue
                                                                              ]
                                                                              (lam
                                                                                x
                                                                                TxInInfo
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      TxInInfo_match
                                                                                      x
                                                                                    ]
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  (lam
                                                                                    ds
                                                                                    TxOutRef
                                                                                    (lam
                                                                                      ds
                                                                                      TxOut
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            TxOut_match
                                                                                            ds
                                                                                          ]
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        }
                                                                                        (lam
                                                                                          ds
                                                                                          Address
                                                                                          (lam
                                                                                            ds
                                                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                            (lam
                                                                                              ds
                                                                                              [Maybe (con bytestring)]
                                                                                              ds
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            ds
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam thunk Unit True)
                                            ]
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  { (builtin chooseUnit) Bool }
                                                  [
                                                    (builtin trace)
                                                    (con
                                                      string
                                                        "Spent value not OK"
                                                    )
                                                  ]
                                                ]
                                                False
                                              ]
                                            )
                                          ]
                                          Unit
                                        ]
                                      )
                                    ]
                                    (lam
                                      txOutRef
                                      TxOutRef
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl j Bool)
                                          [
                                            [
                                              { (builtin chooseUnit) Bool }
                                              [
                                                (builtin trace)
                                                (con
                                                  string
                                                    "Public key output not spent"
                                                )
                                              ]
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  { Maybe_match TxInInfo }
                                                  [
                                                    [
                                                      findTxInByTxOutRef
                                                      txOutRef
                                                    ]
                                                    ds
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                a
                                                TxInInfo
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    {
                                                      [ TxInInfo_match a ] Bool
                                                    }
                                                    (lam
                                                      ds
                                                      TxOutRef
                                                      (lam
                                                        ds
                                                        TxOut
                                                        [
                                                          {
                                                            [ TxOut_match ds ]
                                                            Bool
                                                          }
                                                          (lam
                                                            ds
                                                            Address
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [Maybe (con bytestring)]
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Maybe_match
                                                                            (con bytestring)
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Bool)
                                                                      }
                                                                      (lam
                                                                        ds
                                                                        (con bytestring)
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          j
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      True
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            ]
                                            (lam thunk Unit j)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam
                                    txOutRef
                                    TxOutRef
                                    (lam
                                      ds
                                      (con data)
                                      [
                                        [
                                          [
                                            {
                                              [
                                                { Maybe_match TxInInfo }
                                                [
                                                  [
                                                    findTxInByTxOutRef txOutRef
                                                  ]
                                                  ds
                                                ]
                                              ]
                                              (fun Unit Bool)
                                            }
                                            (lam
                                              ds TxInInfo (lam thunk Unit True)
                                            )
                                          ]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                { (builtin chooseUnit) Bool }
                                                [
                                                  (builtin trace)
                                                  (con
                                                    string
                                                      "Script output not spent"
                                                  )
                                                ]
                                              ]
                                              False
                                            ]
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                  )
                                ]
                                (lam
                                  interval
                                  [Interval (con integer)]
                                  [
                                    [
                                      [
                                        {
                                          [
                                            Bool_match
                                            [
                                              [
                                                [
                                                  { contains (con integer) }
                                                  fOrdPOSIXTime
                                                ]
                                                interval
                                              ]
                                              [
                                                {
                                                  [ TxInfo_match ds ]
                                                  [Interval (con integer)]
                                                }
                                                (lam
                                                  ds
                                                  [List TxInInfo]
                                                  (lam
                                                    ds
                                                    [List TxOut]
                                                    (lam
                                                      ds
                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      (lam
                                                        ds
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        (lam
                                                          ds
                                                          [List DCert]
                                                          (lam
                                                            ds
                                                            [List [[Tuple2 StakingCredential] (con integer)]]
                                                            (lam
                                                              ds
                                                              [Interval (con integer)]
                                                              (lam
                                                                ds
                                                                [List (con bytestring)]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 (con bytestring)] (con data)]]
                                                                  (lam
                                                                    ds
                                                                    (con bytestring)
                                                                    ds
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                            ]
                                          ]
                                          (fun Unit Bool)
                                        }
                                        (lam thunk Unit True)
                                      ]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            { (builtin chooseUnit) Bool }
                                            [
                                              (builtin trace)
                                              (con
                                                string
                                                  "Wrong validation interval"
                                              )
                                            ]
                                          ]
                                          False
                                        ]
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxConstraints (fun (type) (fun (type) (type))))
                      (tyvardecl i (type)) (tyvardecl o (type))
                      TxConstraints_match
                      (vardecl
                        TxConstraints
                        (fun [List TxConstraint] (fun [List [InputConstraint i]] (fun [List [OutputConstraint o]] [[TxConstraints i] o])))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkScriptContext
                      (all i (type) (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun [[TxConstraints i] o] (fun ScriptContext Bool)))))
                    )
                    (abs
                      i
                      (type)
                      (abs
                        o
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) o]
                          (lam
                            ds
                            [[TxConstraints i] o]
                            (lam
                              ptx
                              ScriptContext
                              [
                                { [ { { TxConstraints_match i } o } ds ] Bool }
                                (lam
                                  ds
                                  [List TxConstraint]
                                  (lam
                                    ds
                                    [List [InputConstraint i]]
                                    (lam
                                      ds
                                      [List [OutputConstraint o]]
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl j Bool)
                                          [
                                            [
                                              { (builtin chooseUnit) Bool }
                                              [
                                                (builtin trace)
                                                (con
                                                  string
                                                    "checkScriptContext failed"
                                                )
                                              ]
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        {
                                                          {
                                                            fFoldableNil_cfoldMap
                                                            [(lam a (type) a) Bool]
                                                          }
                                                          TxConstraint
                                                        }
                                                        [
                                                          {
                                                            fMonoidProduct Bool
                                                          }
                                                          fMultiplicativeMonoidBool
                                                        ]
                                                      ]
                                                      [ checkTxConstraint ptx ]
                                                    ]
                                                    ds
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) a) Bool]
                                                                  }
                                                                  [InputConstraint i]
                                                                }
                                                                [
                                                                  {
                                                                    fMonoidProduct
                                                                    Bool
                                                                  }
                                                                  fMultiplicativeMonoidBool
                                                                ]
                                                              ]
                                                              [
                                                                {
                                                                  checkOwnInputConstraint
                                                                  i
                                                                }
                                                                ptx
                                                              ]
                                                            ]
                                                            ds
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Bool_match
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          {
                                                                            fFoldableNil_cfoldMap
                                                                            [(lam a (type) a) Bool]
                                                                          }
                                                                          [OutputConstraint o]
                                                                        }
                                                                        [
                                                                          {
                                                                            fMonoidProduct
                                                                            Bool
                                                                          }
                                                                          fMultiplicativeMonoidBool
                                                                        ]
                                                                      ]
                                                                      [
                                                                        [
                                                                          {
                                                                            checkOwnOutputConstraint
                                                                            o
                                                                          }
                                                                          dToData
                                                                        ]
                                                                        ptx
                                                                      ]
                                                                    ]
                                                                    ds
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk Unit True
                                                              )
                                                            ]
                                                            (lam thunk Unit j)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    (lam thunk Unit j)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            ]
                                            (lam thunk Unit j)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      build
                      (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        g
                        (all b (type) (fun (fun a (fun b b)) (fun b b)))
                        [ [ { g [List a] } { Cons a } ] { Nil a } ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mustBeSignedByOneOf
                      (fun [List (con bytestring)] (fun ScriptContext Bool))
                    )
                    (lam
                      vks
                      [List (con bytestring)]
                      (lam
                        ctx
                        ScriptContext
                        [
                          [
                            [
                              {
                                {
                                  fFoldableNil_cfoldMap [(lam a (type) a) Bool]
                                }
                                Bool
                              }
                              [ { fMonoidSum Bool } fAdditiveMonoidBool ]
                            ]
                            (lam v Bool v)
                          ]
                          [
                            [
                              { { fFunctorNil_cfmap (con bytestring) } Bool }
                              (lam
                                x
                                (con bytestring)
                                [
                                  [
                                    [
                                      { { checkScriptContext Unit } Unit }
                                      fToDataUnit_ctoBuiltinData
                                    ]
                                    [
                                      [
                                        [
                                          { { TxConstraints Unit } Unit }
                                          [
                                            { build TxConstraint }
                                            (abs
                                              a
                                              (type)
                                              (lam
                                                c
                                                (fun TxConstraint (fun a a))
                                                (lam
                                                  n
                                                  a
                                                  [
                                                    [ c [ MustBeSignedBy x ] ] n
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                        ]
                                        { Nil [InputConstraint Unit] }
                                      ]
                                      { Nil [OutputConstraint Unit] }
                                    ]
                                  ]
                                  ctx
                                ]
                              )
                            ]
                            vks
                          ]
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mustBurnParty
                      (fun ScriptContext (fun (con bytestring) (fun (con bytestring) Bool)))
                    )
                    (lam
                      ctx
                      ScriptContext
                      (lam
                        policyId
                        (con bytestring)
                        (lam
                          vk
                          (con bytestring)
                          (let
                            (nonrec)
                            (termbind
                              (nonstrict)
                              (vardecl red (con data))
                              [ fToDataUnit_ctoBuiltinData Unit ]
                            )
                            [
                              [
                                [
                                  { { checkScriptContext Unit } Unit }
                                  fToDataUnit_ctoBuiltinData
                                ]
                                [
                                  [
                                    [
                                      { { TxConstraints Unit } Unit }
                                      [
                                        { build TxConstraint }
                                        (abs
                                          a
                                          (type)
                                          (lam
                                            c
                                            (fun TxConstraint (fun a a))
                                            (lam
                                              n
                                              a
                                              [
                                                [
                                                  c
                                                  [
                                                    [
                                                      [
                                                        [
                                                          MustMintValue policyId
                                                        ]
                                                        red
                                                      ]
                                                      vk
                                                    ]
                                                    (con integer -1)
                                                  ]
                                                ]
                                                n
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    ]
                                    { Nil [InputConstraint Unit] }
                                  ]
                                  { Nil [OutputConstraint Unit] }
                                ]
                              ]
                              ctx
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mustForwardParty
                      (fun ScriptContext (fun (con bytestring) (fun (con bytestring) Bool)))
                    )
                    (lam
                      ctx
                      ScriptContext
                      (lam
                        policyId
                        (con bytestring)
                        (lam
                          vk
                          (con bytestring)
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                f
                                (fun TxInInfo [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                              )
                              (lam
                                x
                                TxInInfo
                                [
                                  {
                                    [ TxInInfo_match x ]
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  }
                                  (lam
                                    ds
                                    TxOutRef
                                    (lam
                                      ds
                                      TxOut
                                      [
                                        {
                                          [ TxOut_match ds ]
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        }
                                        (lam
                                          ds
                                          Address
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam ds [Maybe (con bytestring)] ds)
                                          )
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                            [
                              [
                                [
                                  {
                                    [
                                      Bool_match
                                      [
                                        [
                                          [
                                            { (builtin ifThenElse) Bool }
                                            [
                                              [
                                                (builtin
                                                  greaterThanEqualsInteger
                                                )
                                                [
                                                  [
                                                    [
                                                      valueOf
                                                      [
                                                        {
                                                          [
                                                            TxInfo_match
                                                            [
                                                              {
                                                                [
                                                                  ScriptContext_match
                                                                  ctx
                                                                ]
                                                                TxInfo
                                                              }
                                                              (lam
                                                                ds
                                                                TxInfo
                                                                (lam
                                                                  ds
                                                                  ScriptPurpose
                                                                  ds
                                                                )
                                                              )
                                                            ]
                                                          ]
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        }
                                                        (lam
                                                          ds
                                                          [List TxInInfo]
                                                          (lam
                                                            ds
                                                            [List TxOut]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [List DCert]
                                                                  (lam
                                                                    ds
                                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                                    (lam
                                                                      ds
                                                                      [Interval (con integer)]
                                                                      (lam
                                                                        ds
                                                                        [List (con bytestring)]
                                                                        (lam
                                                                          ds
                                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                                          (lam
                                                                            ds
                                                                            (con bytestring)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      fFoldableNil_cfoldMap
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    TxInInfo
                                                                                  }
                                                                                  fMonoidValue
                                                                                ]
                                                                                f
                                                                              ]
                                                                              ds
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    ]
                                                    policyId
                                                  ]
                                                  vk
                                                ]
                                              ]
                                              (con integer 1)
                                            ]
                                          ]
                                          True
                                        ]
                                        False
                                      ]
                                    ]
                                    (fun Unit Bool)
                                  }
                                  (lam thunk Unit True)
                                ]
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [
                                      { (builtin chooseUnit) Bool }
                                      [
                                        (builtin trace)
                                        (con string "PT not spent")
                                      ]
                                    ]
                                    False
                                  ]
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mustPayToTheScript
                      (all i (type) (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun o (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[TxConstraints i] o])))))
                    )
                    (abs
                      i
                      (type)
                      (abs
                        o
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) o]
                          (lam
                            dt
                            o
                            (lam
                              vl
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              [
                                [
                                  [
                                    { { TxConstraints i } o }
                                    [
                                      { build TxConstraint }
                                      (abs
                                        a
                                        (type)
                                        (lam
                                          c
                                          (fun TxConstraint (fun a a))
                                          (lam
                                            n
                                            a
                                            [
                                              [
                                                c
                                                [
                                                  MustIncludeDatum
                                                  [ dToData dt ]
                                                ]
                                              ]
                                              n
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                  ]
                                  { Nil [InputConstraint i] }
                                ]
                                [
                                  { build [OutputConstraint o] }
                                  (abs
                                    a
                                    (type)
                                    (lam
                                      c
                                      (fun [OutputConstraint o] (fun a a))
                                      (lam
                                        n
                                        a
                                        [
                                          [
                                            c
                                            [ [ { OutputConstraint o } dt ] vl ]
                                          ]
                                          n
                                        ]
                                      )
                                    )
                                  )
                                ]
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl txOutDatumHash (fun TxOut [Maybe (con bytestring)])
                    )
                    (lam
                      ds
                      TxOut
                      [
                        { [ TxOut_match ds ] [Maybe (con bytestring)] }
                        (lam
                          ds
                          Address
                          (lam
                            ds
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (lam ds [Maybe (con bytestring)] ds)
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      hydraValidator
                      (fun HeadParameters (fun State (fun Transition (fun ScriptContext Bool))))
                    )
                    (lam
                      ds
                      HeadParameters
                      (lam
                        s
                        State
                        (lam
                          i
                          Transition
                          (lam
                            ctx
                            ScriptContext
                            [
                              { [ HeadParameters_match ds ] Bool }
                              (lam
                                ds
                                [List (con bytestring)]
                                (lam
                                  ds
                                  (con bytestring)
                                  [
                                    [
                                      [
                                        [
                                          { [ State_match s ] (fun Unit Bool) }
                                          (lam thunk Unit False)
                                        ]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              [
                                                {
                                                  [ Transition_match i ]
                                                  (fun Unit Bool)
                                                }
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      bad_name
                                                      [
                                                        [
                                                          mustBeSignedByOneOf ds
                                                        ]
                                                        ctx
                                                      ]
                                                    ]
                                                    [
                                                      [
                                                        bad_name
                                                        [
                                                          [
                                                            [
                                                              {
                                                                { all List }
                                                                (con bytestring)
                                                              }
                                                              fFoldableNil_cfoldMap
                                                            ]
                                                            [
                                                              [
                                                                mustBurnParty
                                                                ctx
                                                              ]
                                                              ds
                                                            ]
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              {
                                                                checkScriptContext
                                                                Transition
                                                              }
                                                              State
                                                            }
                                                            ctoBuiltinData
                                                          ]
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    mustPayToTheScript
                                                                    Transition
                                                                  }
                                                                  State
                                                                }
                                                                ctoBuiltinData
                                                              ]
                                                              Final
                                                            ]
                                                            [
                                                              lovelaceValueOf
                                                              (con integer 0)
                                                            ]
                                                          ]
                                                        ]
                                                        ctx
                                                      ]
                                                    ]
                                                  ]
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (nonstrict)
                                                    (vardecl
                                                      collectComUtxos
                                                      [List TxOut]
                                                    )
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              { bad_name List }
                                                              [[Tuple2 TxOutRef] TxOut]
                                                            }
                                                            TxOut
                                                          }
                                                          fFunctorNil_cfmap
                                                        ]
                                                        {
                                                          { snd TxOutRef } TxOut
                                                        }
                                                      ]
                                                      [
                                                        [
                                                          filterInputs
                                                          [ hasParty ds ]
                                                        ]
                                                        ctx
                                                      ]
                                                    ]
                                                  )
                                                  [
                                                    [
                                                      { and List }
                                                      fFoldableNil_cfoldMap
                                                    ]
                                                    [
                                                      { build Bool }
                                                      (abs
                                                        a
                                                        (type)
                                                        (lam
                                                          c
                                                          (fun Bool (fun a a))
                                                          (lam
                                                            n
                                                            a
                                                            (let
                                                              (nonrec)
                                                              (termbind
                                                                (nonstrict)
                                                                (vardecl
                                                                  ds TxInfo
                                                                )
                                                                [
                                                                  scriptContextTxInfo
                                                                  ctx
                                                                ]
                                                              )
                                                              [
                                                                [
                                                                  c
                                                                  [
                                                                    [
                                                                      mustBeSignedByOneOf
                                                                      ds
                                                                    ]
                                                                    ctx
                                                                  ]
                                                                ]
                                                                [
                                                                  [
                                                                    c
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            {
                                                                              all
                                                                              List
                                                                            }
                                                                            (con bytestring)
                                                                          }
                                                                          fFoldableNil_cfoldMap
                                                                        ]
                                                                        [
                                                                          [
                                                                            mustForwardParty
                                                                            ctx
                                                                          ]
                                                                          ds
                                                                        ]
                                                                      ]
                                                                      ds
                                                                    ]
                                                                  ]
                                                                  [
                                                                    [
                                                                      c
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              {
                                                                                checkScriptContext
                                                                                Transition
                                                                              }
                                                                              State
                                                                            }
                                                                            ctoBuiltinData
                                                                          ]
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    mustPayToTheScript
                                                                                    Transition
                                                                                  }
                                                                                  State
                                                                                }
                                                                                ctoBuiltinData
                                                                              ]
                                                                              [
                                                                                Open
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      {
                                                                                        mapMaybe
                                                                                        TxOut
                                                                                      }
                                                                                      TxOut
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  bad_name
                                                                                                  Maybe
                                                                                                }
                                                                                                TxOut
                                                                                              }
                                                                                              (con bytestring)
                                                                                            }
                                                                                            TxOut
                                                                                          }
                                                                                          fMonadMaybe
                                                                                        ]
                                                                                        txOutDatumHash
                                                                                      ]
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  {
                                                                                                    bad_name
                                                                                                    Maybe
                                                                                                  }
                                                                                                  (con bytestring)
                                                                                                }
                                                                                                (con data)
                                                                                              }
                                                                                              TxOut
                                                                                            }
                                                                                            fMonadMaybe
                                                                                          ]
                                                                                          (lam
                                                                                            ds
                                                                                            (con bytestring)
                                                                                            [
                                                                                              [
                                                                                                findDatum
                                                                                                ds
                                                                                              ]
                                                                                              ds
                                                                                            ]
                                                                                          )
                                                                                        ]
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              {
                                                                                                {
                                                                                                  bad_name
                                                                                                  (con data)
                                                                                                }
                                                                                                [Maybe TxOut]
                                                                                              }
                                                                                              (con data)
                                                                                            }
                                                                                            [
                                                                                              {
                                                                                                fromBuiltinData
                                                                                                TxOut
                                                                                              }
                                                                                              fFromDataTxOut_cfromBuiltinData
                                                                                            ]
                                                                                          ]
                                                                                          getDatum
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                  collectComUtxos
                                                                                ]
                                                                              ]
                                                                            ]
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      [
                                                                                        {
                                                                                          foldMap
                                                                                          List
                                                                                        }
                                                                                        fFoldableNil_cfoldMap
                                                                                      ]
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    TxOut
                                                                                  }
                                                                                  fMonoidValue
                                                                                ]
                                                                                txOutValue
                                                                              ]
                                                                              collectComUtxos
                                                                            ]
                                                                          ]
                                                                        ]
                                                                        ctx
                                                                      ]
                                                                    ]
                                                                    n
                                                                  ]
                                                                ]
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  ]
                                                )
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      ]
                                      (lam
                                        default_arg0
                                        [List TxOut]
                                        (lam thunk Unit False)
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  hydraValidator
                )
              )
            )
          )
        )
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Credential (type))

        Credential_match
        (vardecl PubKeyCredential (fun (con bytestring) Credential))
        (vardecl ScriptCredential (fun (con bytestring) Credential))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl StakingCredential (type))

        StakingCredential_match
        (vardecl StakingHash (fun Credential StakingCredential))
        (vardecl
          StakingPtr
          (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Address (type))

        Address_match
        (vardecl
          Address (fun Credential (fun [Maybe StakingCredential] Address))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl TxOut (type))

            TxOut_match
            (vardecl
              TxOut
              (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl State (type))

            State_match
            (vardecl Final State)
            (vardecl Initial State)
            (vardecl Open (fun [List TxOut] State))
          )
        )
        (termbind
          (strict)
          (vardecl error (all a (type) (fun (con unit) a)))
          (abs a (type) (lam thunk (con unit) (error a)))
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMaybe_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Maybe a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [ { error [Maybe a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Maybe a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit { Nothing a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind (nonstrict) (vardecl x [Maybe a]) [ { Just a } x ])
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Maybe a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 0) ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
            (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) a)) a] (fun [(lam a (type) (fun (con data) a)) b] (fun (con data) [[Tuple2 a] b])))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) a]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) b]
                  (lam
                    d
                    (con data)
                    (let
                      (nonrec)
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ { error [[Tuple2 a] b] } (con unit ()) ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl
                          tup
                          [[(con pair) (con integer)] [(con list) (con data)]]
                        )
                        [ (builtin unConstrData) d ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl t [(con list) (con data)])
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x b)
                        [
                          dUnsafeFromData
                          [
                            { (builtin headList) (con data) }
                            [ { (builtin tailList) (con data) } t ]
                          ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x a)
                        [
                          dUnsafeFromData
                          [ { (builtin headList) (con data) } t ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ [ { { Tuple2 a } b } x ] x ]
                      )
                      [
                        [
                          [
                            [
                              { (builtin ifThenElse) (fun Unit [[Tuple2 a] b]) }
                              [
                                [
                                  (builtin equalsInteger)
                                  [
                                    {
                                      { (builtin fstPair) (con integer) }
                                      [(con list) (con data)]
                                    }
                                    tup
                                  ]
                                ]
                                (con integer 0)
                              ]
                            ]
                            (lam ds Unit x)
                          ]
                          (lam ds Unit x)
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataNil_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [List a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (rec)
                  (termbind
                    (strict)
                    (vardecl go (fun [(con list) (con data)] [List a]))
                    (lam
                      l
                      [(con list) (con data)]
                      [
                        [
                          [
                            [
                              {
                                { (builtin chooseList) (fun Unit [List a]) }
                                (con data)
                              }
                              (lam ds Unit { Nil a })
                            ]
                            (lam
                              ds
                              Unit
                              [
                                [
                                  { Cons a }
                                  [
                                    dUnsafeFromData
                                    [ { (builtin headList) (con data) } l ]
                                  ]
                                ]
                                [ go [ { (builtin tailList) (con data) } l ] ]
                              ]
                            )
                          ]
                          l
                        ]
                        Unit
                      ]
                    )
                  )
                  [ go [ (builtin unListData) d ] ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMap
            (all k (type) (all v (type) (fun [(lam a (type) (fun (con data) a)) k] (fun [(lam a (type) (fun (con data) a)) v] (fun (con data) [List [[Tuple2 k] v]])))))
          )
          (abs
            k
            (type)
            (abs
              v
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) k]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) v]
                  (lam
                    eta
                    (con data)
                    [
                      [
                        {
                          fUnsafeFromDataNil_cunsafeFromBuiltinData
                          [[Tuple2 k] v]
                        }
                        [
                          [
                            {
                              { fUnsafeFromDataTuple2_cunsafeFromBuiltinData k }
                              v
                            }
                            dUnsafeFromData
                          ]
                          dUnsafeFromData
                        ]
                      ]
                      eta
                    ]
                  )
                )
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [List [[Tuple2 (con bytestring)] (con integer)]])
          )
          [
            [
              { { fUnsafeFromDataMap (con bytestring) } (con integer) }
              (builtin unBData)
            ]
            (builtin unIData)
          ]
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
          )
          [
            [
              {
                {
                  fUnsafeFromDataTuple2_cunsafeFromBuiltinData (con bytestring)
                }
                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
              }
              (builtin unBData)
            ]
            fUnsafeFromDataValue
          ]
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataCredential_cunsafeFromBuiltinData
            (fun (con data) Credential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [ { error Credential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ PubKeyCredential x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Credential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ ScriptCredential x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Credential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
            (fun (con data) StakingCredential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ { error StakingCredential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x StakingCredential) [ StakingHash x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit StakingCredential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ [ [ StakingPtr x ] x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit StakingCredential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataAddress_cunsafeFromBuiltinData
            (fun (con data) Address)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Address)
                [ { error Address } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe StakingCredential])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      StakingCredential
                    }
                    fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x Address) [ [ Address x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Address) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOut_cunsafeFromBuiltinData (fun (con data) TxOut)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x TxOut) [ { error TxOut } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Address)
                [
                  fUnsafeFromDataAddress_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOut) [ [ [ TxOut x ] x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOut) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl cunsafeFromBuiltinData (fun (con data) State))
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x State) [ { error State } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x State)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit State) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit Initial)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxOut])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxOut }
                    fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  ]
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x State) [ Open x ])
              (termbind
                (nonstrict)
                (vardecl x State)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit State) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit State) }
                      [ [ (builtin equalsInteger) index ] (con integer 2) ]
                    ]
                    (lam ds Unit Final)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Transition (type))

            Transition_match
            (vardecl Abort Transition) (vardecl CollectCom Transition)
          )
        )
        (termbind
          (strict)
          (vardecl cunsafeFromBuiltinData (fun (con data) Transition))
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Transition)
                [ { error Transition } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  [ (builtin unConstrData) d ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Transition)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Transition) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit CollectCom)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Transition) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit Abort)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl DCert (type))

            DCert_match
            (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
            (vardecl
              DCertDelegDelegate
              (fun StakingCredential (fun (con bytestring) DCert))
            )
            (vardecl DCertDelegRegKey (fun StakingCredential DCert))
            (vardecl DCertGenesis DCert)
            (vardecl DCertMir DCert)
            (vardecl
              DCertPoolRegister
              (fun (con bytestring) (fun (con bytestring) DCert))
            )
            (vardecl
              DCertPoolRetire (fun (con bytestring) (fun (con integer) DCert))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxOutRef (type))

            TxOutRef_match
            (vardecl
              TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptPurpose (type))

            ScriptPurpose_match
            (vardecl Certifying (fun DCert ScriptPurpose))
            (vardecl Minting (fun (con bytestring) ScriptPurpose))
            (vardecl Rewarding (fun StakingCredential ScriptPurpose))
            (vardecl Spending (fun TxOutRef ScriptPurpose))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Extended (fun (type) (type)))
            (tyvardecl a (type))
            Extended_match
            (vardecl Finite (fun a [Extended a]))
            (vardecl NegInf [Extended a])
            (vardecl PosInf [Extended a])
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Bool (type))

            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (datatypebind
          (datatype
            (tyvardecl LowerBound (fun (type) (type)))
            (tyvardecl a (type))
            LowerBound_match
            (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl UpperBound (fun (type) (type)))
            (tyvardecl a (type))
            UpperBound_match
            (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Interval (fun (type) (type)))
            (tyvardecl a (type))
            Interval_match
            (vardecl
              Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInInfo (type))

            TxInInfo_match
            (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInfo (type))

            TxInfo_match
            (vardecl
              TxInfo
              (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptContext (type))

            ScriptContext_match
            (vardecl
              ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxId_cunsafeFromBuiltinData
            (fun (con data) (con bytestring))
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ { error (con bytestring) } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit (con bytestring)) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
            (fun (con data) TxOutRef)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [ { error TxOutRef } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOutRef) [ [ TxOutRef x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOutRef) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataDCert_cunsafeFromBuiltinData (fun (con data) DCert)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x DCert) [ { error DCert } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegRegKey x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegDeRegKey x ])
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertDelegDelegate x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRegister x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 3) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRetire x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 4) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 5) ]
                      ]
                      (lam ds Unit DCertGenesis)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit DCert) }
                      [ [ (builtin equalsInteger) index ] (con integer 6) ]
                    ]
                    (lam ds Unit DCertMir)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptPurpose)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [ { error ScriptPurpose } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Minting x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Spending x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Rewarding x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Certifying x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                      [ [ (builtin equalsInteger) index ] (con integer 3) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
            (fun (con data) (con data))
          )
          (lam d (con data) d)
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBool_cunsafeFromBuiltinData (fun (con data) Bool)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x Bool) [ { error Bool } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  [ (builtin unConstrData) d ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Bool)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Bool) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit False)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Bool) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit True)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataExtended_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Extended a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [ { error [Extended a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 0)
                            ]
                          ]
                          (lam ds Unit { NegInf a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict) (vardecl x [Extended a]) [ { Finite a } x ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit x)
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Extended a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 2) ]
                        ]
                        (lam ds Unit { PosInf a })
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [UpperBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ { error [UpperBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ [ { UpperBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [UpperBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [LowerBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ { error [LowerBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ [ { LowerBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [LowerBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Interval a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ { error [Interval a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ [ { Interval a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Interval a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInInfo)
                [ { error TxInInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOut)
                [
                  fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxInInfo) [ [ TxInInfo x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [ { error TxInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 (con bytestring)] (con data)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] (con data)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            (con bytestring)
                          }
                          (con data)
                        }
                        (builtin unBData)
                      ]
                      fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Interval (con integer)])
                [
                  [
                    {
                      fUnsafeFromDataInterval_cunsafeFromBuiltinData
                      (con integer)
                    }
                    (builtin unIData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 StakingCredential] (con integer)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 StakingCredential] (con integer)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            StakingCredential
                          }
                          (con integer)
                        }
                        fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                      ]
                      (builtin unIData)
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List DCert])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData DCert }
                    fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxOut])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxOut }
                    fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxInInfo])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxInInfo }
                    fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  [ [ [ [ [ [ [ [ [ TxInfo x ] x ] x ] x ] x ] x ] x ] x ] x ] x
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptContext)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptContext)
                [ { error ScriptContext } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x ScriptContext) [ [ ScriptContext x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptContext) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl check (fun Bool Unit))
          (lam
            b
            Bool
            [
              [
                [ { [ Bool_match b ] (fun Unit Unit) } (lam thunk Unit Unit) ]
                (lam
                  thunk
                  Unit
                  [
                    { error Unit }
                    [
                      {
                        [
                          Unit_match
                          [
                            [
                              { (builtin chooseUnit) Unit }
                              [
                                (builtin trace) (con string "Check has failed")
                              ]
                            ]
                            Unit
                          ]
                        ]
                        (con unit)
                      }
                      (con unit ())
                    ]
                  ]
                )
              ]
              Unit
            ]
          )
        )
        (termbind
          (strict)
          (vardecl
            wrapValidator
            (all d (type) (all r (type) (fun [(lam a (type) (fun (con data) a)) d] (fun [(lam a (type) (fun (con data) a)) r] (fun (fun d (fun r (fun ScriptContext Bool))) (fun (con data) (fun (con data) (fun (con data) Unit))))))))
          )
          (abs
            d
            (type)
            (abs
              r
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) d]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) r]
                  (lam
                    f
                    (fun d (fun r (fun ScriptContext Bool)))
                    (lam
                      d
                      (con data)
                      (lam
                        r
                        (con data)
                        (lam
                          p
                          (con data)
                          [
                            check
                            [
                              [
                                [ f [ dUnsafeFromData d ] ]
                                [ dUnsafeFromData r ]
                              ]
                              [
                                fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                                p
                              ]
                            ]
                          ]
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        [
          [ { { wrapValidator State } Transition } cunsafeFromBuiltinData ]
          cunsafeFromBuiltinData
        ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl These (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        These_match
        (vardecl That (fun b [[These a] b]))
        (vardecl These (fun a (fun b [[These a] b])))
        (vardecl This (fun a [[These a] b]))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (datatypebind
          (datatype
            (tyvardecl Bool (type))

            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Transition (type))

            Transition_match
            (vardecl Abort Transition) (vardecl CollectCom Transition)
          )
        )
        (termbind
          (strict)
          (vardecl ctoBuiltinData (fun Transition (con data)))
          (lam
            ds
            Transition
            [
              [
                [
                  { [ Transition_match ds ] (fun Unit (con data)) }
                  (lam
                    thunk
                    Unit
                    [
                      [ (builtin constrData) (con integer 1) ]
                      [ (builtin mkNilData) (con unit ()) ]
                    ]
                  )
                ]
                (lam
                  thunk
                  Unit
                  [
                    [ (builtin constrData) (con integer 0) ]
                    [ (builtin mkNilData) (con unit ()) ]
                  ]
                )
              ]
              Unit
            ]
          )
        )
        (datatypebind
          (datatype
            (tyvardecl MultiplicativeMonoid (fun (type) (type)))
            (tyvardecl a (type))
            MultiplicativeMonoid_match
            (vardecl
              CConsMultiplicativeMonoid
              (fun [(lam a (type) (fun a (fun a a))) a] (fun a [MultiplicativeMonoid a]))
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            p1MultiplicativeMonoid
            (all a (type) (fun [MultiplicativeMonoid a] [(lam a (type) (fun a (fun a a))) a]))
          )
          (abs
            a
            (type)
            (lam
              v
              [MultiplicativeMonoid a]
              [
                {
                  [ { MultiplicativeMonoid_match a } v ]
                  [(lam a (type) (fun a (fun a a))) a]
                }
                (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl one (all a (type) (fun [MultiplicativeMonoid a] a)))
          (abs
            a
            (type)
            (lam
              v
              [MultiplicativeMonoid a]
              [
                { [ { MultiplicativeMonoid_match a } v ] a }
                (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Monoid (fun (type) (type)))
            (tyvardecl a (type))
            Monoid_match
            (vardecl
              CConsMonoid
              (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fMonoidProduct
            (all a (type) (fun [MultiplicativeMonoid a] [Monoid [(lam a (type) a) a]]))
          )
          (abs
            a
            (type)
            (lam
              v
              [MultiplicativeMonoid a]
              [
                [
                  { CConsMonoid [(lam a (type) a) a] }
                  (lam
                    eta
                    [(lam a (type) a) a]
                    (lam
                      eta
                      [(lam a (type) a) a]
                      [ [ [ { p1MultiplicativeMonoid a } v ] eta ] eta ]
                    )
                  )
                ]
                [ { one a } v ]
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl bad_name (fun Bool (fun Bool Bool)))
          (lam
            ds
            Bool
            (lam
              x
              Bool
              [
                [
                  [ { [ Bool_match ds ] (fun Unit Bool) } (lam thunk Unit x) ]
                  (lam thunk Unit False)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl fMultiplicativeMonoidBool [MultiplicativeMonoid Bool])
          [ [ { CConsMultiplicativeMonoid Bool } bad_name ] True ]
        )
        (termbind
          (strict)
          (vardecl
            and
            (all t (fun (type) (type)) (fun [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t] (fun [t Bool] Bool)))
          )
          (abs
            t
            (fun (type) (type))
            (lam
              dFoldable
              [(lam t (fun (type) (type)) (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [t a] m)))))) t]
              [
                [
                  { { dFoldable [(lam a (type) a) Bool] } Bool }
                  [ { fMonoidProduct Bool } fMultiplicativeMonoidBool ]
                ]
                (lam v Bool v)
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            equalsByteString (fun (con bytestring) (fun (con bytestring) Bool))
          )
          (lam
            x
            (con bytestring)
            (lam
              y
              (con bytestring)
              [
                [
                  [
                    { (builtin ifThenElse) Bool }
                    [ [ (builtin equalsByteString) x ] y ]
                  ]
                  True
                ]
                False
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Credential (type))

            Credential_match
            (vardecl PubKeyCredential (fun (con bytestring) Credential))
            (vardecl ScriptCredential (fun (con bytestring) Credential))
          )
        )
        (termbind
          (strict)
          (vardecl fEqCredential_c (fun Credential (fun Credential Bool)))
          (lam
            ds
            Credential
            (lam
              ds
              Credential
              [
                [
                  { [ Credential_match ds ] Bool }
                  (lam
                    l
                    (con bytestring)
                    [
                      [
                        { [ Credential_match ds ] Bool }
                        (lam r (con bytestring) [ [ equalsByteString l ] r ])
                      ]
                      (lam ipv (con bytestring) False)
                    ]
                  )
                ]
                (lam
                  a
                  (con bytestring)
                  [
                    [
                      { [ Credential_match ds ] Bool }
                      (lam ipv (con bytestring) False)
                    ]
                    (lam a (con bytestring) [ [ equalsByteString a ] a ])
                  ]
                )
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
          (lam
            x
            (con integer)
            (lam
              y
              (con integer)
              [
                [
                  [
                    { (builtin ifThenElse) Bool }
                    [ [ (builtin equalsInteger) x ] y ]
                  ]
                  True
                ]
                False
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl StakingCredential (type))

            StakingCredential_match
            (vardecl StakingHash (fun Credential StakingCredential))
            (vardecl
              StakingPtr
              (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fEqStakingCredential_c
            (fun StakingCredential (fun StakingCredential Bool))
          )
          (lam
            ds
            StakingCredential
            (lam
              ds
              StakingCredential
              [
                [
                  { [ StakingCredential_match ds ] Bool }
                  (lam
                    l
                    Credential
                    [
                      [
                        { [ StakingCredential_match ds ] Bool }
                        (lam r Credential [ [ fEqCredential_c l ] r ])
                      ]
                      (lam
                        ipv
                        (con integer)
                        (lam ipv (con integer) (lam ipv (con integer) False))
                      )
                    ]
                  )
                ]
                (lam
                  a
                  (con integer)
                  (lam
                    b
                    (con integer)
                    (lam
                      c
                      (con integer)
                      [
                        [
                          { [ StakingCredential_match ds ] Bool }
                          (lam ipv Credential False)
                        ]
                        (lam
                          a
                          (con integer)
                          (lam
                            b
                            (con integer)
                            (lam
                              c
                              (con integer)
                              [
                                [
                                  [
                                    {
                                      [
                                        Bool_match
                                        [
                                          [
                                            [
                                              { (builtin ifThenElse) Bool }
                                              [
                                                [ (builtin equalsInteger) a ] a
                                              ]
                                            ]
                                            True
                                          ]
                                          False
                                        ]
                                      ]
                                      (fun Unit Bool)
                                    }
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            {
                                              [
                                                Bool_match
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          b
                                                        ]
                                                        b
                                                      ]
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              ]
                                              (fun Unit Bool)
                                            }
                                            (lam
                                              thunk
                                              Unit
                                              [ [ equalsInteger c ] c ]
                                            )
                                          ]
                                          (lam thunk Unit False)
                                        ]
                                        Unit
                                      ]
                                    )
                                  ]
                                  (lam thunk Unit False)
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                )
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Maybe (fun (type) (type)))
            (tyvardecl a (type))
            Maybe_match
            (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Address (type))

            Address_match
            (vardecl
              Address (fun Credential (fun [Maybe StakingCredential] Address))
            )
          )
        )
        (termbind
          (strict)
          (vardecl fEqAddress_c (fun Address (fun Address Bool)))
          (lam
            ds
            Address
            (lam
              ds
              Address
              [
                { [ Address_match ds ] Bool }
                (lam
                  cred
                  Credential
                  (lam
                    stakingCred
                    [Maybe StakingCredential]
                    [
                      { [ Address_match ds ] Bool }
                      (lam
                        cred
                        Credential
                        (lam
                          stakingCred
                          [Maybe StakingCredential]
                          (let
                            (nonrec)
                            (termbind
                              (nonstrict)
                              (vardecl j Bool)
                              [
                                [
                                  [
                                    {
                                      [
                                        { Maybe_match StakingCredential }
                                        stakingCred
                                      ]
                                      (fun Unit Bool)
                                    }
                                    (lam
                                      a
                                      StakingCredential
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  {
                                                    Maybe_match
                                                    StakingCredential
                                                  }
                                                  stakingCred
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                a
                                                StakingCredential
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [ fEqStakingCredential_c a ]
                                                    a
                                                  ]
                                                )
                                              )
                                            ]
                                            (lam thunk Unit False)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [
                                        [
                                          {
                                            [
                                              { Maybe_match StakingCredential }
                                              stakingCred
                                            ]
                                            (fun Unit Bool)
                                          }
                                          (lam
                                            ipv
                                            StakingCredential
                                            (lam thunk Unit False)
                                          )
                                        ]
                                        (lam thunk Unit True)
                                      ]
                                      Unit
                                    ]
                                  )
                                ]
                                Unit
                              ]
                            )
                            [
                              [
                                { [ Credential_match cred ] Bool }
                                (lam
                                  l
                                  (con bytestring)
                                  [
                                    [
                                      { [ Credential_match cred ] Bool }
                                      (lam
                                        r
                                        (con bytestring)
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        {
                                                          (builtin ifThenElse)
                                                          Bool
                                                        }
                                                        [
                                                          [
                                                            (builtin
                                                              equalsByteString
                                                            )
                                                            l
                                                          ]
                                                          r
                                                        ]
                                                      ]
                                                      True
                                                    ]
                                                    False
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam thunk Unit j)
                                            ]
                                            (lam thunk Unit False)
                                          ]
                                          Unit
                                        ]
                                      )
                                    ]
                                    (lam ipv (con bytestring) False)
                                  ]
                                )
                              ]
                              (lam
                                a
                                (con bytestring)
                                [
                                  [
                                    { [ Credential_match cred ] Bool }
                                    (lam ipv (con bytestring) False)
                                  ]
                                  (lam
                                    a
                                    (con bytestring)
                                    [
                                      [
                                        [
                                          {
                                            [
                                              Bool_match
                                              [
                                                [
                                                  [
                                                    {
                                                      (builtin ifThenElse) Bool
                                                    }
                                                    [
                                                      [
                                                        (builtin
                                                          equalsByteString
                                                        )
                                                        a
                                                      ]
                                                      a
                                                    ]
                                                  ]
                                                  True
                                                ]
                                                False
                                              ]
                                            ]
                                            (fun Unit Bool)
                                          }
                                          (lam thunk Unit j)
                                        ]
                                        (lam thunk Unit False)
                                      ]
                                      Unit
                                    ]
                                  )
                                ]
                              )
                            ]
                          )
                        )
                      )
                    ]
                  )
                )
              ]
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl AdditiveMonoid (fun (type) (type)))
            (tyvardecl a (type))
            AdditiveMonoid_match
            (vardecl
              CConsAdditiveMonoid
              (fun [(lam a (type) (fun a (fun a a))) a] (fun a [AdditiveMonoid a]))
            )
          )
        )
        (termbind
          (strict)
          (vardecl bad_name (fun Bool (fun Bool Bool)))
          (lam
            ds
            Bool
            (lam
              ds
              Bool
              [
                [
                  [
                    { [ Bool_match ds ] (fun Unit Bool) } (lam thunk Unit True)
                  ]
                  (lam thunk Unit ds)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl fAdditiveMonoidBool [AdditiveMonoid Bool])
          [ [ { CConsAdditiveMonoid Bool } bad_name ] False ]
        )
        (termbind
          (strict)
          (vardecl
            p1Monoid
            (all a (type) (fun [Monoid a] [(lam a (type) (fun a (fun a a))) a]))
          )
          (abs
            a
            (type)
            (lam
              v
              [Monoid a]
              [
                {
                  [ { Monoid_match a } v ] [(lam a (type) (fun a (fun a a))) a]
                }
                (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl mempty (all a (type) (fun [Monoid a] a)))
          (abs
            a
            (type)
            (lam
              v
              [Monoid a]
              [
                { [ { Monoid_match a } v ] a }
                (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
              ]
            )
          )
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              fFoldableNil_cfoldMap
              (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
            )
            (abs
              m
              (type)
              (abs
                a
                (type)
                (lam
                  dMonoid
                  [Monoid m]
                  (let
                    (nonrec)
                    (termbind
                      (nonstrict)
                      (vardecl dSemigroup [(lam a (type) (fun a (fun a a))) m])
                      [ { p1Monoid m } dMonoid ]
                    )
                    (lam
                      ds
                      (fun a m)
                      (lam
                        ds
                        [List a]
                        [
                          [
                            [
                              { [ { Nil_match a } ds ] (fun Unit m) }
                              (lam thunk Unit [ { mempty m } dMonoid ])
                            ]
                            (lam
                              x
                              a
                              (lam
                                xs
                                [List a]
                                (lam
                                  thunk
                                  Unit
                                  [
                                    [ dSemigroup [ ds x ] ]
                                    [
                                      [
                                        [
                                          { { fFoldableNil_cfoldMap m } a }
                                          dMonoid
                                        ]
                                        ds
                                      ]
                                      xs
                                    ]
                                  ]
                                )
                              )
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (rec)
            (termbind
              (nonstrict)
              (vardecl
                fFunctorNil_cfmap
                (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
              )
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    f
                    (fun a b)
                    (lam
                      l
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } l ] (fun Unit [List b]) }
                            (lam thunk Unit { Nil b })
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ { Cons b } [ f x ] ]
                                  [ [ { { fFunctorNil_cfmap a } b } f ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  p1AdditiveMonoid
                  (all a (type) (fun [AdditiveMonoid a] [(lam a (type) (fun a (fun a a))) a]))
                )
                (abs
                  a
                  (type)
                  (lam
                    v
                    [AdditiveMonoid a]
                    [
                      {
                        [ { AdditiveMonoid_match a } v ]
                        [(lam a (type) (fun a (fun a a))) a]
                      }
                      (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                    ]
                  )
                )
              )
              (termbind
                (strict)
                (vardecl zero (all a (type) (fun [AdditiveMonoid a] a)))
                (abs
                  a
                  (type)
                  (lam
                    v
                    [AdditiveMonoid a]
                    [
                      { [ { AdditiveMonoid_match a } v ] a }
                      (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                    ]
                  )
                )
              )
              (termbind
                (strict)
                (vardecl
                  fMonoidSum
                  (all a (type) (fun [AdditiveMonoid a] [Monoid [(lam a (type) a) a]]))
                )
                (abs
                  a
                  (type)
                  (lam
                    v
                    [AdditiveMonoid a]
                    [
                      [
                        { CConsMonoid [(lam a (type) a) a] }
                        (lam
                          eta
                          [(lam a (type) a) a]
                          (lam
                            eta
                            [(lam a (type) a) a]
                            [ [ [ { p1AdditiveMonoid a } v ] eta ] eta ]
                          )
                        )
                      ]
                      [ { zero a } v ]
                    ]
                  )
                )
              )
              (let
                (rec)
                (termbind
                  (nonstrict)
                  (vardecl
                    foldr
                    (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
                  )
                  (abs
                    a
                    (type)
                    (abs
                      b
                      (type)
                      (lam
                        f
                        (fun a (fun b b))
                        (lam
                          acc
                          b
                          (lam
                            l
                            [List a]
                            [
                              [
                                [
                                  { [ { Nil_match a } l ] (fun Unit b) }
                                  (lam thunk Unit acc)
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [List a]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [ f x ]
                                        [ [ [ { { foldr a } b } f ] acc ] xs ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                )
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      union
                      (all k (type) (all v (type) (all r (type) (fun [(lam a (type) (fun a (fun a Bool))) k] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] [[These v] r]]))))))
                    )
                    (abs
                      k
                      (type)
                      (abs
                        v
                        (type)
                        (abs
                          r
                          (type)
                          (lam
                            dEq
                            [(lam a (type) (fun a (fun a Bool))) k]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r]
                                [
                                  [
                                    [
                                      {
                                        { foldr [[Tuple2 k] [[These v] r]] }
                                        [List [[Tuple2 k] [[These v] r]]]
                                      }
                                      { Cons [[Tuple2 k] [[These v] r]] }
                                    ]
                                    [
                                      [
                                        {
                                          { fFunctorNil_cfmap [[Tuple2 k] r] }
                                          [[Tuple2 k] [[These v] r]]
                                        }
                                        (lam
                                          ds
                                          [[Tuple2 k] r]
                                          [
                                            {
                                              [ { { Tuple2_match k } r } ds ]
                                              [[Tuple2 k] [[These v] r]]
                                            }
                                            (lam
                                              c
                                              k
                                              (lam
                                                b
                                                r
                                                [
                                                  [
                                                    {
                                                      { Tuple2 k } [[These v] r]
                                                    }
                                                    c
                                                  ]
                                                  [ { { That v } r } b ]
                                                ]
                                              )
                                            )
                                          ]
                                        )
                                      ]
                                      [
                                        [
                                          [
                                            {
                                              { foldr [[Tuple2 k] r] }
                                              [List [[Tuple2 k] r]]
                                            }
                                            (lam
                                              e
                                              [[Tuple2 k] r]
                                              (lam
                                                xs
                                                [List [[Tuple2 k] r]]
                                                [
                                                  {
                                                    [
                                                      { { Tuple2_match k } r } e
                                                    ]
                                                    [List [[Tuple2 k] r]]
                                                  }
                                                  (lam
                                                    c
                                                    k
                                                    (lam
                                                      ds
                                                      r
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        {
                                                                          fFoldableNil_cfoldMap
                                                                          [(lam a (type) a) Bool]
                                                                        }
                                                                        [[Tuple2 k] v]
                                                                      }
                                                                      [
                                                                        {
                                                                          fMonoidSum
                                                                          Bool
                                                                        }
                                                                        fAdditiveMonoidBool
                                                                      ]
                                                                    ]
                                                                    (lam
                                                                      ds
                                                                      [[Tuple2 k] v]
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              {
                                                                                Tuple2_match
                                                                                k
                                                                              }
                                                                              v
                                                                            }
                                                                            ds
                                                                          ]
                                                                          Bool
                                                                        }
                                                                        (lam
                                                                          c
                                                                          k
                                                                          (lam
                                                                            ds
                                                                            v
                                                                            [
                                                                              [
                                                                                dEq
                                                                                c
                                                                              ]
                                                                              c
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  ds
                                                                ]
                                                              ]
                                                              (fun Unit [List [[Tuple2 k] r]])
                                                            }
                                                            (lam thunk Unit xs)
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  Cons
                                                                  [[Tuple2 k] r]
                                                                }
                                                                e
                                                              ]
                                                              xs
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          ]
                                          { Nil [[Tuple2 k] r] }
                                        ]
                                        ds
                                      ]
                                    ]
                                  ]
                                  [
                                    [
                                      {
                                        { fFunctorNil_cfmap [[Tuple2 k] v] }
                                        [[Tuple2 k] [[These v] r]]
                                      }
                                      (lam
                                        ds
                                        [[Tuple2 k] v]
                                        [
                                          {
                                            [ { { Tuple2_match k } v } ds ]
                                            [[Tuple2 k] [[These v] r]]
                                          }
                                          (lam
                                            c
                                            k
                                            (lam
                                              i
                                              v
                                              (let
                                                (rec)
                                                (termbind
                                                  (strict)
                                                  (vardecl
                                                    go
                                                    (fun [List [[Tuple2 k] r]] [[These v] r])
                                                  )
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 k] r]]
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Nil_match
                                                                [[Tuple2 k] r]
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit [[These v] r])
                                                          }
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              { { This v } r } i
                                                            ]
                                                          )
                                                        ]
                                                        (lam
                                                          ds
                                                          [[Tuple2 k] r]
                                                          (lam
                                                            xs
                                                            [List [[Tuple2 k] r]]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        k
                                                                      }
                                                                      r
                                                                    }
                                                                    ds
                                                                  ]
                                                                  [[These v] r]
                                                                }
                                                                (lam
                                                                  c
                                                                  k
                                                                  (lam
                                                                    i
                                                                    r
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  dEq
                                                                                  c
                                                                                ]
                                                                                c
                                                                              ]
                                                                            ]
                                                                            (fun Unit [[These v] r])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    These
                                                                                    v
                                                                                  }
                                                                                  r
                                                                                }
                                                                                i
                                                                              ]
                                                                              i
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            go
                                                                            xs
                                                                          ]
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                                [
                                                  [
                                                    {
                                                      { Tuple2 k } [[These v] r]
                                                    }
                                                    c
                                                  ]
                                                  [ go ds ]
                                                ]
                                              )
                                            )
                                          )
                                        ]
                                      )
                                    ]
                                    ds
                                  ]
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      unionVal
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]))
                    )
                    (lam
                      ds
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        ds
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (let
                          (rec)
                          (termbind
                            (strict)
                            (vardecl
                              go
                              (fun [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                            )
                            (lam
                              ds
                              [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                              [
                                [
                                  [
                                    {
                                      [
                                        {
                                          Nil_match
                                          [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                        }
                                        ds
                                      ]
                                      (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                                    }
                                    (lam
                                      thunk
                                      Unit
                                      {
                                        Nil
                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      }
                                    )
                                  ]
                                  (lam
                                    ds
                                    [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                    (lam
                                      xs
                                      [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          {
                                            [
                                              {
                                                {
                                                  Tuple2_match (con bytestring)
                                                }
                                                [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              }
                                              ds
                                            ]
                                            [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                          }
                                          (lam
                                            c
                                            (con bytestring)
                                            (lam
                                              i
                                              [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              [
                                                [
                                                  {
                                                    Cons
                                                    [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                                  }
                                                  [
                                                    [
                                                      {
                                                        {
                                                          Tuple2
                                                          (con bytestring)
                                                        }
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                      }
                                                      c
                                                    ]
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                {
                                                                  These_match
                                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                                }
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                              }
                                                              i
                                                            ]
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                          }
                                                          (lam
                                                            b
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            (let
                                                              (rec)
                                                              (termbind
                                                                (strict)
                                                                (vardecl
                                                                  go
                                                                  (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                )
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Nil_match
                                                                              [[Tuple2 (con bytestring)] (con integer)]
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                        }
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nil
                                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                          }
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        ds
                                                                        [[Tuple2 (con bytestring)] (con integer)]
                                                                        (lam
                                                                          xs
                                                                          [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      Tuple2_match
                                                                                      (con bytestring)
                                                                                    }
                                                                                    (con integer)
                                                                                  }
                                                                                  ds
                                                                                ]
                                                                                [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                              }
                                                                              (lam
                                                                                c
                                                                                (con bytestring)
                                                                                (lam
                                                                                  i
                                                                                  (con integer)
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        Cons
                                                                                        [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                      }
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              Tuple2
                                                                                              (con bytestring)
                                                                                            }
                                                                                            [[These (con integer)] (con integer)]
                                                                                          }
                                                                                          c
                                                                                        ]
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              That
                                                                                              (con integer)
                                                                                            }
                                                                                            (con integer)
                                                                                          }
                                                                                          i
                                                                                        ]
                                                                                      ]
                                                                                    ]
                                                                                    [
                                                                                      go
                                                                                      xs
                                                                                    ]
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                              [ go b ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          a
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                          (lam
                                                            b
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    {
                                                                      {
                                                                        union
                                                                        (con bytestring)
                                                                      }
                                                                      (con integer)
                                                                    }
                                                                    (con integer)
                                                                  }
                                                                  equalsByteString
                                                                ]
                                                                a
                                                              ]
                                                              b
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        a
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                        (let
                                                          (rec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              go
                                                              (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                            )
                                                            (lam
                                                              ds
                                                              [List [[Tuple2 (con bytestring)] (con integer)]]
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Nil_match
                                                                          [[Tuple2 (con bytestring)] (con integer)]
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      {
                                                                        Nil
                                                                        [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                      }
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    ds
                                                                    [[Tuple2 (con bytestring)] (con integer)]
                                                                    (lam
                                                                      xs
                                                                      [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                {
                                                                                  Tuple2_match
                                                                                  (con bytestring)
                                                                                }
                                                                                (con integer)
                                                                              }
                                                                              ds
                                                                            ]
                                                                            [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                          }
                                                                          (lam
                                                                            c
                                                                            (con bytestring)
                                                                            (lam
                                                                              i
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  {
                                                                                    Cons
                                                                                    [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                  }
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          Tuple2
                                                                                          (con bytestring)
                                                                                        }
                                                                                        [[These (con integer)] (con integer)]
                                                                                      }
                                                                                      c
                                                                                    ]
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          This
                                                                                          (con integer)
                                                                                        }
                                                                                        (con integer)
                                                                                      }
                                                                                      i
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                                [
                                                                                  go
                                                                                  xs
                                                                                ]
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                          [ go a ]
                                                        )
                                                      )
                                                    ]
                                                  ]
                                                ]
                                                [ go xs ]
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                          [
                            go
                            [
                              [
                                [
                                  {
                                    {
                                      { union (con bytestring) }
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                    }
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                  }
                                  equalsByteString
                                ]
                                ds
                              ]
                              ds
                            ]
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkBinRel
                      (fun (fun (con integer) (fun (con integer) Bool)) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] Bool)))
                    )
                    (lam
                      f
                      (fun (con integer) (fun (con integer) Bool))
                      (lam
                        l
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          r
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] Bool)
                              )
                              (lam
                                xs
                                [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                          }
                                          xs
                                        ]
                                        (fun Unit Bool)
                                      }
                                      (lam thunk Unit True)
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                }
                                                ds
                                              ]
                                              Bool
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam
                                                x
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                (let
                                                  (rec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      go
                                                      (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] Bool)
                                                    )
                                                    (lam
                                                      xs
                                                      [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Nil_match
                                                                  [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                }
                                                                xs
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [ go xs ]
                                                            )
                                                          ]
                                                          (lam
                                                            ds
                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                            (lam
                                                              xs
                                                              [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          (con bytestring)
                                                                        }
                                                                        [[These (con integer)] (con integer)]
                                                                      }
                                                                      ds
                                                                    ]
                                                                    Bool
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    (con bytestring)
                                                                    (lam
                                                                      x
                                                                      [[These (con integer)] (con integer)]
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  {
                                                                                    These_match
                                                                                    (con integer)
                                                                                  }
                                                                                  (con integer)
                                                                                }
                                                                                x
                                                                              ]
                                                                              Bool
                                                                            }
                                                                            (lam
                                                                              b
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            f
                                                                                            (con
                                                                                              integer
                                                                                                0
                                                                                            )
                                                                                          ]
                                                                                          b
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit Bool)
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        go
                                                                                        xs
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    False
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            a
                                                                            (con integer)
                                                                            (lam
                                                                              b
                                                                              (con integer)
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            f
                                                                                            a
                                                                                          ]
                                                                                          b
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit Bool)
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        go
                                                                                        xs
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    False
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          a
                                                                          (con integer)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    Bool_match
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        a
                                                                                      ]
                                                                                      (con
                                                                                        integer
                                                                                          0
                                                                                      )
                                                                                    ]
                                                                                  ]
                                                                                  (fun Unit Bool)
                                                                                }
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    go
                                                                                    xs
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                False
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [ go x ]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                            [ go [ [ unionVal l ] r ] ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxOut (type))

                      TxOut_match
                      (vardecl
                        TxOut
                        (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fEqTxOut_c (fun TxOut (fun TxOut Bool)))
                    (lam
                      l
                      TxOut
                      (lam
                        r
                        TxOut
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      fEqAddress_c
                                      [
                                        { [ TxOut_match l ] Address }
                                        (lam
                                          ds
                                          Address
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam ds [Maybe (con bytestring)] ds)
                                          )
                                        )
                                      ]
                                    ]
                                    [
                                      { [ TxOut_match r ] Address }
                                      (lam
                                        ds
                                        Address
                                        (lam
                                          ds
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          (lam ds [Maybe (con bytestring)] ds)
                                        )
                                      )
                                    ]
                                  ]
                                ]
                                (fun Unit Bool)
                              }
                              (lam
                                thunk
                                Unit
                                [
                                  [
                                    [
                                      {
                                        [
                                          Bool_match
                                          [
                                            [
                                              [ checkBinRel equalsInteger ]
                                              [
                                                {
                                                  [ TxOut_match l ]
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                }
                                                (lam
                                                  ds
                                                  Address
                                                  (lam
                                                    ds
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                    (lam
                                                      ds
                                                      [Maybe (con bytestring)]
                                                      ds
                                                    )
                                                  )
                                                )
                                              ]
                                            ]
                                            [
                                              {
                                                [ TxOut_match r ]
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              }
                                              (lam
                                                ds
                                                Address
                                                (lam
                                                  ds
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  (lam
                                                    ds
                                                    [Maybe (con bytestring)]
                                                    ds
                                                  )
                                                )
                                              )
                                            ]
                                          ]
                                        ]
                                        (fun Unit Bool)
                                      }
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          { [ TxOut_match l ] Bool }
                                          (lam
                                            ds
                                            Address
                                            (lam
                                              ds
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              (lam
                                                ds
                                                [Maybe (con bytestring)]
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          {
                                                            Maybe_match
                                                            (con bytestring)
                                                          }
                                                          ds
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        a
                                                        (con bytestring)
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            {
                                                              [ TxOut_match r ]
                                                              Bool
                                                            }
                                                            (lam
                                                              ds
                                                              Address
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Maybe (con bytestring)]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Maybe_match
                                                                              (con bytestring)
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          a
                                                                          (con bytestring)
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                equalsByteString
                                                                                a
                                                                              ]
                                                                              a
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        False
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [
                                                        {
                                                          [ TxOut_match r ] Bool
                                                        }
                                                        (lam
                                                          ds
                                                          Address
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [Maybe (con bytestring)]
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Maybe_match
                                                                          (con bytestring)
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit Bool)
                                                                    }
                                                                    (lam
                                                                      ipv
                                                                      (con bytestring)
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        False
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    True
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          )
                                        ]
                                      )
                                    ]
                                    (lam thunk Unit False)
                                  ]
                                  Unit
                                ]
                              )
                            ]
                            (lam thunk Unit False)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl DCert (type))

                      DCert_match
                      (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
                      (vardecl
                        DCertDelegDelegate
                        (fun StakingCredential (fun (con bytestring) DCert))
                      )
                      (vardecl DCertDelegRegKey (fun StakingCredential DCert))
                      (vardecl DCertGenesis DCert)
                      (vardecl DCertMir DCert)
                      (vardecl
                        DCertPoolRegister
                        (fun (con bytestring) (fun (con bytestring) DCert))
                      )
                      (vardecl
                        DCertPoolRetire
                        (fun (con bytestring) (fun (con integer) DCert))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxOutRef (type))

                      TxOutRef_match
                      (vardecl
                        TxOutRef
                        (fun (con bytestring) (fun (con integer) TxOutRef))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl ScriptPurpose (type))

                      ScriptPurpose_match
                      (vardecl Certifying (fun DCert ScriptPurpose))
                      (vardecl Minting (fun (con bytestring) ScriptPurpose))
                      (vardecl Rewarding (fun StakingCredential ScriptPurpose))
                      (vardecl Spending (fun TxOutRef ScriptPurpose))
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Extended (fun (type) (type)))
                      (tyvardecl a (type))
                      Extended_match
                      (vardecl Finite (fun a [Extended a]))
                      (vardecl NegInf [Extended a])
                      (vardecl PosInf [Extended a])
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl LowerBound (fun (type) (type)))
                      (tyvardecl a (type))
                      LowerBound_match
                      (vardecl
                        LowerBound (fun [Extended a] (fun Bool [LowerBound a]))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl UpperBound (fun (type) (type)))
                      (tyvardecl a (type))
                      UpperBound_match
                      (vardecl
                        UpperBound (fun [Extended a] (fun Bool [UpperBound a]))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Interval (fun (type) (type)))
                      (tyvardecl a (type))
                      Interval_match
                      (vardecl
                        Interval
                        (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxInInfo (type))

                      TxInInfo_match
                      (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxInfo (type))

                      TxInfo_match
                      (vardecl
                        TxInfo
                        (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl ScriptContext (type))

                      ScriptContext_match
                      (vardecl
                        ScriptContext
                        (fun TxInfo (fun ScriptPurpose ScriptContext))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl mustReimburse (fun TxOut (fun ScriptContext Bool)))
                    (lam
                      txOut
                      TxOut
                      (let
                        (nonrec)
                        (termbind
                          (nonstrict)
                          (vardecl f (fun TxOut Bool))
                          [ fEqTxOut_c txOut ]
                        )
                        (termbind
                          (nonstrict)
                          (vardecl dMonoid [Monoid [(lam a (type) a) Bool]])
                          [ { fMonoidSum Bool } fAdditiveMonoidBool ]
                        )
                        (lam
                          x
                          ScriptContext
                          [
                            [
                              [
                                {
                                  {
                                    fFoldableNil_cfoldMap
                                    [(lam a (type) a) Bool]
                                  }
                                  TxOut
                                }
                                dMonoid
                              ]
                              f
                            ]
                            [
                              {
                                [
                                  TxInfo_match
                                  [
                                    { [ ScriptContext_match x ] TxInfo }
                                    (lam ds TxInfo (lam ds ScriptPurpose ds))
                                  ]
                                ]
                                [List TxOut]
                              }
                              (lam
                                ds
                                [List TxInInfo]
                                (lam
                                  ds
                                  [List TxOut]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                      (lam
                                        ds
                                        [List DCert]
                                        (lam
                                          ds
                                          [List [[Tuple2 StakingCredential] (con integer)]]
                                          (lam
                                            ds
                                            [Interval (con integer)]
                                            (lam
                                              ds
                                              [List (con bytestring)]
                                              (lam
                                                ds
                                                [List [[Tuple2 (con bytestring)] (con data)]]
                                                (lam ds (con bytestring) ds)
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ]
                          ]
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl InputConstraint (fun (type) (type)))
                      (tyvardecl a (type))
                      InputConstraint_match
                      (vardecl
                        InputConstraint
                        (fun a (fun TxOutRef [InputConstraint a]))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl OutputConstraint (fun (type) (type)))
                      (tyvardecl a (type))
                      OutputConstraint_match
                      (vardecl
                        OutputConstraint
                        (fun a (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [OutputConstraint a]))
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxConstraint (type))

                      TxConstraint_match
                      (vardecl
                        MustBeSignedBy (fun (con bytestring) TxConstraint)
                      )
                      (vardecl
                        MustHashDatum
                        (fun (con bytestring) (fun (con data) TxConstraint))
                      )
                      (vardecl MustIncludeDatum (fun (con data) TxConstraint))
                      (vardecl
                        MustMintValue
                        (fun (con bytestring) (fun (con data) (fun (con bytestring) (fun (con integer) TxConstraint))))
                      )
                      (vardecl
                        MustPayToOtherScript
                        (fun (con bytestring) (fun (con data) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)))
                      )
                      (vardecl
                        MustPayToPubKey
                        (fun (con bytestring) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint))
                      )
                      (vardecl
                        MustProduceAtLeast
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
                      )
                      (vardecl
                        MustSpendAtLeast
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
                      )
                      (vardecl MustSpendPubKeyOutput (fun TxOutRef TxConstraint)
                      )
                      (vardecl
                        MustSpendScriptOutput
                        (fun TxOutRef (fun (con data) TxConstraint))
                      )
                      (vardecl
                        MustValidateIn
                        (fun [Interval (con integer)] TxConstraint)
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl TxConstraints (fun (type) (fun (type) (type))))
                      (tyvardecl i (type)) (tyvardecl o (type))
                      TxConstraints_match
                      (vardecl
                        TxConstraints
                        (fun [List TxConstraint] (fun [List [InputConstraint i]] (fun [List [OutputConstraint o]] [[TxConstraints i] o])))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidTxConstraints_c
                      (all i (type) (all o (type) (fun [[TxConstraints i] o] (fun [[TxConstraints i] o] [[TxConstraints i] o]))))
                    )
                    (abs
                      i
                      (type)
                      (abs
                        o
                        (type)
                        (lam
                          l
                          [[TxConstraints i] o]
                          (lam
                            r
                            [[TxConstraints i] o]
                            [
                              [
                                [
                                  { { TxConstraints i } o }
                                  [
                                    {
                                      [ { { TxConstraints_match i } o } l ]
                                      [List TxConstraint]
                                    }
                                    (lam
                                      ds
                                      [List TxConstraint]
                                      (lam
                                        ds
                                        [List [InputConstraint i]]
                                        (lam
                                          ds
                                          [List [OutputConstraint o]]
                                          [
                                            [
                                              [
                                                {
                                                  { foldr TxConstraint }
                                                  [List TxConstraint]
                                                }
                                                { Cons TxConstraint }
                                              ]
                                              [
                                                {
                                                  [
                                                    {
                                                      { TxConstraints_match i }
                                                      o
                                                    }
                                                    r
                                                  ]
                                                  [List TxConstraint]
                                                }
                                                (lam
                                                  ds
                                                  [List TxConstraint]
                                                  (lam
                                                    ds
                                                    [List [InputConstraint i]]
                                                    (lam
                                                      ds
                                                      [List [OutputConstraint o]]
                                                      ds
                                                    )
                                                  )
                                                )
                                              ]
                                            ]
                                            ds
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                ]
                                [
                                  {
                                    [ { { TxConstraints_match i } o } l ]
                                    [List [InputConstraint i]]
                                  }
                                  (lam
                                    ds
                                    [List TxConstraint]
                                    (lam
                                      ds
                                      [List [InputConstraint i]]
                                      (lam
                                        ds
                                        [List [OutputConstraint o]]
                                        [
                                          [
                                            [
                                              {
                                                { foldr [InputConstraint i] }
                                                [List [InputConstraint i]]
                                              }
                                              { Cons [InputConstraint i] }
                                            ]
                                            [
                                              {
                                                [
                                                  {
                                                    { TxConstraints_match i } o
                                                  }
                                                  r
                                                ]
                                                [List [InputConstraint i]]
                                              }
                                              (lam
                                                ds
                                                [List TxConstraint]
                                                (lam
                                                  ds
                                                  [List [InputConstraint i]]
                                                  (lam
                                                    ds
                                                    [List [OutputConstraint o]]
                                                    ds
                                                  )
                                                )
                                              )
                                            ]
                                          ]
                                          ds
                                        ]
                                      )
                                    )
                                  )
                                ]
                              ]
                              [
                                {
                                  [ { { TxConstraints_match i } o } l ]
                                  [List [OutputConstraint o]]
                                }
                                (lam
                                  ds
                                  [List TxConstraint]
                                  (lam
                                    ds
                                    [List [InputConstraint i]]
                                    (lam
                                      ds
                                      [List [OutputConstraint o]]
                                      [
                                        [
                                          [
                                            {
                                              { foldr [OutputConstraint o] }
                                              [List [OutputConstraint o]]
                                            }
                                            { Cons [OutputConstraint o] }
                                          ]
                                          [
                                            {
                                              [
                                                { { TxConstraints_match i } o }
                                                r
                                              ]
                                              [List [OutputConstraint o]]
                                            }
                                            (lam
                                              ds
                                              [List TxConstraint]
                                              (lam
                                                ds
                                                [List [InputConstraint i]]
                                                (lam
                                                  ds
                                                  [List [OutputConstraint o]]
                                                  ds
                                                )
                                              )
                                            )
                                          ]
                                        ]
                                        ds
                                      ]
                                    )
                                  )
                                )
                              ]
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidTxConstraints_cmempty
                      (all i (type) (all o (type) [[TxConstraints i] o]))
                    )
                    (abs
                      i
                      (type)
                      (abs
                        o
                        (type)
                        [
                          [
                            [ { { TxConstraints i } o } { Nil TxConstraint } ]
                            { Nil [InputConstraint i] }
                          ]
                          { Nil [OutputConstraint o] }
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fToDataUnit_ctoBuiltinData (fun Unit (con data)))
                    (lam
                      ds
                      Unit
                      [
                        { [ Unit_match ds ] (con data) }
                        [
                          [ (builtin constrData) (con integer 0) ]
                          [ (builtin mkNilData) (con unit ()) ]
                        ]
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl fEqTxOutRef_c (fun TxOutRef (fun TxOutRef Bool)))
                    (lam
                      l
                      TxOutRef
                      (lam
                        r
                        TxOutRef
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [
                                            (builtin equalsByteString)
                                            [
                                              {
                                                [ TxOutRef_match l ]
                                                (con bytestring)
                                              }
                                              (lam
                                                ds
                                                (con bytestring)
                                                (lam ds (con integer) ds)
                                              )
                                            ]
                                          ]
                                          [
                                            {
                                              [ TxOutRef_match r ]
                                              (con bytestring)
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam ds (con integer) ds)
                                            )
                                          ]
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit Bool)
                              }
                              (lam
                                thunk
                                Unit
                                [
                                  [
                                    [
                                      { (builtin ifThenElse) Bool }
                                      [
                                        [
                                          (builtin equalsInteger)
                                          [
                                            {
                                              [ TxOutRef_match l ] (con integer)
                                            }
                                            (lam
                                              ds
                                              (con bytestring)
                                              (lam ds (con integer) ds)
                                            )
                                          ]
                                        ]
                                        [
                                          { [ TxOutRef_match r ] (con integer) }
                                          (lam
                                            ds
                                            (con bytestring)
                                            (lam ds (con integer) ds)
                                          )
                                        ]
                                      ]
                                    ]
                                    True
                                  ]
                                  False
                                ]
                              )
                            ]
                            (lam thunk Unit False)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkOwnInputConstraint
                      (all a (type) (fun ScriptContext (fun [InputConstraint a] Bool)))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        ds
                        ScriptContext
                        (lam
                          ds
                          [InputConstraint a]
                          [
                            { [ ScriptContext_match ds ] Bool }
                            (lam
                              ds
                              TxInfo
                              (lam
                                ds
                                ScriptPurpose
                                [
                                  { [ { InputConstraint_match a } ds ] Bool }
                                  (lam
                                    ds
                                    a
                                    (lam
                                      ds
                                      TxOutRef
                                      [
                                        { [ TxInfo_match ds ] Bool }
                                        (lam
                                          ds
                                          [List TxInInfo]
                                          (lam
                                            ds
                                            [List TxOut]
                                            (lam
                                              ds
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              (lam
                                                ds
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                (lam
                                                  ds
                                                  [List DCert]
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                    (lam
                                                      ds
                                                      [Interval (con integer)]
                                                      (lam
                                                        ds
                                                        [List (con bytestring)]
                                                        (lam
                                                          ds
                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                          (lam
                                                            ds
                                                            (con bytestring)
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      Bool_match
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              {
                                                                                fFoldableNil_cfoldMap
                                                                                [(lam a (type) a) Bool]
                                                                              }
                                                                              TxInInfo
                                                                            }
                                                                            [
                                                                              {
                                                                                fMonoidSum
                                                                                Bool
                                                                              }
                                                                              fAdditiveMonoidBool
                                                                            ]
                                                                          ]
                                                                          (lam
                                                                            ds
                                                                            TxInInfo
                                                                            [
                                                                              {
                                                                                [
                                                                                  TxInInfo_match
                                                                                  ds
                                                                                ]
                                                                                Bool
                                                                              }
                                                                              (lam
                                                                                ds
                                                                                TxOutRef
                                                                                (lam
                                                                                  ds
                                                                                  TxOut
                                                                                  [
                                                                                    [
                                                                                      fEqTxOutRef_c
                                                                                      ds
                                                                                    ]
                                                                                    ds
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        ds
                                                                      ]
                                                                    ]
                                                                    (fun Unit Bool)
                                                                  }
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    True
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      {
                                                                        (builtin
                                                                          chooseUnit
                                                                        )
                                                                        Bool
                                                                      }
                                                                      [
                                                                        (builtin
                                                                          trace
                                                                        )
                                                                        (con
                                                                          string
                                                                            "Input constraint"
                                                                        )
                                                                      ]
                                                                    ]
                                                                    False
                                                                  ]
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fSemigroupFirst_c
                      (all a (type) (fun [(lam a (type) [Maybe a]) a] (fun [(lam a (type) [Maybe a]) a] [(lam a (type) [Maybe a]) a])))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        ds
                        [(lam a (type) [Maybe a]) a]
                        (lam
                          b
                          [(lam a (type) [Maybe a]) a]
                          [
                            [
                              [
                                {
                                  [ { Maybe_match a } ds ]
                                  (fun Unit [(lam a (type) [Maybe a]) a])
                                }
                                (lam ipv a (lam thunk Unit ds))
                              ]
                              (lam thunk Unit b)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fMonoidFirst
                      (all a (type) [Monoid [(lam a (type) [Maybe a]) a]])
                    )
                    (abs
                      a
                      (type)
                      [
                        [
                          { CConsMonoid [(lam a (type) [Maybe a]) a] }
                          { fSemigroupFirst_c a }
                        ]
                        { Nothing a }
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findDatumHash
                      (fun (con data) (fun TxInfo [Maybe (con bytestring)]))
                    )
                    (lam
                      ds
                      (con data)
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe (con bytestring)] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          [[Tuple2 (con bytestring)] (con data)]
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        (con bytestring)
                                                                      }
                                                                      (con data)
                                                                    }
                                                                    x
                                                                  ]
                                                                  [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                (lam
                                                                  ds
                                                                  (con bytestring)
                                                                  (lam
                                                                    ds
                                                                    (con data)
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        ifThenElse
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        (builtin
                                                                                          equalsData
                                                                                        )
                                                                                        ds
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                  True
                                                                                ]
                                                                                False
                                                                              ]
                                                                            ]
                                                                            (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                Just
                                                                                [[Tuple2 (con bytestring)] (con data)]
                                                                              }
                                                                              x
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nothing
                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                          }
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe (con bytestring)])
                                                    }
                                                    (lam
                                                      a
                                                      [[Tuple2 (con bytestring)] (con data)]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          {
                                                            Just
                                                            (con bytestring)
                                                          }
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  {
                                                                    Tuple2_match
                                                                    (con bytestring)
                                                                  }
                                                                  (con data)
                                                                }
                                                                a
                                                              ]
                                                              (con bytestring)
                                                            }
                                                            (lam
                                                              a
                                                              (con bytestring)
                                                              (lam
                                                                ds (con data) a
                                                              )
                                                            )
                                                          ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing (con bytestring) }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl error (all a (type) (fun (con unit) a)))
                    (abs a (type) (lam thunk (con unit) (error a)))
                  )
                  (termbind
                    (strict)
                    (vardecl findOwnInput (fun ScriptContext [Maybe TxInInfo]))
                    (lam
                      ds
                      ScriptContext
                      [
                        { [ ScriptContext_match ds ] [Maybe TxInInfo] }
                        (lam
                          ds
                          TxInfo
                          (lam
                            ds
                            ScriptPurpose
                            [
                              { [ TxInfo_match ds ] [Maybe TxInInfo] }
                              (lam
                                ds
                                [List TxInInfo]
                                (lam
                                  ds
                                  [List TxOut]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                      (lam
                                        ds
                                        [List DCert]
                                        (lam
                                          ds
                                          [List [[Tuple2 StakingCredential] (con integer)]]
                                          (lam
                                            ds
                                            [Interval (con integer)]
                                            (lam
                                              ds
                                              [List (con bytestring)]
                                              (lam
                                                ds
                                                [List [[Tuple2 (con bytestring)] (con data)]]
                                                (lam
                                                  ds
                                                  (con bytestring)
                                                  [
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                ScriptPurpose_match
                                                                ds
                                                              ]
                                                              (fun Unit [Maybe TxInInfo])
                                                            }
                                                            (lam
                                                              default_arg0
                                                              DCert
                                                              (lam
                                                                thunk
                                                                Unit
                                                                {
                                                                  Nothing
                                                                  TxInInfo
                                                                }
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            default_arg0
                                                            (con bytestring)
                                                            (lam
                                                              thunk
                                                              Unit
                                                              {
                                                                Nothing TxInInfo
                                                              }
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          default_arg0
                                                          StakingCredential
                                                          (lam
                                                            thunk
                                                            Unit
                                                            { Nothing TxInInfo }
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        txOutRef
                                                        TxOutRef
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) [Maybe a]) TxInInfo]
                                                                  }
                                                                  TxInInfo
                                                                }
                                                                {
                                                                  fMonoidFirst
                                                                  TxInInfo
                                                                }
                                                              ]
                                                              (lam
                                                                x
                                                                TxInInfo
                                                                [
                                                                  {
                                                                    [
                                                                      TxInInfo_match
                                                                      x
                                                                    ]
                                                                    [Maybe TxInInfo]
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    TxOutRef
                                                                    (lam
                                                                      ds
                                                                      TxOut
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                [
                                                                                  [
                                                                                    fEqTxOutRef_c
                                                                                    ds
                                                                                  ]
                                                                                  txOutRef
                                                                                ]
                                                                              ]
                                                                              (fun Unit [Maybe TxInInfo])
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                {
                                                                                  Just
                                                                                  TxInInfo
                                                                                }
                                                                                x
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            {
                                                                              Nothing
                                                                              TxInInfo
                                                                            }
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            ds
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      getContinuingOutputs (fun ScriptContext [List TxOut])
                    )
                    (lam
                      ctx
                      ScriptContext
                      [
                        [
                          [
                            {
                              [ { Maybe_match TxInInfo } [ findOwnInput ctx ] ]
                              (fun Unit [List TxOut])
                            }
                            (lam
                              ds
                              TxInInfo
                              (lam
                                thunk
                                Unit
                                [
                                  { [ TxInInfo_match ds ] [List TxOut] }
                                  (lam
                                    ds
                                    TxOutRef
                                    (lam
                                      ds
                                      TxOut
                                      [
                                        { [ TxOut_match ds ] [List TxOut] }
                                        (lam
                                          ds
                                          Address
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam
                                              ds
                                              [Maybe (con bytestring)]
                                              [
                                                {
                                                  [ ScriptContext_match ctx ]
                                                  [List TxOut]
                                                }
                                                (lam
                                                  ds
                                                  TxInfo
                                                  (lam
                                                    ds
                                                    ScriptPurpose
                                                    [
                                                      {
                                                        [ TxInfo_match ds ]
                                                        [List TxOut]
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    foldr
                                                                                    TxOut
                                                                                  }
                                                                                  [List TxOut]
                                                                                }
                                                                                (lam
                                                                                  e
                                                                                  TxOut
                                                                                  (lam
                                                                                    xs
                                                                                    [List TxOut]
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          TxOut_match
                                                                                          e
                                                                                        ]
                                                                                        [List TxOut]
                                                                                      }
                                                                                      (lam
                                                                                        ds
                                                                                        Address
                                                                                        (lam
                                                                                          ds
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          (lam
                                                                                            ds
                                                                                            [Maybe (con bytestring)]
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    [
                                                                                                      Bool_match
                                                                                                      [
                                                                                                        [
                                                                                                          fEqAddress_c
                                                                                                          ds
                                                                                                        ]
                                                                                                        ds
                                                                                                      ]
                                                                                                    ]
                                                                                                    (fun Unit [List TxOut])
                                                                                                  }
                                                                                                  (lam
                                                                                                    thunk
                                                                                                    Unit
                                                                                                    [
                                                                                                      [
                                                                                                        {
                                                                                                          Cons
                                                                                                          TxOut
                                                                                                        }
                                                                                                        e
                                                                                                      ]
                                                                                                      xs
                                                                                                    ]
                                                                                                  )
                                                                                                ]
                                                                                                (lam
                                                                                                  thunk
                                                                                                  Unit
                                                                                                  xs
                                                                                                )
                                                                                              ]
                                                                                              Unit
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              {
                                                                                Nil
                                                                                TxOut
                                                                              }
                                                                            ]
                                                                            ds
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                          ]
                          (lam
                            thunk
                            Unit
                            [
                              { error [List TxOut] }
                              [
                                {
                                  [
                                    Unit_match
                                    [
                                      [
                                        { (builtin chooseUnit) Unit }
                                        [
                                          (builtin trace)
                                          (con
                                            string
                                              "Can't get any continuing outputs"
                                          )
                                        ]
                                      ]
                                      Unit
                                    ]
                                  ]
                                  (con unit)
                                }
                                (con unit ())
                              ]
                            ]
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkOwnOutputConstraint
                      (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun ScriptContext (fun [OutputConstraint o] Bool))))
                    )
                    (abs
                      o
                      (type)
                      (lam
                        dToData
                        [(lam a (type) (fun a (con data))) o]
                        (lam
                          ctx
                          ScriptContext
                          (lam
                            ds
                            [OutputConstraint o]
                            [
                              { [ ScriptContext_match ctx ] Bool }
                              (lam
                                ds
                                TxInfo
                                (lam
                                  ds
                                  ScriptPurpose
                                  [
                                    { [ { OutputConstraint_match o } ds ] Bool }
                                    (lam
                                      ds
                                      o
                                      (lam
                                        ds
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        (let
                                          (nonrec)
                                          (termbind
                                            (nonstrict)
                                            (vardecl
                                              hsh [Maybe (con bytestring)]
                                            )
                                            [
                                              [ findDatumHash [ dToData ds ] ]
                                              ds
                                            ]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              fFoldableNil_cfoldMap
                                                              [(lam a (type) a) Bool]
                                                            }
                                                            TxOut
                                                          }
                                                          [
                                                            { fMonoidSum Bool }
                                                            fAdditiveMonoidBool
                                                          ]
                                                        ]
                                                        (lam
                                                          ds
                                                          TxOut
                                                          [
                                                            {
                                                              [ TxOut_match ds ]
                                                              Bool
                                                            }
                                                            (lam
                                                              ds
                                                              Address
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Maybe (con bytestring)]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Maybe_match
                                                                              (con bytestring)
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          svh
                                                                          (con bytestring)
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            checkBinRel
                                                                                            equalsInteger
                                                                                          ]
                                                                                          ds
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            [
                                                                                              {
                                                                                                Maybe_match
                                                                                                (con bytestring)
                                                                                              }
                                                                                              hsh
                                                                                            ]
                                                                                            (fun Unit Bool)
                                                                                          }
                                                                                          (lam
                                                                                            a
                                                                                            (con bytestring)
                                                                                            (lam
                                                                                              thunk
                                                                                              Unit
                                                                                              [
                                                                                                [
                                                                                                  equalsByteString
                                                                                                  a
                                                                                                ]
                                                                                                svh
                                                                                              ]
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          False
                                                                                        )
                                                                                      ]
                                                                                      Unit
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  False
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        False
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      [
                                                        getContinuingOutputs ctx
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam thunk Unit True)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    {
                                                      (builtin chooseUnit) Bool
                                                    }
                                                    [
                                                      (builtin trace)
                                                      (con
                                                        string
                                                          "Output constraint"
                                                      )
                                                    ]
                                                  ]
                                                  False
                                                ]
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Ordering (type))

                      Ordering_match
                      (vardecl EQ Ordering)
                      (vardecl GT Ordering)
                      (vardecl LT Ordering)
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdData_ccompare
                      (fun (con integer) (fun (con integer) Ordering))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [ [ (builtin equalsInteger) x ] y ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit Ordering)
                              }
                              (lam thunk Unit EQ)
                            ]
                            (lam
                              thunk
                              Unit
                              [
                                [
                                  [
                                    {
                                      [
                                        Bool_match
                                        [
                                          [
                                            [
                                              { (builtin ifThenElse) Bool }
                                              [
                                                [
                                                  (builtin lessThanEqualsInteger
                                                  )
                                                  x
                                                ]
                                                y
                                              ]
                                            ]
                                            True
                                          ]
                                          False
                                        ]
                                      ]
                                      (fun Unit Ordering)
                                    }
                                    (lam thunk Unit LT)
                                  ]
                                  (lam thunk Unit GT)
                                ]
                                Unit
                              ]
                            )
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdInteger_cmax
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [ (builtin lessThanEqualsInteger) x ]
                                          y
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit (con integer))
                              }
                              (lam thunk Unit y)
                            ]
                            (lam thunk Unit x)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdInteger_cmin
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              {
                                [
                                  Bool_match
                                  [
                                    [
                                      [
                                        { (builtin ifThenElse) Bool }
                                        [
                                          [ (builtin lessThanEqualsInteger) x ]
                                          y
                                        ]
                                      ]
                                      True
                                    ]
                                    False
                                  ]
                                ]
                                (fun Unit (con integer))
                              }
                              (lam thunk Unit x)
                            ]
                            (lam thunk Unit y)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin greaterThanEqualsInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      greaterThanInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin greaterThanInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      lessThanInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin lessThanInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (datatypebind
                    (datatype
                      (tyvardecl Ord (fun (type) (type)))
                      (tyvardecl a (type))
                      Ord_match
                      (vardecl
                        CConsOrd
                        (fun [(lam a (type) (fun a (fun a Bool))) a] (fun (fun a (fun a Ordering)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a a)) (fun (fun a (fun a a)) [Ord a]))))))))
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      lessThanEqInteger
                      (fun (con integer) (fun (con integer) Bool))
                    )
                    (lam
                      x
                      (con integer)
                      (lam
                        y
                        (con integer)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin lessThanEqualsInteger) x ] y ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl fOrdPOSIXTime [Ord (con integer)])
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [ { CConsOrd (con integer) } equalsInteger ]
                                  fOrdData_ccompare
                                ]
                                lessThanInteger
                              ]
                              lessThanEqInteger
                            ]
                            greaterThanInteger
                          ]
                          greaterThanEqInteger
                        ]
                        fOrdInteger_cmax
                      ]
                      fOrdInteger_cmin
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      compare
                      (all a (type) (fun [Ord a] (fun a (fun a Ordering))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        v
                        [Ord a]
                        [
                          { [ { Ord_match a } v ] (fun a (fun a Ordering)) }
                          (lam
                            v
                            [(lam a (type) (fun a (fun a Bool))) a]
                            (lam
                              v
                              (fun a (fun a Ordering))
                              (lam
                                v
                                (fun a (fun a Bool))
                                (lam
                                  v
                                  (fun a (fun a Bool))
                                  (lam
                                    v
                                    (fun a (fun a Bool))
                                    (lam
                                      v
                                      (fun a (fun a Bool))
                                      (lam
                                        v
                                        (fun a (fun a a))
                                        (lam v (fun a (fun a a)) v)
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      hull_ccompare
                      (all a (type) (fun [Ord a] (fun [Extended a] (fun [Extended a] Ordering))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          ds
                          [Extended a]
                          (lam
                            ds
                            [Extended a]
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl fail (fun (all a (type) a) Ordering))
                                (lam ds (all a (type) a) (error Ordering))
                              )
                              [
                                [
                                  [
                                    [
                                      {
                                        [ { Extended_match a } ds ]
                                        (fun Unit Ordering)
                                      }
                                      (lam
                                        default_arg0
                                        a
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    [ { Extended_match a } ds ]
                                                    (fun Unit Ordering)
                                                  }
                                                  (lam
                                                    default_arg0
                                                    a
                                                    (lam
                                                      thunk
                                                      Unit
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (strict)
                                                          (vardecl
                                                            fail
                                                            (fun (all a (type) a) Ordering)
                                                          )
                                                          (lam
                                                            ds
                                                            (all a (type) a)
                                                            [
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Extended_match
                                                                          a
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit Ordering)
                                                                    }
                                                                    (lam
                                                                      default_arg0
                                                                      a
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    {
                                                                                      Extended_match
                                                                                      a
                                                                                    }
                                                                                    ds
                                                                                  ]
                                                                                  (fun Unit Ordering)
                                                                                }
                                                                                (lam
                                                                                  l
                                                                                  a
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              [
                                                                                                {
                                                                                                  Extended_match
                                                                                                  a
                                                                                                }
                                                                                                ds
                                                                                              ]
                                                                                              (fun Unit Ordering)
                                                                                            }
                                                                                            (lam
                                                                                              r
                                                                                              a
                                                                                              (lam
                                                                                                thunk
                                                                                                Unit
                                                                                                [
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        compare
                                                                                                        a
                                                                                                      }
                                                                                                      dOrd
                                                                                                    ]
                                                                                                    l
                                                                                                  ]
                                                                                                  r
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              fail
                                                                                              (abs
                                                                                                e
                                                                                                (type)
                                                                                                (error
                                                                                                  e
                                                                                                )
                                                                                              )
                                                                                            ]
                                                                                          )
                                                                                        ]
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            fail
                                                                                            (abs
                                                                                              e
                                                                                              (type)
                                                                                              (error
                                                                                                e
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                        )
                                                                                      ]
                                                                                      Unit
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              GT
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              l
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            {
                                                                                              Extended_match
                                                                                              a
                                                                                            }
                                                                                            ds
                                                                                          ]
                                                                                          (fun Unit Ordering)
                                                                                        }
                                                                                        (lam
                                                                                          r
                                                                                          a
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    compare
                                                                                                    a
                                                                                                  }
                                                                                                  dOrd
                                                                                                ]
                                                                                                l
                                                                                              ]
                                                                                              r
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          fail
                                                                                          (abs
                                                                                            e
                                                                                            (type)
                                                                                            (error
                                                                                              e
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          GT
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk Unit LT
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        default_arg0
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    EQ
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                ]
                                                (lam thunk Unit GT)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      fail
                                                      (fun (all a (type) a) Ordering)
                                                    )
                                                    (lam
                                                      ds
                                                      (all a (type) a)
                                                      [
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Extended_match
                                                                    a
                                                                  }
                                                                  ds
                                                                ]
                                                                (fun Unit Ordering)
                                                              }
                                                              (lam
                                                                default_arg0
                                                                a
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Extended_match
                                                                                a
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit Ordering)
                                                                          }
                                                                          (lam
                                                                            l
                                                                            a
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          {
                                                                                            Extended_match
                                                                                            a
                                                                                          }
                                                                                          ds
                                                                                        ]
                                                                                        (fun Unit Ordering)
                                                                                      }
                                                                                      (lam
                                                                                        r
                                                                                        a
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            [
                                                                                              [
                                                                                                {
                                                                                                  compare
                                                                                                  a
                                                                                                }
                                                                                                dOrd
                                                                                              ]
                                                                                              l
                                                                                            ]
                                                                                            r
                                                                                          ]
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        GT
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        l
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    r
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              compare
                                                                                              a
                                                                                            }
                                                                                            dOrd
                                                                                          ]
                                                                                          l
                                                                                        ]
                                                                                        r
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    GT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit LT)
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit EQ)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    ]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            [
                                              {
                                                [ { Extended_match a } ds ]
                                                (fun Unit Ordering)
                                              }
                                              (lam
                                                default_arg0
                                                a
                                                (lam thunk Unit LT)
                                              )
                                            ]
                                            (lam thunk Unit EQ)
                                          ]
                                          (lam thunk Unit LT)
                                        ]
                                        Unit
                                      ]
                                    )
                                  ]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [
                                        [
                                          [
                                            {
                                              [ { Extended_match a } ds ]
                                              (fun Unit Ordering)
                                            }
                                            (lam
                                              default_arg0
                                              a
                                              (lam
                                                thunk
                                                Unit
                                                (let
                                                  (nonrec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      fail
                                                      (fun (all a (type) a) Ordering)
                                                    )
                                                    (lam
                                                      ds
                                                      (all a (type) a)
                                                      [
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Extended_match
                                                                    a
                                                                  }
                                                                  ds
                                                                ]
                                                                (fun Unit Ordering)
                                                              }
                                                              (lam
                                                                default_arg0
                                                                a
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Extended_match
                                                                                a
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit Ordering)
                                                                          }
                                                                          (lam
                                                                            l
                                                                            a
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          {
                                                                                            Extended_match
                                                                                            a
                                                                                          }
                                                                                          ds
                                                                                        ]
                                                                                        (fun Unit Ordering)
                                                                                      }
                                                                                      (lam
                                                                                        r
                                                                                        a
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            [
                                                                                              [
                                                                                                {
                                                                                                  compare
                                                                                                  a
                                                                                                }
                                                                                                dOrd
                                                                                              ]
                                                                                              l
                                                                                            ]
                                                                                            r
                                                                                          ]
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        GT
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        l
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    r
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              compare
                                                                                              a
                                                                                            }
                                                                                            dOrd
                                                                                          ]
                                                                                          l
                                                                                        ]
                                                                                        r
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    GT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit LT)
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit EQ)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                          (lam thunk Unit GT)
                                        ]
                                        (lam
                                          thunk
                                          Unit
                                          (let
                                            (nonrec)
                                            (termbind
                                              (strict)
                                              (vardecl
                                                fail
                                                (fun (all a (type) a) Ordering)
                                              )
                                              (lam
                                                ds
                                                (all a (type) a)
                                                [
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            { Extended_match a }
                                                            ds
                                                          ]
                                                          (fun Unit Ordering)
                                                        }
                                                        (lam
                                                          default_arg0
                                                          a
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          Extended_match
                                                                          a
                                                                        }
                                                                        ds
                                                                      ]
                                                                      (fun Unit Ordering)
                                                                    }
                                                                    (lam
                                                                      l
                                                                      a
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    {
                                                                                      Extended_match
                                                                                      a
                                                                                    }
                                                                                    ds
                                                                                  ]
                                                                                  (fun Unit Ordering)
                                                                                }
                                                                                (lam
                                                                                  r
                                                                                  a
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            compare
                                                                                            a
                                                                                          }
                                                                                          dOrd
                                                                                        ]
                                                                                        l
                                                                                      ]
                                                                                      r
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                fail
                                                                                (abs
                                                                                  e
                                                                                  (type)
                                                                                  (error
                                                                                    e
                                                                                  )
                                                                                )
                                                                              ]
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      fail
                                                                      (abs
                                                                        e
                                                                        (type)
                                                                        (error e
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk Unit GT
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  l
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              r
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        compare
                                                                                        a
                                                                                      }
                                                                                      dOrd
                                                                                    ]
                                                                                    l
                                                                                  ]
                                                                                  r
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            fail
                                                                            (abs
                                                                              e
                                                                              (type)
                                                                              (error
                                                                                e
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit GT)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    (lam thunk Unit LT)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        { Extended_match a } ds
                                                      ]
                                                      (fun Unit Ordering)
                                                    }
                                                    (lam
                                                      default_arg0
                                                      a
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          fail
                                                          (abs
                                                            e (type) (error e)
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      fail
                                                      (abs e (type) (error e))
                                                    ]
                                                  )
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                fail
                                                                (abs
                                                                  e
                                                                  (type)
                                                                  (error e)
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      ]
                                                      (lam thunk Unit EQ)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      fOrdUpperBound0_c
                      (all a (type) (fun [Ord a] (fun [UpperBound a] (fun [UpperBound a] Bool))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          x
                          [UpperBound a]
                          (lam
                            y
                            [UpperBound a]
                            [
                              { [ { UpperBound_match a } x ] Bool }
                              (lam
                                v
                                [Extended a]
                                (lam
                                  in
                                  Bool
                                  [
                                    { [ { UpperBound_match a } y ] Bool }
                                    (lam
                                      v
                                      [Extended a]
                                      (lam
                                        in
                                        Bool
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Ordering_match
                                                    [
                                                      [
                                                        [
                                                          { hull_ccompare a }
                                                          dOrd
                                                        ]
                                                        v
                                                      ]
                                                      v
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [ Bool_match in ]
                                                          (fun Unit Bool)
                                                        }
                                                        (lam thunk Unit in)
                                                      ]
                                                      (lam thunk Unit True)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              (lam thunk Unit False)
                                            ]
                                            (lam thunk Unit True)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      contains
                      (all a (type) (fun [Ord a] (fun [Interval a] (fun [Interval a] Bool))))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        dOrd
                        [Ord a]
                        (lam
                          ds
                          [Interval a]
                          (lam
                            ds
                            [Interval a]
                            [
                              { [ { Interval_match a } ds ] Bool }
                              (lam
                                l
                                [LowerBound a]
                                (lam
                                  h
                                  [UpperBound a]
                                  [
                                    { [ { Interval_match a } ds ] Bool }
                                    (lam
                                      l
                                      [LowerBound a]
                                      (lam
                                        h
                                        [UpperBound a]
                                        [
                                          { [ { LowerBound_match a } l ] Bool }
                                          (lam
                                            v
                                            [Extended a]
                                            (lam
                                              in
                                              Bool
                                              [
                                                {
                                                  [ { LowerBound_match a } l ]
                                                  Bool
                                                }
                                                (lam
                                                  v
                                                  [Extended a]
                                                  (lam
                                                    in
                                                    Bool
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Ordering_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        hull_ccompare
                                                                        a
                                                                      }
                                                                      dOrd
                                                                    ]
                                                                    v
                                                                  ]
                                                                  v
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        Bool_match
                                                                        in
                                                                      ]
                                                                      (fun Unit Bool)
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                in
                                                                              ]
                                                                              (fun Unit Bool)
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      fOrdUpperBound0_c
                                                                                      a
                                                                                    }
                                                                                    dOrd
                                                                                  ]
                                                                                  h
                                                                                ]
                                                                                h
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            False
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            fOrdUpperBound0_c
                                                                            a
                                                                          }
                                                                          dOrd
                                                                        ]
                                                                        h
                                                                      ]
                                                                      h
                                                                    ]
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          (lam thunk Unit False)
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  fOrdUpperBound0_c
                                                                  a
                                                                }
                                                                dOrd
                                                              ]
                                                              h
                                                            ]
                                                            h
                                                          ]
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl equalsData (fun (con data) (fun (con data) Bool)))
                    (lam
                      d
                      (con data)
                      (lam
                        d
                        (con data)
                        [
                          [
                            [
                              { (builtin ifThenElse) Bool }
                              [ [ (builtin equalsData) d ] d ]
                            ]
                            True
                          ]
                          False
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findDatum
                      (fun (con bytestring) (fun TxInfo [Maybe (con data)]))
                    )
                    (lam
                      dsh
                      (con bytestring)
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe (con data)] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          [[Tuple2 (con bytestring)] (con data)]
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      {
                                                                        Tuple2_match
                                                                        (con bytestring)
                                                                      }
                                                                      (con data)
                                                                    }
                                                                    x
                                                                  ]
                                                                  [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                                }
                                                                (lam
                                                                  dsh
                                                                  (con bytestring)
                                                                  (lam
                                                                    ds
                                                                    (con data)
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        ifThenElse
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        (builtin
                                                                                          equalsByteString
                                                                                        )
                                                                                        dsh
                                                                                      ]
                                                                                      dsh
                                                                                    ]
                                                                                  ]
                                                                                  True
                                                                                ]
                                                                                False
                                                                              ]
                                                                            ]
                                                                            (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                Just
                                                                                [[Tuple2 (con bytestring)] (con data)]
                                                                              }
                                                                              x
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nothing
                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                          }
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit [Maybe (con data)])
                                                    }
                                                    (lam
                                                      a
                                                      [[Tuple2 (con bytestring)] (con data)]
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          { Just (con data) }
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  {
                                                                    Tuple2_match
                                                                    (con bytestring)
                                                                  }
                                                                  (con data)
                                                                }
                                                                a
                                                              ]
                                                              (con data)
                                                            }
                                                            (lam
                                                              ds
                                                              (con bytestring)
                                                              (lam
                                                                b (con data) b
                                                              )
                                                            )
                                                          ]
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    { Nothing (con data) }
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findTxInByTxOutRef
                      (fun TxOutRef (fun TxInfo [Maybe TxInInfo]))
                    )
                    (lam
                      outRef
                      TxOutRef
                      (lam
                        ds
                        TxInfo
                        [
                          { [ TxInfo_match ds ] [Maybe TxInInfo] }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      {
                                                        fFoldableNil_cfoldMap
                                                        [(lam a (type) [Maybe a]) TxInInfo]
                                                      }
                                                      TxInInfo
                                                    }
                                                    { fMonoidFirst TxInInfo }
                                                  ]
                                                  (lam
                                                    x
                                                    TxInInfo
                                                    [
                                                      {
                                                        [ TxInInfo_match x ]
                                                        [Maybe TxInInfo]
                                                      }
                                                      (lam
                                                        ds
                                                        TxOutRef
                                                        (lam
                                                          ds
                                                          TxOut
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    Bool_match
                                                                    [
                                                                      [
                                                                        fEqTxOutRef_c
                                                                        ds
                                                                      ]
                                                                      outRef
                                                                    ]
                                                                  ]
                                                                  (fun Unit [Maybe TxInInfo])
                                                                }
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    {
                                                                      Just
                                                                      TxInInfo
                                                                    }
                                                                    x
                                                                  ]
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                {
                                                                  Nothing
                                                                  TxInInfo
                                                                }
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                  )
                                                ]
                                                ds
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      snd (all a (type) (all b (type) (fun [[Tuple2 a] b] b)))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          ds
                          [[Tuple2 a] b]
                          [
                            { [ { { Tuple2_match a } b } ds ] b }
                            (lam ds a (lam b b b))
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl txSignedBy (fun TxInfo (fun (con bytestring) Bool))
                    )
                    (lam
                      ds
                      TxInfo
                      (lam
                        k
                        (con bytestring)
                        [
                          { [ TxInfo_match ds ] Bool }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        {
                                                          Maybe_match
                                                          (con bytestring)
                                                        }
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) (con bytestring)]
                                                                }
                                                                (con bytestring)
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                (con bytestring)
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              (con bytestring)
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      [
                                                                        Bool_match
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                (builtin
                                                                                  ifThenElse
                                                                                )
                                                                                Bool
                                                                              }
                                                                              [
                                                                                [
                                                                                  (builtin
                                                                                    equalsByteString
                                                                                  )
                                                                                  k
                                                                                ]
                                                                                x
                                                                              ]
                                                                            ]
                                                                            True
                                                                          ]
                                                                          False
                                                                        ]
                                                                      ]
                                                                      (fun Unit [Maybe (con bytestring)])
                                                                    }
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        {
                                                                          Just
                                                                          (con bytestring)
                                                                        }
                                                                        x
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    {
                                                                      Nothing
                                                                      (con bytestring)
                                                                    }
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam
                                                      ds
                                                      (con bytestring)
                                                      (lam thunk Unit True)
                                                    )
                                                  ]
                                                  (lam thunk Unit False)
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valueOf
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun (con bytestring) (fun (con bytestring) (con integer))))
                    )
                    (lam
                      ds
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        cur
                        (con bytestring)
                        (lam
                          tn
                          (con bytestring)
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl
                                j
                                (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)] (con integer))
                              )
                              (lam
                                i
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                (let
                                  (rec)
                                  (termbind
                                    (strict)
                                    (vardecl
                                      go
                                      (fun [List [[Tuple2 (con bytestring)] (con integer)]] (con integer))
                                    )
                                    (lam
                                      ds
                                      [List [[Tuple2 (con bytestring)] (con integer)]]
                                      [
                                        [
                                          {
                                            [
                                              {
                                                Nil_match
                                                [[Tuple2 (con bytestring)] (con integer)]
                                              }
                                              ds
                                            ]
                                            (con integer)
                                          }
                                          (con integer 0)
                                        ]
                                        (lam
                                          ds
                                          [[Tuple2 (con bytestring)] (con integer)]
                                          (lam
                                            xs
                                            [List [[Tuple2 (con bytestring)] (con integer)]]
                                            [
                                              {
                                                [
                                                  {
                                                    {
                                                      Tuple2_match
                                                      (con bytestring)
                                                    }
                                                    (con integer)
                                                  }
                                                  ds
                                                ]
                                                (con integer)
                                              }
                                              (lam
                                                c
                                                (con bytestring)
                                                (lam
                                                  i
                                                  (con integer)
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            Bool_match
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    (builtin
                                                                      ifThenElse
                                                                    )
                                                                    Bool
                                                                  }
                                                                  [
                                                                    [
                                                                      (builtin
                                                                        equalsByteString
                                                                      )
                                                                      c
                                                                    ]
                                                                    tn
                                                                  ]
                                                                ]
                                                                True
                                                              ]
                                                              False
                                                            ]
                                                          ]
                                                          (fun Unit (con integer))
                                                        }
                                                        (lam thunk Unit i)
                                                      ]
                                                      (lam thunk Unit [ go xs ])
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      ]
                                    )
                                  )
                                  [ go i ]
                                )
                              )
                            )
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl
                                  go
                                  (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]] (con integer))
                                )
                                (lam
                                  ds
                                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          }
                                          ds
                                        ]
                                        (con integer)
                                      }
                                      (con integer 0)
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                        [
                                          {
                                            [
                                              {
                                                {
                                                  Tuple2_match (con bytestring)
                                                }
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                              }
                                              ds
                                            ]
                                            (con integer)
                                          }
                                          (lam
                                            c
                                            (con bytestring)
                                            (lam
                                              i
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                [
                                                                  (builtin
                                                                    equalsByteString
                                                                  )
                                                                  c
                                                                ]
                                                                cur
                                                              ]
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      ]
                                                      (fun Unit (con integer))
                                                    }
                                                    (lam thunk Unit [ j i ])
                                                  ]
                                                  (lam thunk Unit [ go xs ])
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                              [ go ds ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      foldr
                      (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          k
                          (fun a (fun b b))
                          (lam
                            z
                            b
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl go (fun [List a] b))
                                (lam
                                  ds
                                  [List a]
                                  [
                                    [
                                      [
                                        { [ { Nil_match a } ds ] (fun Unit b) }
                                        (lam thunk Unit z)
                                      ]
                                      (lam
                                        y
                                        a
                                        (lam
                                          ys
                                          [List a]
                                          (lam thunk Unit [ [ k y ] [ go ys ] ])
                                        )
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              )
                              go
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      pubKeyOutputsAt
                      (fun (con bytestring) (fun TxInfo [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]))
                    )
                    (lam
                      pk
                      (con bytestring)
                      (lam
                        p
                        TxInfo
                        [
                          {
                            [ TxInfo_match p ]
                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                          }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      { foldr TxOut }
                                                      [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                    }
                                                    (lam
                                                      e
                                                      TxOut
                                                      (lam
                                                        xs
                                                        [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                        [
                                                          {
                                                            [ TxOut_match e ]
                                                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                          }
                                                          (lam
                                                            ds
                                                            Address
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [Maybe (con bytestring)]
                                                                [
                                                                  {
                                                                    [
                                                                      Address_match
                                                                      ds
                                                                    ]
                                                                    [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                  }
                                                                  (lam
                                                                    ds
                                                                    Credential
                                                                    (lam
                                                                      ds
                                                                      [Maybe StakingCredential]
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Credential_match
                                                                              ds
                                                                            ]
                                                                            [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                          }
                                                                          (lam
                                                                            pk
                                                                            (con bytestring)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              (builtin
                                                                                                ifThenElse
                                                                                              )
                                                                                              Bool
                                                                                            }
                                                                                            [
                                                                                              [
                                                                                                (builtin
                                                                                                  equalsByteString
                                                                                                )
                                                                                                pk
                                                                                              ]
                                                                                              pk
                                                                                            ]
                                                                                          ]
                                                                                          True
                                                                                        ]
                                                                                        False
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          Cons
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        }
                                                                                        ds
                                                                                      ]
                                                                                      xs
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  xs
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          ipv
                                                                          (con bytestring)
                                                                          xs
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  {
                                                    Nil
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  }
                                                ]
                                                ds
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      addInteger
                      (fun (con integer) (fun (con integer) (con integer)))
                    )
                    (lam
                      x
                      (con integer)
                      (lam y (con integer) [ [ (builtin addInteger) x ] y ])
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      unionWith
                      (fun (fun (con integer) (fun (con integer) (con integer))) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])))
                    )
                    (lam
                      f
                      (fun (con integer) (fun (con integer) (con integer)))
                      (lam
                        ls
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          rs
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                              )
                              (lam
                                ds
                                [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                          }
                                          ds
                                        ]
                                        (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                      }
                                      (lam
                                        thunk
                                        Unit
                                        {
                                          Nil
                                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        }
                                      )
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                }
                                                ds
                                              ]
                                              [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                            }
                                            (lam
                                              c
                                              (con bytestring)
                                              (lam
                                                i
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                (let
                                                  (rec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      go
                                                      (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] [List [[Tuple2 (con bytestring)] (con integer)]])
                                                    )
                                                    (lam
                                                      ds
                                                      [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Nil_match
                                                                  [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit [List [[Tuple2 (con bytestring)] (con integer)]])
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              {
                                                                Nil
                                                                [[Tuple2 (con bytestring)] (con integer)]
                                                              }
                                                            )
                                                          ]
                                                          (lam
                                                            ds
                                                            [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                            (lam
                                                              xs
                                                              [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          (con bytestring)
                                                                        }
                                                                        [[These (con integer)] (con integer)]
                                                                      }
                                                                      ds
                                                                    ]
                                                                    [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                  }
                                                                  (lam
                                                                    c
                                                                    (con bytestring)
                                                                    (lam
                                                                      i
                                                                      [[These (con integer)] (con integer)]
                                                                      [
                                                                        [
                                                                          {
                                                                            Cons
                                                                            [[Tuple2 (con bytestring)] (con integer)]
                                                                          }
                                                                          [
                                                                            [
                                                                              {
                                                                                {
                                                                                  Tuple2
                                                                                  (con bytestring)
                                                                                }
                                                                                (con integer)
                                                                              }
                                                                              c
                                                                            ]
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          These_match
                                                                                          (con integer)
                                                                                        }
                                                                                        (con integer)
                                                                                      }
                                                                                      i
                                                                                    ]
                                                                                    (con integer)
                                                                                  }
                                                                                  (lam
                                                                                    b
                                                                                    (con integer)
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        (con
                                                                                          integer
                                                                                            0
                                                                                        )
                                                                                      ]
                                                                                      b
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  a
                                                                                  (con integer)
                                                                                  (lam
                                                                                    b
                                                                                    (con integer)
                                                                                    [
                                                                                      [
                                                                                        f
                                                                                        a
                                                                                      ]
                                                                                      b
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                a
                                                                                (con integer)
                                                                                [
                                                                                  [
                                                                                    f
                                                                                    a
                                                                                  ]
                                                                                  (con
                                                                                    integer
                                                                                      0
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                          ]
                                                                        ]
                                                                        [
                                                                          go xs
                                                                        ]
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      {
                                                        Cons
                                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      }
                                                      [
                                                        [
                                                          {
                                                            {
                                                              Tuple2
                                                              (con bytestring)
                                                            }
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                          }
                                                          c
                                                        ]
                                                        [ go i ]
                                                      ]
                                                    ]
                                                    [ go xs ]
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                            [ go [ [ unionVal ls ] rs ] ]
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fMonoidValue_c
                      (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                    )
                    [ unionWith addInteger ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valuePaidTo
                      (fun TxInfo (fun (con bytestring) [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                    )
                    (lam
                      ptx
                      TxInfo
                      (lam
                        pkh
                        (con bytestring)
                        [
                          [
                            [
                              {
                                {
                                  foldr
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                }
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              }
                              fMonoidValue_c
                            ]
                            {
                              Nil
                              [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            }
                          ]
                          [ [ pubKeyOutputsAt pkh ] ptx ]
                        ]
                      )
                    )
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      fMonoidValue
                      [Monoid [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                    )
                    [
                      [
                        {
                          CConsMonoid
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        fMonoidValue_c
                      ]
                      {
                        Nil
                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      }
                    ]
                  )
                  (termbind
                    (strict)
                    (vardecl
                      txOutValue
                      (fun TxOut [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                    )
                    (lam
                      ds
                      TxOut
                      [
                        {
                          [ TxOut_match ds ]
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        (lam
                          ds
                          Address
                          (lam
                            ds
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (lam ds [Maybe (con bytestring)] ds)
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      valueProduced
                      (fun TxInfo [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                    )
                    (lam
                      x
                      TxInfo
                      [
                        {
                          [ TxInfo_match x ]
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                        (lam
                          ds
                          [List TxInInfo]
                          (lam
                            ds
                            [List TxOut]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [List DCert]
                                  (lam
                                    ds
                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                    (lam
                                      ds
                                      [Interval (con integer)]
                                      (lam
                                        ds
                                        [List (con bytestring)]
                                        (lam
                                          ds
                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                          (lam
                                            ds
                                            (con bytestring)
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      fFoldableNil_cfoldMap
                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                    }
                                                    TxOut
                                                  }
                                                  fMonoidValue
                                                ]
                                                txOutValue
                                              ]
                                              ds
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkTxConstraint
                      (fun ScriptContext (fun TxConstraint Bool))
                    )
                    (lam
                      ds
                      ScriptContext
                      [
                        { [ ScriptContext_match ds ] (fun TxConstraint Bool) }
                        (lam
                          ds
                          TxInfo
                          (lam
                            ds
                            ScriptPurpose
                            (lam
                              ds
                              TxConstraint
                              [
                                [
                                  [
                                    [
                                      [
                                        [
                                          [
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      [ TxConstraint_match ds ]
                                                      Bool
                                                    }
                                                    (lam
                                                      pubKey
                                                      (con bytestring)
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    txSignedBy
                                                                    ds
                                                                  ]
                                                                  pubKey
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam thunk Unit True
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    chooseUnit
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  (builtin trace
                                                                  )
                                                                  (con
                                                                    string
                                                                      "Missing signature"
                                                                  )
                                                                ]
                                                              ]
                                                              False
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  ]
                                                  (lam
                                                    dvh
                                                    (con bytestring)
                                                    (lam
                                                      dv
                                                      (con data)
                                                      (let
                                                        (nonrec)
                                                        (termbind
                                                          (nonstrict)
                                                          (vardecl j Bool)
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  chooseUnit
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                (builtin trace)
                                                                (con
                                                                  string
                                                                    "MustHashDatum"
                                                                )
                                                              ]
                                                            ]
                                                            False
                                                          ]
                                                        )
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Maybe_match
                                                                    (con data)
                                                                  }
                                                                  [
                                                                    [
                                                                      findDatum
                                                                      dvh
                                                                    ]
                                                                    ds
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                a
                                                                (con data)
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            Bool_match
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    (builtin
                                                                                      ifThenElse
                                                                                    )
                                                                                    Bool
                                                                                  }
                                                                                  [
                                                                                    [
                                                                                      (builtin
                                                                                        equalsData
                                                                                      )
                                                                                      a
                                                                                    ]
                                                                                    dv
                                                                                  ]
                                                                                ]
                                                                                True
                                                                              ]
                                                                              False
                                                                            ]
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          True
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        j
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                            (lam thunk Unit j)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                ]
                                                (lam
                                                  dv
                                                  (con data)
                                                  [
                                                    { [ TxInfo_match ds ] Bool }
                                                    (lam
                                                      ds
                                                      [List TxInInfo]
                                                      (lam
                                                        ds
                                                        [List TxOut]
                                                        (lam
                                                          ds
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [List DCert]
                                                              (lam
                                                                ds
                                                                [List [[Tuple2 StakingCredential] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Interval (con integer)]
                                                                  (lam
                                                                    ds
                                                                    [List (con bytestring)]
                                                                    (lam
                                                                      ds
                                                                      [List [[Tuple2 (con bytestring)] (con data)]]
                                                                      (lam
                                                                        ds
                                                                        (con bytestring)
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  Bool_match
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            fFoldableNil_cfoldMap
                                                                                            [(lam a (type) a) Bool]
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                        [
                                                                                          {
                                                                                            fMonoidSum
                                                                                            Bool
                                                                                          }
                                                                                          fAdditiveMonoidBool
                                                                                        ]
                                                                                      ]
                                                                                      [
                                                                                        equalsData
                                                                                        dv
                                                                                      ]
                                                                                    ]
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            fFunctorNil_cfmap
                                                                                            [[Tuple2 (con bytestring)] (con data)]
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                        {
                                                                                          {
                                                                                            snd
                                                                                            (con bytestring)
                                                                                          }
                                                                                          (con data)
                                                                                        }
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                                (fun Unit Bool)
                                                                              }
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                True
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  {
                                                                                    (builtin
                                                                                      chooseUnit
                                                                                    )
                                                                                    Bool
                                                                                  }
                                                                                  [
                                                                                    (builtin
                                                                                      trace
                                                                                    )
                                                                                    (con
                                                                                      string
                                                                                        "Missing datum"
                                                                                    )
                                                                                  ]
                                                                                ]
                                                                                False
                                                                              ]
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              ]
                                              (lam
                                                mps
                                                (con bytestring)
                                                (lam
                                                  ds
                                                  (con data)
                                                  (lam
                                                    tn
                                                    (con bytestring)
                                                    (lam
                                                      v
                                                      (con integer)
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                Bool_match
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        (builtin
                                                                          ifThenElse
                                                                        )
                                                                        Bool
                                                                      }
                                                                      [
                                                                        [
                                                                          (builtin
                                                                            equalsInteger
                                                                          )
                                                                          [
                                                                            [
                                                                              [
                                                                                valueOf
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      TxInfo_match
                                                                                      ds
                                                                                    ]
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  (lam
                                                                                    ds
                                                                                    [List TxInInfo]
                                                                                    (lam
                                                                                      ds
                                                                                      [List TxOut]
                                                                                      (lam
                                                                                        ds
                                                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        (lam
                                                                                          ds
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          (lam
                                                                                            ds
                                                                                            [List DCert]
                                                                                            (lam
                                                                                              ds
                                                                                              [List [[Tuple2 StakingCredential] (con integer)]]
                                                                                              (lam
                                                                                                ds
                                                                                                [Interval (con integer)]
                                                                                                (lam
                                                                                                  ds
                                                                                                  [List (con bytestring)]
                                                                                                  (lam
                                                                                                    ds
                                                                                                    [List [[Tuple2 (con bytestring)] (con data)]]
                                                                                                    (lam
                                                                                                      ds
                                                                                                      (con bytestring)
                                                                                                      ds
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              ]
                                                                              mps
                                                                            ]
                                                                            tn
                                                                          ]
                                                                        ]
                                                                        v
                                                                      ]
                                                                    ]
                                                                    True
                                                                  ]
                                                                  False
                                                                ]
                                                              ]
                                                              (fun Unit Bool)
                                                            }
                                                            (lam thunk Unit True
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    chooseUnit
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  (builtin trace
                                                                  )
                                                                  (con
                                                                    string
                                                                      "Value minted not OK"
                                                                  )
                                                                ]
                                                              ]
                                                              False
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                            (lam
                                              vlh
                                              (con bytestring)
                                              (lam
                                                dv
                                                (con data)
                                                (lam
                                                  vl
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl
                                                        hsh
                                                        [Maybe (con bytestring)]
                                                      )
                                                      [
                                                        [ findDatumHash dv ] ds
                                                      ]
                                                    )
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl addr Credential)
                                                      [ ScriptCredential vlh ]
                                                    )
                                                    (termbind
                                                      (nonstrict)
                                                      (vardecl addr Address)
                                                      [
                                                        [ Address addr ]
                                                        {
                                                          Nothing
                                                          StakingCredential
                                                        }
                                                      ]
                                                    )
                                                    [
                                                      {
                                                        [ TxInfo_match ds ] Bool
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    Bool_match
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              fFoldableNil_cfoldMap
                                                                                              [(lam a (type) a) Bool]
                                                                                            }
                                                                                            TxOut
                                                                                          }
                                                                                          [
                                                                                            {
                                                                                              fMonoidSum
                                                                                              Bool
                                                                                            }
                                                                                            fAdditiveMonoidBool
                                                                                          ]
                                                                                        ]
                                                                                        (lam
                                                                                          ds
                                                                                          TxOut
                                                                                          [
                                                                                            {
                                                                                              [
                                                                                                TxOut_match
                                                                                                ds
                                                                                              ]
                                                                                              Bool
                                                                                            }
                                                                                            (lam
                                                                                              ds
                                                                                              Address
                                                                                              (lam
                                                                                                ds
                                                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                                (lam
                                                                                                  ds
                                                                                                  [Maybe (con bytestring)]
                                                                                                  [
                                                                                                    [
                                                                                                      [
                                                                                                        {
                                                                                                          [
                                                                                                            {
                                                                                                              Maybe_match
                                                                                                              (con bytestring)
                                                                                                            }
                                                                                                            ds
                                                                                                          ]
                                                                                                          (fun Unit Bool)
                                                                                                        }
                                                                                                        (lam
                                                                                                          svh
                                                                                                          (con bytestring)
                                                                                                          (lam
                                                                                                            thunk
                                                                                                            Unit
                                                                                                            [
                                                                                                              [
                                                                                                                [
                                                                                                                  {
                                                                                                                    [
                                                                                                                      Bool_match
                                                                                                                      [
                                                                                                                        [
                                                                                                                          [
                                                                                                                            checkBinRel
                                                                                                                            equalsInteger
                                                                                                                          ]
                                                                                                                          ds
                                                                                                                        ]
                                                                                                                        vl
                                                                                                                      ]
                                                                                                                    ]
                                                                                                                    (fun Unit Bool)
                                                                                                                  }
                                                                                                                  (lam
                                                                                                                    thunk
                                                                                                                    Unit
                                                                                                                    [
                                                                                                                      [
                                                                                                                        [
                                                                                                                          {
                                                                                                                            [
                                                                                                                              {
                                                                                                                                Maybe_match
                                                                                                                                (con bytestring)
                                                                                                                              }
                                                                                                                              hsh
                                                                                                                            ]
                                                                                                                            (fun Unit Bool)
                                                                                                                          }
                                                                                                                          (lam
                                                                                                                            a
                                                                                                                            (con bytestring)
                                                                                                                            (lam
                                                                                                                              thunk
                                                                                                                              Unit
                                                                                                                              [
                                                                                                                                [
                                                                                                                                  [
                                                                                                                                    {
                                                                                                                                      [
                                                                                                                                        Bool_match
                                                                                                                                        [
                                                                                                                                          [
                                                                                                                                            [
                                                                                                                                              {
                                                                                                                                                (builtin
                                                                                                                                                  ifThenElse
                                                                                                                                                )
                                                                                                                                                Bool
                                                                                                                                              }
                                                                                                                                              [
                                                                                                                                                [
                                                                                                                                                  (builtin
                                                                                                                                                    equalsByteString
                                                                                                                                                  )
                                                                                                                                                  a
                                                                                                                                                ]
                                                                                                                                                svh
                                                                                                                                              ]
                                                                                                                                            ]
                                                                                                                                            True
                                                                                                                                          ]
                                                                                                                                          False
                                                                                                                                        ]
                                                                                                                                      ]
                                                                                                                                      (fun Unit Bool)
                                                                                                                                    }
                                                                                                                                    (lam
                                                                                                                                      thunk
                                                                                                                                      Unit
                                                                                                                                      [
                                                                                                                                        [
                                                                                                                                          fEqAddress_c
                                                                                                                                          ds
                                                                                                                                        ]
                                                                                                                                        addr
                                                                                                                                      ]
                                                                                                                                    )
                                                                                                                                  ]
                                                                                                                                  (lam
                                                                                                                                    thunk
                                                                                                                                    Unit
                                                                                                                                    False
                                                                                                                                  )
                                                                                                                                ]
                                                                                                                                Unit
                                                                                                                              ]
                                                                                                                            )
                                                                                                                          )
                                                                                                                        ]
                                                                                                                        (lam
                                                                                                                          thunk
                                                                                                                          Unit
                                                                                                                          False
                                                                                                                        )
                                                                                                                      ]
                                                                                                                      Unit
                                                                                                                    ]
                                                                                                                  )
                                                                                                                ]
                                                                                                                (lam
                                                                                                                  thunk
                                                                                                                  Unit
                                                                                                                  False
                                                                                                                )
                                                                                                              ]
                                                                                                              Unit
                                                                                                            ]
                                                                                                          )
                                                                                                        )
                                                                                                      ]
                                                                                                      (lam
                                                                                                        thunk
                                                                                                        Unit
                                                                                                        False
                                                                                                      )
                                                                                                    ]
                                                                                                    Unit
                                                                                                  ]
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                        )
                                                                                      ]
                                                                                      ds
                                                                                    ]
                                                                                  ]
                                                                                  (fun Unit Bool)
                                                                                }
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  True
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        chooseUnit
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      (builtin
                                                                                        trace
                                                                                      )
                                                                                      (con
                                                                                        string
                                                                                          "MustPayToOtherScript"
                                                                                      )
                                                                                    ]
                                                                                  ]
                                                                                  False
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            )
                                          ]
                                          (lam
                                            pk
                                            (con bytestring)
                                            (lam
                                              vl
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              checkBinRel
                                                              lessThanEqInteger
                                                            ]
                                                            vl
                                                          ]
                                                          [
                                                            [ valuePaidTo ds ]
                                                            pk
                                                          ]
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam thunk Unit True)
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        {
                                                          (builtin chooseUnit)
                                                          Bool
                                                        }
                                                        [
                                                          (builtin trace)
                                                          (con
                                                            string
                                                              "MustPayToPubKey"
                                                          )
                                                        ]
                                                      ]
                                                      False
                                                    ]
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                        (lam
                                          vl
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          checkBinRel
                                                          lessThanEqInteger
                                                        ]
                                                        vl
                                                      ]
                                                      [ valueProduced ds ]
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam thunk Unit True)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    {
                                                      (builtin chooseUnit) Bool
                                                    }
                                                    [
                                                      (builtin trace)
                                                      (con
                                                        string
                                                          "Produced value not OK"
                                                      )
                                                    ]
                                                  ]
                                                  False
                                                ]
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      ]
                                      (lam
                                        vl
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        checkBinRel
                                                        lessThanEqInteger
                                                      ]
                                                      vl
                                                    ]
                                                    [
                                                      {
                                                        [ TxInfo_match ds ]
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    fFoldableNil_cfoldMap
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  TxInInfo
                                                                                }
                                                                                fMonoidValue
                                                                              ]
                                                                              (lam
                                                                                x
                                                                                TxInInfo
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      TxInInfo_match
                                                                                      x
                                                                                    ]
                                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                  }
                                                                                  (lam
                                                                                    ds
                                                                                    TxOutRef
                                                                                    (lam
                                                                                      ds
                                                                                      TxOut
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            TxOut_match
                                                                                            ds
                                                                                          ]
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        }
                                                                                        (lam
                                                                                          ds
                                                                                          Address
                                                                                          (lam
                                                                                            ds
                                                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                            (lam
                                                                                              ds
                                                                                              [Maybe (con bytestring)]
                                                                                              ds
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            ds
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam thunk Unit True)
                                            ]
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  { (builtin chooseUnit) Bool }
                                                  [
                                                    (builtin trace)
                                                    (con
                                                      string
                                                        "Spent value not OK"
                                                    )
                                                  ]
                                                ]
                                                False
                                              ]
                                            )
                                          ]
                                          Unit
                                        ]
                                      )
                                    ]
                                    (lam
                                      txOutRef
                                      TxOutRef
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl j Bool)
                                          [
                                            [
                                              { (builtin chooseUnit) Bool }
                                              [
                                                (builtin trace)
                                                (con
                                                  string
                                                    "Public key output not spent"
                                                )
                                              ]
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  { Maybe_match TxInInfo }
                                                  [
                                                    [
                                                      findTxInByTxOutRef
                                                      txOutRef
                                                    ]
                                                    ds
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                a
                                                TxInInfo
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    {
                                                      [ TxInInfo_match a ] Bool
                                                    }
                                                    (lam
                                                      ds
                                                      TxOutRef
                                                      (lam
                                                        ds
                                                        TxOut
                                                        [
                                                          {
                                                            [ TxOut_match ds ]
                                                            Bool
                                                          }
                                                          (lam
                                                            ds
                                                            Address
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [Maybe (con bytestring)]
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Maybe_match
                                                                            (con bytestring)
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Bool)
                                                                      }
                                                                      (lam
                                                                        ds
                                                                        (con bytestring)
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          j
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      True
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            ]
                                            (lam thunk Unit j)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam
                                    txOutRef
                                    TxOutRef
                                    (lam
                                      ds
                                      (con data)
                                      [
                                        [
                                          [
                                            {
                                              [
                                                { Maybe_match TxInInfo }
                                                [
                                                  [
                                                    findTxInByTxOutRef txOutRef
                                                  ]
                                                  ds
                                                ]
                                              ]
                                              (fun Unit Bool)
                                            }
                                            (lam
                                              ds TxInInfo (lam thunk Unit True)
                                            )
                                          ]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                { (builtin chooseUnit) Bool }
                                                [
                                                  (builtin trace)
                                                  (con
                                                    string
                                                      "Script output not spent"
                                                  )
                                                ]
                                              ]
                                              False
                                            ]
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                  )
                                ]
                                (lam
                                  interval
                                  [Interval (con integer)]
                                  [
                                    [
                                      [
                                        {
                                          [
                                            Bool_match
                                            [
                                              [
                                                [
                                                  { contains (con integer) }
                                                  fOrdPOSIXTime
                                                ]
                                                interval
                                              ]
                                              [
                                                {
                                                  [ TxInfo_match ds ]
                                                  [Interval (con integer)]
                                                }
                                                (lam
                                                  ds
                                                  [List TxInInfo]
                                                  (lam
                                                    ds
                                                    [List TxOut]
                                                    (lam
                                                      ds
                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      (lam
                                                        ds
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        (lam
                                                          ds
                                                          [List DCert]
                                                          (lam
                                                            ds
                                                            [List [[Tuple2 StakingCredential] (con integer)]]
                                                            (lam
                                                              ds
                                                              [Interval (con integer)]
                                                              (lam
                                                                ds
                                                                [List (con bytestring)]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 (con bytestring)] (con data)]]
                                                                  (lam
                                                                    ds
                                                                    (con bytestring)
                                                                    ds
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                            ]
                                          ]
                                          (fun Unit Bool)
                                        }
                                        (lam thunk Unit True)
                                      ]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            { (builtin chooseUnit) Bool }
                                            [
                                              (builtin trace)
                                              (con
                                                string
                                                  "Wrong validation interval"
                                              )
                                            ]
                                          ]
                                          False
                                        ]
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      checkScriptContext
                      (all i (type) (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun [[TxConstraints i] o] (fun ScriptContext Bool)))))
                    )
                    (abs
                      i
                      (type)
                      (abs
                        o
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) o]
                          (lam
                            ds
                            [[TxConstraints i] o]
                            (lam
                              ptx
                              ScriptContext
                              [
                                { [ { { TxConstraints_match i } o } ds ] Bool }
                                (lam
                                  ds
                                  [List TxConstraint]
                                  (lam
                                    ds
                                    [List [InputConstraint i]]
                                    (lam
                                      ds
                                      [List [OutputConstraint o]]
                                      (let
                                        (nonrec)
                                        (termbind
                                          (nonstrict)
                                          (vardecl j Bool)
                                          [
                                            [
                                              { (builtin chooseUnit) Bool }
                                              [
                                                (builtin trace)
                                                (con
                                                  string
                                                    "checkScriptContext failed"
                                                )
                                              ]
                                            ]
                                            False
                                          ]
                                        )
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  Bool_match
                                                  [
                                                    [
                                                      [
                                                        {
                                                          {
                                                            fFoldableNil_cfoldMap
                                                            [(lam a (type) a) Bool]
                                                          }
                                                          TxConstraint
                                                        }
                                                        [
                                                          {
                                                            fMonoidProduct Bool
                                                          }
                                                          fMultiplicativeMonoidBool
                                                        ]
                                                      ]
                                                      [ checkTxConstraint ptx ]
                                                    ]
                                                    ds
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) a) Bool]
                                                                  }
                                                                  [InputConstraint i]
                                                                }
                                                                [
                                                                  {
                                                                    fMonoidProduct
                                                                    Bool
                                                                  }
                                                                  fMultiplicativeMonoidBool
                                                                ]
                                                              ]
                                                              [
                                                                {
                                                                  checkOwnInputConstraint
                                                                  i
                                                                }
                                                                ptx
                                                              ]
                                                            ]
                                                            ds
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Bool_match
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          {
                                                                            fFoldableNil_cfoldMap
                                                                            [(lam a (type) a) Bool]
                                                                          }
                                                                          [OutputConstraint o]
                                                                        }
                                                                        [
                                                                          {
                                                                            fMonoidProduct
                                                                            Bool
                                                                          }
                                                                          fMultiplicativeMonoidBool
                                                                        ]
                                                                      ]
                                                                      [
                                                                        [
                                                                          {
                                                                            checkOwnOutputConstraint
                                                                            o
                                                                          }
                                                                          dToData
                                                                        ]
                                                                        ptx
                                                                      ]
                                                                    ]
                                                                    ds
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk Unit True
                                                              )
                                                            ]
                                                            (lam thunk Unit j)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    (lam thunk Unit j)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            ]
                                            (lam thunk Unit j)
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      build
                      (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
                    )
                    (abs
                      a
                      (type)
                      (lam
                        g
                        (all b (type) (fun (fun a (fun b b)) (fun b b)))
                        [ [ { g [List a] } { Cons a } ] { Nil a } ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      findContractInput
                      (fun (con bytestring) (fun ScriptContext [Maybe TxOutRef]))
                    )
                    (lam
                      script
                      (con bytestring)
                      (lam
                        ctx
                        ScriptContext
                        (let
                          (nonrec)
                          (termbind
                            (strict)
                            (vardecl predicate (fun TxInInfo Bool))
                            (lam
                              x
                              TxInInfo
                              [
                                {
                                  [
                                    Address_match
                                    [
                                      {
                                        [
                                          TxOut_match
                                          [
                                            { [ TxInInfo_match x ] TxOut }
                                            (lam ds TxOutRef (lam ds TxOut ds))
                                          ]
                                        ]
                                        Address
                                      }
                                      (lam
                                        ds
                                        Address
                                        (lam
                                          ds
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          (lam ds [Maybe (con bytestring)] ds)
                                        )
                                      )
                                    ]
                                  ]
                                  Bool
                                }
                                (lam
                                  ds
                                  Credential
                                  (lam
                                    ds
                                    [Maybe StakingCredential]
                                    [
                                      [
                                        { [ Credential_match ds ] Bool }
                                        (lam ipv (con bytestring) False)
                                      ]
                                      (lam
                                        script
                                        (con bytestring)
                                        [ [ equalsByteString script ] script ]
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                          (termbind
                            (strict)
                            (vardecl
                              f
                              (fun TxInInfo (fun [List [[Tuple2 TxOutRef] TxOut]] [List [[Tuple2 TxOutRef] TxOut]]))
                            )
                            (lam
                              e
                              TxInInfo
                              (lam
                                xs
                                [List [[Tuple2 TxOutRef] TxOut]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Maybe_match
                                            [[Tuple2 TxOutRef] TxOut]
                                          }
                                          [
                                            [
                                              [
                                                {
                                                  [ Bool_match [ predicate e ] ]
                                                  (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                                                }
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    {
                                                      Just
                                                      [[Tuple2 TxOutRef] TxOut]
                                                    }
                                                    [
                                                      [
                                                        {
                                                          { Tuple2 TxOutRef }
                                                          TxOut
                                                        }
                                                        [
                                                          {
                                                            [ TxInInfo_match e ]
                                                            TxOutRef
                                                          }
                                                          (lam
                                                            ds
                                                            TxOutRef
                                                            (lam ds TxOut ds)
                                                          )
                                                        ]
                                                      ]
                                                      [
                                                        {
                                                          [ TxInInfo_match e ]
                                                          TxOut
                                                        }
                                                        (lam
                                                          ds
                                                          TxOutRef
                                                          (lam ds TxOut ds)
                                                        )
                                                      ]
                                                    ]
                                                  ]
                                                )
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                {
                                                  Nothing
                                                  [[Tuple2 TxOutRef] TxOut]
                                                }
                                              )
                                            ]
                                            Unit
                                          ]
                                        ]
                                        (fun Unit [List [[Tuple2 TxOutRef] TxOut]])
                                      }
                                      (lam
                                        e
                                        [[Tuple2 TxOutRef] TxOut]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              { Cons [[Tuple2 TxOutRef] TxOut] }
                                              e
                                            ]
                                            xs
                                          ]
                                        )
                                      )
                                    ]
                                    (lam thunk Unit xs)
                                  ]
                                  Unit
                                ]
                              )
                            )
                          )
                          [
                            [
                              [
                                {
                                  [
                                    { Nil_match [[Tuple2 TxOutRef] TxOut] }
                                    [
                                      [
                                        [
                                          {
                                            { foldr TxInInfo }
                                            [List [[Tuple2 TxOutRef] TxOut]]
                                          }
                                          f
                                        ]
                                        { Nil [[Tuple2 TxOutRef] TxOut] }
                                      ]
                                      [
                                        {
                                          [
                                            TxInfo_match
                                            [
                                              {
                                                [ ScriptContext_match ctx ]
                                                TxInfo
                                              }
                                              (lam
                                                ds
                                                TxInfo
                                                (lam ds ScriptPurpose ds)
                                              )
                                            ]
                                          ]
                                          [List TxInInfo]
                                        }
                                        (lam
                                          ds
                                          [List TxInInfo]
                                          (lam
                                            ds
                                            [List TxOut]
                                            (lam
                                              ds
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              (lam
                                                ds
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                (lam
                                                  ds
                                                  [List DCert]
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                    (lam
                                                      ds
                                                      [Interval (con integer)]
                                                      (lam
                                                        ds
                                                        [List (con bytestring)]
                                                        (lam
                                                          ds
                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                          (lam
                                                            ds
                                                            (con bytestring)
                                                            ds
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      ]
                                    ]
                                  ]
                                  (fun Unit [Maybe TxOutRef])
                                }
                                (lam thunk Unit { Nothing TxOutRef })
                              ]
                              (lam
                                utxo
                                [[Tuple2 TxOutRef] TxOut]
                                (lam
                                  ds
                                  [List [[Tuple2 TxOutRef] TxOut]]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [
                                        [
                                          {
                                            [
                                              {
                                                Nil_match
                                                [[Tuple2 TxOutRef] TxOut]
                                              }
                                              ds
                                            ]
                                            (fun Unit [Maybe TxOutRef])
                                          }
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              { Just TxOutRef }
                                              [
                                                {
                                                  [
                                                    {
                                                      { Tuple2_match TxOutRef }
                                                      TxOut
                                                    }
                                                    utxo
                                                  ]
                                                  TxOutRef
                                                }
                                                (lam a TxOutRef (lam ds TxOut a)
                                                )
                                              ]
                                            ]
                                          )
                                        ]
                                        (lam
                                          ipv
                                          [[Tuple2 TxOutRef] TxOut]
                                          (lam
                                            ipv
                                            [List [[Tuple2 TxOutRef] TxOut]]
                                            (lam thunk Unit { Nothing TxOutRef }
                                            )
                                          )
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                )
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      mustRunContract
                      (all redeemer (type) (fun [(lam a (type) (fun a (con data))) redeemer] (fun (con bytestring) (fun redeemer (fun ScriptContext Bool)))))
                    )
                    (abs
                      redeemer
                      (type)
                      (lam
                        dToData
                        [(lam a (type) (fun a (con data))) redeemer]
                        (lam
                          script
                          (con bytestring)
                          (lam
                            redeemer
                            redeemer
                            (lam
                              ctx
                              ScriptContext
                              [
                                [
                                  [
                                    {
                                      [
                                        { Maybe_match TxOutRef }
                                        [ [ findContractInput script ] ctx ]
                                      ]
                                      (fun Unit Bool)
                                    }
                                    (lam
                                      contractRef
                                      TxOutRef
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            [
                                              {
                                                { checkScriptContext Unit } Unit
                                              }
                                              fToDataUnit_ctoBuiltinData
                                            ]
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      foldr
                                                      [[TxConstraints Unit] Unit]
                                                    }
                                                    [[TxConstraints Unit] Unit]
                                                  }
                                                  {
                                                    {
                                                      fMonoidTxConstraints_c
                                                      Unit
                                                    }
                                                    Unit
                                                  }
                                                ]
                                                {
                                                  {
                                                    fMonoidTxConstraints_cmempty
                                                    Unit
                                                  }
                                                  Unit
                                                }
                                              ]
                                              [
                                                {
                                                  build
                                                  [[TxConstraints Unit] Unit]
                                                }
                                                (abs
                                                  a
                                                  (type)
                                                  (lam
                                                    c
                                                    (fun [[TxConstraints Unit] Unit] (fun a a))
                                                    (lam
                                                      n
                                                      a
                                                      [
                                                        [
                                                          c
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    TxConstraints
                                                                    Unit
                                                                  }
                                                                  Unit
                                                                }
                                                                [
                                                                  {
                                                                    build
                                                                    TxConstraint
                                                                  }
                                                                  (abs
                                                                    a
                                                                    (type)
                                                                    (lam
                                                                      c
                                                                      (fun TxConstraint (fun a a))
                                                                      (lam
                                                                        n
                                                                        a
                                                                        [
                                                                          [
                                                                            c
                                                                            [
                                                                              [
                                                                                MustSpendScriptOutput
                                                                                contractRef
                                                                              ]
                                                                              [
                                                                                dToData
                                                                                redeemer
                                                                              ]
                                                                            ]
                                                                          ]
                                                                          n
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                              ]
                                                              {
                                                                Nil
                                                                [InputConstraint Unit]
                                                              }
                                                            ]
                                                            {
                                                              Nil
                                                              [OutputConstraint Unit]
                                                            }
                                                          ]
                                                        ]
                                                        n
                                                      ]
                                                    )
                                                  )
                                                )
                                              ]
                                            ]
                                          ]
                                          ctx
                                        ]
                                      )
                                    )
                                  ]
                                  (lam thunk Unit False)
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl bad_name (fun Bool (fun Bool Bool)))
                    (lam
                      l
                      Bool
                      (lam
                        r
                        Bool
                        [
                          [
                            [
                              { [ Bool_match l ] (fun Unit Bool) }
                              (lam thunk Unit True)
                            ]
                            (lam thunk Unit r)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                  (termbind
                    (strict)
                    (vardecl
                      commitValidator
                      (fun (con bytestring) (fun TxOut (fun Unit (fun ScriptContext Bool))))
                    )
                    (lam
                      hydraScript
                      (con bytestring)
                      (lam
                        committedOut
                        TxOut
                        (lam
                          ds
                          Unit
                          (lam
                            ctx
                            ScriptContext
                            [
                              { [ Unit_match ds ] Bool }
                              [
                                [
                                  bad_name
                                  [
                                    [
                                      [
                                        [
                                          { mustRunContract Transition }
                                          ctoBuiltinData
                                        ]
                                        hydraScript
                                      ]
                                      CollectCom
                                    ]
                                    ctx
                                  ]
                                ]
                                [
                                  [ { and List } fFoldableNil_cfoldMap ]
                                  [
                                    { build Bool }
                                    (abs
                                      a
                                      (type)
                                      (lam
                                        c
                                        (fun Bool (fun a a))
                                        (lam
                                          n
                                          a
                                          [
                                            [
                                              c
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        mustRunContract
                                                        Transition
                                                      }
                                                      ctoBuiltinData
                                                    ]
                                                    hydraScript
                                                  ]
                                                  Abort
                                                ]
                                                ctx
                                              ]
                                            ]
                                            [
                                              [
                                                c
                                                [
                                                  [ mustReimburse committedOut ]
                                                  ctx
                                                ]
                                              ]
                                              n
                                            ]
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                ]
                              ]
                            ]
                          )
                        )
                      )
                    )
                  )
                  commitValidator
                )
              )
            )
          )
        )
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind
      (strict)
      (vardecl fUnsafeFromDataUnit_cunsafeFromBuiltinData (fun (con data) Unit))
      (lam
        d
        (con data)
        (let
          (nonrec)
          (termbind
            (nonstrict) (vardecl x Unit) [ { error Unit } (con unit ()) ]
          )
          [
            [
              [
                [
                  { (builtin ifThenElse) (fun Unit Unit) }
                  [
                    [
                      (builtin equalsInteger)
                      [
                        {
                          { (builtin fstPair) (con integer) }
                          [(con list) (con data)]
                        }
                        [ (builtin unConstrData) d ]
                      ]
                    ]
                    (con integer 0)
                  ]
                ]
                (lam ds Unit Unit)
              ]
              (lam ds Unit x)
            ]
            Unit
          ]
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Credential (type))

        Credential_match
        (vardecl PubKeyCredential (fun (con bytestring) Credential))
        (vardecl ScriptCredential (fun (con bytestring) Credential))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl StakingCredential (type))

        StakingCredential_match
        (vardecl StakingHash (fun Credential StakingCredential))
        (vardecl
          StakingPtr
          (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl DCert (type))

        DCert_match
        (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
        (vardecl
          DCertDelegDelegate
          (fun StakingCredential (fun (con bytestring) DCert))
        )
        (vardecl DCertDelegRegKey (fun StakingCredential DCert))
        (vardecl DCertGenesis DCert)
        (vardecl DCertMir DCert)
        (vardecl
          DCertPoolRegister (fun (con bytestring) (fun (con bytestring) DCert))
        )
        (vardecl
          DCertPoolRetire (fun (con bytestring) (fun (con integer) DCert))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl TxOutRef (type))

        TxOutRef_match
        (vardecl TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef)))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl ScriptPurpose (type))

        ScriptPurpose_match
        (vardecl Certifying (fun DCert ScriptPurpose))
        (vardecl Minting (fun (con bytestring) ScriptPurpose))
        (vardecl Rewarding (fun StakingCredential ScriptPurpose))
        (vardecl Spending (fun TxOutRef ScriptPurpose))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Extended (fun (type) (type)))
        (tyvardecl a (type))
        Extended_match
        (vardecl Finite (fun a [Extended a]))
        (vardecl NegInf [Extended a])
        (vardecl PosInf [Extended a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl LowerBound (fun (type) (type)))
        (tyvardecl a (type))
        LowerBound_match
        (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl UpperBound (fun (type) (type)))
        (tyvardecl a (type))
        UpperBound_match
        (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Interval (fun (type) (type)))
        (tyvardecl a (type))
        Interval_match
        (vardecl Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Address (type))

        Address_match
        (vardecl
          Address (fun Credential (fun [Maybe StakingCredential] Address))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl TxOut (type))

            TxOut_match
            (vardecl
              TxOut
              (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInInfo (type))

            TxInInfo_match
            (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInfo (type))

            TxInfo_match
            (vardecl
              TxInfo
              (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptContext (type))

            ScriptContext_match
            (vardecl
              ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxId_cunsafeFromBuiltinData
            (fun (con data) (con bytestring))
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ { error (con bytestring) } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit (con bytestring)) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
            (fun (con data) TxOutRef)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [ { error TxOutRef } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOutRef) [ [ TxOutRef x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOutRef) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataCredential_cunsafeFromBuiltinData
            (fun (con data) Credential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [ { error Credential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ PubKeyCredential x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Credential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ ScriptCredential x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Credential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
            (fun (con data) StakingCredential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ { error StakingCredential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x StakingCredential) [ StakingHash x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit StakingCredential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ [ [ StakingPtr x ] x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit StakingCredential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataDCert_cunsafeFromBuiltinData (fun (con data) DCert)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x DCert) [ { error DCert } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegRegKey x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegDeRegKey x ])
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertDelegDelegate x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRegister x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 3) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRetire x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 4) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 5) ]
                      ]
                      (lam ds Unit DCertGenesis)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit DCert) }
                      [ [ (builtin equalsInteger) index ] (con integer 6) ]
                    ]
                    (lam ds Unit DCertMir)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptPurpose)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [ { error ScriptPurpose } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Minting x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Spending x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Rewarding x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Certifying x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                      [ [ (builtin equalsInteger) index ] (con integer 3) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
            (fun (con data) (con data))
          )
          (lam d (con data) d)
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
            (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) a)) a] (fun [(lam a (type) (fun (con data) a)) b] (fun (con data) [[Tuple2 a] b])))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) a]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) b]
                  (lam
                    d
                    (con data)
                    (let
                      (nonrec)
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ { error [[Tuple2 a] b] } (con unit ()) ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl
                          tup
                          [[(con pair) (con integer)] [(con list) (con data)]]
                        )
                        [ (builtin unConstrData) d ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl t [(con list) (con data)])
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x b)
                        [
                          dUnsafeFromData
                          [
                            { (builtin headList) (con data) }
                            [ { (builtin tailList) (con data) } t ]
                          ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x a)
                        [
                          dUnsafeFromData
                          [ { (builtin headList) (con data) } t ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ [ { { Tuple2 a } b } x ] x ]
                      )
                      [
                        [
                          [
                            [
                              { (builtin ifThenElse) (fun Unit [[Tuple2 a] b]) }
                              [
                                [
                                  (builtin equalsInteger)
                                  [
                                    {
                                      { (builtin fstPair) (con integer) }
                                      [(con list) (con data)]
                                    }
                                    tup
                                  ]
                                ]
                                (con integer 0)
                              ]
                            ]
                            (lam ds Unit x)
                          ]
                          (lam ds Unit x)
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataNil_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [List a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (rec)
                  (termbind
                    (strict)
                    (vardecl go (fun [(con list) (con data)] [List a]))
                    (lam
                      l
                      [(con list) (con data)]
                      [
                        [
                          [
                            [
                              {
                                { (builtin chooseList) (fun Unit [List a]) }
                                (con data)
                              }
                              (lam ds Unit { Nil a })
                            ]
                            (lam
                              ds
                              Unit
                              [
                                [
                                  { Cons a }
                                  [
                                    dUnsafeFromData
                                    [ { (builtin headList) (con data) } l ]
                                  ]
                                ]
                                [ go [ { (builtin tailList) (con data) } l ] ]
                              ]
                            )
                          ]
                          l
                        ]
                        Unit
                      ]
                    )
                  )
                  [ go [ (builtin unListData) d ] ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBool_cunsafeFromBuiltinData (fun (con data) Bool)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x Bool) [ { error Bool } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  [ (builtin unConstrData) d ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Bool)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Bool) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit False)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Bool) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit True)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataExtended_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Extended a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [ { error [Extended a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 0)
                            ]
                          ]
                          (lam ds Unit { NegInf a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict) (vardecl x [Extended a]) [ { Finite a } x ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit x)
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Extended a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 2) ]
                        ]
                        (lam ds Unit { PosInf a })
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [UpperBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ { error [UpperBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ [ { UpperBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [UpperBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [LowerBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ { error [LowerBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ [ { LowerBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [LowerBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Interval a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ { error [Interval a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ [ { Interval a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Interval a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMap
            (all k (type) (all v (type) (fun [(lam a (type) (fun (con data) a)) k] (fun [(lam a (type) (fun (con data) a)) v] (fun (con data) [List [[Tuple2 k] v]])))))
          )
          (abs
            k
            (type)
            (abs
              v
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) k]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) v]
                  (lam
                    eta
                    (con data)
                    [
                      [
                        {
                          fUnsafeFromDataNil_cunsafeFromBuiltinData
                          [[Tuple2 k] v]
                        }
                        [
                          [
                            {
                              { fUnsafeFromDataTuple2_cunsafeFromBuiltinData k }
                              v
                            }
                            dUnsafeFromData
                          ]
                          dUnsafeFromData
                        ]
                      ]
                      eta
                    ]
                  )
                )
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [List [[Tuple2 (con bytestring)] (con integer)]])
          )
          [
            [
              { { fUnsafeFromDataMap (con bytestring) } (con integer) }
              (builtin unBData)
            ]
            (builtin unIData)
          ]
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
          )
          [
            [
              {
                {
                  fUnsafeFromDataTuple2_cunsafeFromBuiltinData (con bytestring)
                }
                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
              }
              (builtin unBData)
            ]
            fUnsafeFromDataValue
          ]
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMaybe_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Maybe a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [ { error [Maybe a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Maybe a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit { Nothing a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind (nonstrict) (vardecl x [Maybe a]) [ { Just a } x ])
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Maybe a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 0) ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataAddress_cunsafeFromBuiltinData
            (fun (con data) Address)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Address)
                [ { error Address } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe StakingCredential])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      StakingCredential
                    }
                    fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x Address) [ [ Address x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Address) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOut_cunsafeFromBuiltinData (fun (con data) TxOut)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x TxOut) [ { error TxOut } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Address)
                [
                  fUnsafeFromDataAddress_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOut) [ [ [ TxOut x ] x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOut) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInInfo)
                [ { error TxInInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOut)
                [
                  fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxInInfo) [ [ TxInInfo x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [ { error TxInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 (con bytestring)] (con data)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] (con data)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            (con bytestring)
                          }
                          (con data)
                        }
                        (builtin unBData)
                      ]
                      fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Interval (con integer)])
                [
                  [
                    {
                      fUnsafeFromDataInterval_cunsafeFromBuiltinData
                      (con integer)
                    }
                    (builtin unIData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 StakingCredential] (con integer)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 StakingCredential] (con integer)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            StakingCredential
                          }
                          (con integer)
                        }
                        fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                      ]
                      (builtin unIData)
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List DCert])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData DCert }
                    fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxOut])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxOut }
                    fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxInInfo])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxInInfo }
                    fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  [ [ [ [ [ [ [ [ [ TxInfo x ] x ] x ] x ] x ] x ] x ] x ] x ] x
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptContext)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptContext)
                [ { error ScriptContext } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x ScriptContext) [ [ ScriptContext x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptContext) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl check (fun Bool Unit))
          (lam
            b
            Bool
            [
              [
                [ { [ Bool_match b ] (fun Unit Unit) } (lam thunk Unit Unit) ]
                (lam
                  thunk
                  Unit
                  [
                    { error Unit }
                    [
                      {
                        [
                          Unit_match
                          [
                            [
                              { (builtin chooseUnit) Unit }
                              [
                                (builtin trace) (con string "Check has failed")
                              ]
                            ]
                            Unit
                          ]
                        ]
                        (con unit)
                      }
                      (con unit ())
                    ]
                  ]
                )
              ]
              Unit
            ]
          )
        )
        (termbind
          (strict)
          (vardecl
            wrapValidator
            (all d (type) (all r (type) (fun [(lam a (type) (fun (con data) a)) d] (fun [(lam a (type) (fun (con data) a)) r] (fun (fun d (fun r (fun ScriptContext Bool))) (fun (con data) (fun (con data) (fun (con data) Unit))))))))
          )
          (abs
            d
            (type)
            (abs
              r
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) d]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) r]
                  (lam
                    f
                    (fun d (fun r (fun ScriptContext Bool)))
                    (lam
                      d
                      (con data)
                      (lam
                        r
                        (con data)
                        (lam
                          p
                          (con data)
                          [
                            check
                            [
                              [
                                [ f [ dUnsafeFromData d ] ]
                                [ dUnsafeFromData r ]
                              ]
                              [
                                fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                                p
                              ]
                            ]
                          ]
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        [
          [
            { { wrapValidator TxOut } Unit }
            fUnsafeFromDataTxOut_cunsafeFromBuiltinData
          ]
          fUnsafeFromDataUnit_cunsafeFromBuiltinData
        ]
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl These (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        These_match
        (vardecl That (fun b [[These a] b]))
        (vardecl These (fun a (fun b [[These a] b])))
        (vardecl This (fun a [[These a] b]))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (datatypebind
          (datatype
            (tyvardecl Bool (type))

            Bool_match
            (vardecl True Bool) (vardecl False Bool)
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxOutRef (type))

            TxOutRef_match
            (vardecl
              TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl InputConstraint (fun (type) (type)))
            (tyvardecl a (type))
            InputConstraint_match
            (vardecl InputConstraint (fun a (fun TxOutRef [InputConstraint a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl OutputConstraint (fun (type) (type)))
            (tyvardecl a (type))
            OutputConstraint_match
            (vardecl
              OutputConstraint
              (fun a (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [OutputConstraint a]))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Extended (fun (type) (type)))
            (tyvardecl a (type))
            Extended_match
            (vardecl Finite (fun a [Extended a]))
            (vardecl NegInf [Extended a])
            (vardecl PosInf [Extended a])
          )
        )
        (datatypebind
          (datatype
            (tyvardecl LowerBound (fun (type) (type)))
            (tyvardecl a (type))
            LowerBound_match
            (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl UpperBound (fun (type) (type)))
            (tyvardecl a (type))
            UpperBound_match
            (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl Interval (fun (type) (type)))
            (tyvardecl a (type))
            Interval_match
            (vardecl
              Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxConstraint (type))

            TxConstraint_match
            (vardecl MustBeSignedBy (fun (con bytestring) TxConstraint))
            (vardecl
              MustHashDatum (fun (con bytestring) (fun (con data) TxConstraint))
            )
            (vardecl MustIncludeDatum (fun (con data) TxConstraint))
            (vardecl
              MustMintValue
              (fun (con bytestring) (fun (con data) (fun (con bytestring) (fun (con integer) TxConstraint))))
            )
            (vardecl
              MustPayToOtherScript
              (fun (con bytestring) (fun (con data) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)))
            )
            (vardecl
              MustPayToPubKey
              (fun (con bytestring) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint))
            )
            (vardecl
              MustProduceAtLeast
              (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
            )
            (vardecl
              MustSpendAtLeast
              (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] TxConstraint)
            )
            (vardecl MustSpendPubKeyOutput (fun TxOutRef TxConstraint))
            (vardecl
              MustSpendScriptOutput (fun TxOutRef (fun (con data) TxConstraint))
            )
            (vardecl MustValidateIn (fun [Interval (con integer)] TxConstraint))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxConstraints (fun (type) (fun (type) (type))))
            (tyvardecl i (type)) (tyvardecl o (type))
            TxConstraints_match
            (vardecl
              TxConstraints
              (fun [List TxConstraint] (fun [List [InputConstraint i]] (fun [List [OutputConstraint o]] [[TxConstraints i] o])))
            )
          )
        )
        (let
          (rec)
          (termbind
            (nonstrict)
            (vardecl
              foldr
              (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a (fun b b))
                  (lam
                    acc
                    b
                    (lam
                      l
                      [List a]
                      [
                        [
                          [
                            { [ { Nil_match a } l ] (fun Unit b) }
                            (lam thunk Unit acc)
                          ]
                          (lam
                            x
                            a
                            (lam
                              xs
                              [List a]
                              (lam
                                thunk
                                Unit
                                [
                                  [ f x ] [ [ [ { { foldr a } b } f ] acc ] xs ]
                                ]
                              )
                            )
                          )
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                fMonoidTxConstraints_c
                (all i (type) (all o (type) (fun [[TxConstraints i] o] (fun [[TxConstraints i] o] [[TxConstraints i] o]))))
              )
              (abs
                i
                (type)
                (abs
                  o
                  (type)
                  (lam
                    l
                    [[TxConstraints i] o]
                    (lam
                      r
                      [[TxConstraints i] o]
                      [
                        [
                          [
                            { { TxConstraints i } o }
                            [
                              {
                                [ { { TxConstraints_match i } o } l ]
                                [List TxConstraint]
                              }
                              (lam
                                ds
                                [List TxConstraint]
                                (lam
                                  ds
                                  [List [InputConstraint i]]
                                  (lam
                                    ds
                                    [List [OutputConstraint o]]
                                    [
                                      [
                                        [
                                          {
                                            { foldr TxConstraint }
                                            [List TxConstraint]
                                          }
                                          { Cons TxConstraint }
                                        ]
                                        [
                                          {
                                            [
                                              { { TxConstraints_match i } o } r
                                            ]
                                            [List TxConstraint]
                                          }
                                          (lam
                                            ds
                                            [List TxConstraint]
                                            (lam
                                              ds
                                              [List [InputConstraint i]]
                                              (lam
                                                ds
                                                [List [OutputConstraint o]]
                                                ds
                                              )
                                            )
                                          )
                                        ]
                                      ]
                                      ds
                                    ]
                                  )
                                )
                              )
                            ]
                          ]
                          [
                            {
                              [ { { TxConstraints_match i } o } l ]
                              [List [InputConstraint i]]
                            }
                            (lam
                              ds
                              [List TxConstraint]
                              (lam
                                ds
                                [List [InputConstraint i]]
                                (lam
                                  ds
                                  [List [OutputConstraint o]]
                                  [
                                    [
                                      [
                                        {
                                          { foldr [InputConstraint i] }
                                          [List [InputConstraint i]]
                                        }
                                        { Cons [InputConstraint i] }
                                      ]
                                      [
                                        {
                                          [ { { TxConstraints_match i } o } r ]
                                          [List [InputConstraint i]]
                                        }
                                        (lam
                                          ds
                                          [List TxConstraint]
                                          (lam
                                            ds
                                            [List [InputConstraint i]]
                                            (lam
                                              ds [List [OutputConstraint o]] ds
                                            )
                                          )
                                        )
                                      ]
                                    ]
                                    ds
                                  ]
                                )
                              )
                            )
                          ]
                        ]
                        [
                          {
                            [ { { TxConstraints_match i } o } l ]
                            [List [OutputConstraint o]]
                          }
                          (lam
                            ds
                            [List TxConstraint]
                            (lam
                              ds
                              [List [InputConstraint i]]
                              (lam
                                ds
                                [List [OutputConstraint o]]
                                [
                                  [
                                    [
                                      {
                                        { foldr [OutputConstraint o] }
                                        [List [OutputConstraint o]]
                                      }
                                      { Cons [OutputConstraint o] }
                                    ]
                                    [
                                      {
                                        [ { { TxConstraints_match i } o } r ]
                                        [List [OutputConstraint o]]
                                      }
                                      (lam
                                        ds
                                        [List TxConstraint]
                                        (lam
                                          ds
                                          [List [InputConstraint i]]
                                          (lam ds [List [OutputConstraint o]] ds
                                          )
                                        )
                                      )
                                    ]
                                  ]
                                  ds
                                ]
                              )
                            )
                          )
                        ]
                      ]
                    )
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fMonoidTxConstraints_cmempty
                (all i (type) (all o (type) [[TxConstraints i] o]))
              )
              (abs
                i
                (type)
                (abs
                  o
                  (type)
                  [
                    [
                      [ { { TxConstraints i } o } { Nil TxConstraint } ]
                      { Nil [InputConstraint i] }
                    ]
                    { Nil [OutputConstraint o] }
                  ]
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Monoid (fun (type) (type)))
                (tyvardecl a (type))
                Monoid_match
                (vardecl
                  CConsMonoid
                  (fun [(lam a (type) (fun a (fun a a))) a] (fun a [Monoid a]))
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fMonoidTxConstraints
                (all i (type) (all o (type) [Monoid [[TxConstraints i] o]]))
              )
              (abs
                i
                (type)
                (abs
                  o
                  (type)
                  [
                    [
                      { CConsMonoid [[TxConstraints i] o] }
                      { { fMonoidTxConstraints_c i } o }
                    ]
                    { { fMonoidTxConstraints_cmempty i } o }
                  ]
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Transition (type))

                Transition_match
                (vardecl Abort Transition) (vardecl CollectCom Transition)
              )
            )
            (termbind
              (strict)
              (vardecl ctoBuiltinData (fun Transition (con data)))
              (lam
                ds
                Transition
                [
                  [
                    [
                      { [ Transition_match ds ] (fun Unit (con data)) }
                      (lam
                        thunk
                        Unit
                        [
                          [ (builtin constrData) (con integer 1) ]
                          [ (builtin mkNilData) (con unit ()) ]
                        ]
                      )
                    ]
                    (lam
                      thunk
                      Unit
                      [
                        [ (builtin constrData) (con integer 0) ]
                        [ (builtin mkNilData) (con unit ()) ]
                      ]
                    )
                  ]
                  Unit
                ]
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Credential (type))

                Credential_match
                (vardecl PubKeyCredential (fun (con bytestring) Credential))
                (vardecl ScriptCredential (fun (con bytestring) Credential))
              )
            )
            (termbind
              (strict)
              (vardecl
                fToDataCredential_ctoBuiltinData (fun Credential (con data))
              )
              (lam
                ds
                Credential
                [
                  [
                    { [ Credential_match ds ] (con data) }
                    (lam
                      arg
                      (con bytestring)
                      [
                        [ (builtin constrData) (con integer 0) ]
                        [
                          [
                            { (builtin mkCons) (con data) }
                            [ (builtin bData) arg ]
                          ]
                          [ (builtin mkNilData) (con unit ()) ]
                        ]
                      ]
                    )
                  ]
                  (lam
                    arg
                    (con bytestring)
                    [
                      [ (builtin constrData) (con integer 1) ]
                      [
                        [
                          { (builtin mkCons) (con data) }
                          [ (builtin bData) arg ]
                        ]
                        [ (builtin mkNilData) (con unit ()) ]
                      ]
                    ]
                  )
                ]
              )
            )
            (datatypebind
              (datatype
                (tyvardecl StakingCredential (type))

                StakingCredential_match
                (vardecl StakingHash (fun Credential StakingCredential))
                (vardecl
                  StakingPtr
                  (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fToDataStakingCredential_ctoBuiltinData
                (fun StakingCredential (con data))
              )
              (lam
                ds
                StakingCredential
                [
                  [
                    { [ StakingCredential_match ds ] (con data) }
                    (lam
                      arg
                      Credential
                      [
                        [ (builtin constrData) (con integer 0) ]
                        [
                          [
                            { (builtin mkCons) (con data) }
                            [ fToDataCredential_ctoBuiltinData arg ]
                          ]
                          [ (builtin mkNilData) (con unit ()) ]
                        ]
                      ]
                    )
                  ]
                  (lam
                    arg
                    (con integer)
                    (lam
                      arg
                      (con integer)
                      (lam
                        arg
                        (con integer)
                        [
                          [ (builtin constrData) (con integer 1) ]
                          [
                            [
                              { (builtin mkCons) (con data) }
                              [ (builtin iData) arg ]
                            ]
                            [
                              [
                                { (builtin mkCons) (con data) }
                                [ (builtin iData) arg ]
                              ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [ (builtin iData) arg ]
                                ]
                                [ (builtin mkNilData) (con unit ()) ]
                              ]
                            ]
                          ]
                        ]
                      )
                    )
                  )
                ]
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Maybe (fun (type) (type)))
                (tyvardecl a (type))
                Maybe_match
                (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
              )
            )
            (termbind
              (strict)
              (vardecl
                fToDataMaybe_ctoBuiltinData
                (all a (type) (fun [(lam a (type) (fun a (con data))) a] (fun [Maybe a] (con data))))
              )
              (abs
                a
                (type)
                (lam
                  dToData
                  [(lam a (type) (fun a (con data))) a]
                  (lam
                    ds
                    [Maybe a]
                    [
                      [
                        [
                          { [ { Maybe_match a } ds ] (fun Unit (con data)) }
                          (lam
                            arg
                            a
                            (lam
                              thunk
                              Unit
                              [
                                [ (builtin constrData) (con integer 0) ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ dToData arg ]
                                  ]
                                  [ (builtin mkNilData) (con unit ()) ]
                                ]
                              ]
                            )
                          )
                        ]
                        (lam
                          thunk
                          Unit
                          [
                            [ (builtin constrData) (con integer 1) ]
                            [ (builtin mkNilData) (con unit ()) ]
                          ]
                        )
                      ]
                      Unit
                    ]
                  )
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl Address (type))

                Address_match
                (vardecl
                  Address
                  (fun Credential (fun [Maybe StakingCredential] Address))
                )
              )
            )
            (termbind
              (strict)
              (vardecl fToDataAddress_ctoBuiltinData (fun Address (con data)))
              (lam
                ds
                Address
                [
                  { [ Address_match ds ] (con data) }
                  (lam
                    arg
                    Credential
                    (lam
                      arg
                      [Maybe StakingCredential]
                      [
                        [ (builtin constrData) (con integer 0) ]
                        [
                          [
                            { (builtin mkCons) (con data) }
                            [ fToDataCredential_ctoBuiltinData arg ]
                          ]
                          [
                            [
                              { (builtin mkCons) (con data) }
                              [
                                [
                                  {
                                    fToDataMaybe_ctoBuiltinData
                                    StakingCredential
                                  }
                                  fToDataStakingCredential_ctoBuiltinData
                                ]
                                arg
                              ]
                            ]
                            [ (builtin mkNilData) (con unit ()) ]
                          ]
                        ]
                      ]
                    )
                  )
                ]
              )
            )
            (termbind
              (strict)
              (vardecl
                fToDataByteString_ctoBuiltinData
                (fun (con bytestring) (con data))
              )
              (lam b (con bytestring) [ (builtin bData) b ])
            )
            (termbind
              (strict)
              (vardecl
                fToDataInteger_ctoBuiltinData (fun (con integer) (con data))
              )
              (lam i (con integer) [ (builtin iData) i ])
            )
            (termbind
              (strict)
              (vardecl
                fToDataTuple2_ctoBuiltinData
                (all a (type) (all b (type) (fun [(lam a (type) (fun a (con data))) a] (fun [(lam a (type) (fun a (con data))) b] (fun [[Tuple2 a] b] (con data))))))
              )
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    dToData
                    [(lam a (type) (fun a (con data))) a]
                    (lam
                      dToData
                      [(lam a (type) (fun a (con data))) b]
                      (lam
                        ds
                        [[Tuple2 a] b]
                        [
                          { [ { { Tuple2_match a } b } ds ] (con data) }
                          (lam
                            arg
                            a
                            (lam
                              arg
                              b
                              [
                                [ (builtin constrData) (con integer 0) ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ dToData arg ]
                                  ]
                                  [
                                    [
                                      { (builtin mkCons) (con data) }
                                      [ dToData arg ]
                                    ]
                                    [ (builtin mkNilData) (con unit ()) ]
                                  ]
                                ]
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            )
            (termbind
              (nonstrict)
              (vardecl fToDataMap [(con list) (con data)])
              [ (builtin mkNilData) (con unit ()) ]
            )
            (termbind
              (strict)
              (vardecl
                fToDataMap_ctoBuiltinData
                (all k (type) (all v (type) (fun [(lam a (type) (fun a (con data))) k] (fun [(lam a (type) (fun a (con data))) v] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v] (con data))))))
              )
              (abs
                k
                (type)
                (abs
                  v
                  (type)
                  (lam
                    dToData
                    [(lam a (type) (fun a (con data))) k]
                    (lam
                      dToData
                      [(lam a (type) (fun a (con data))) v]
                      (lam
                        eta
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v]
                        (let
                          (rec)
                          (termbind
                            (strict)
                            (vardecl
                              go
                              (fun [List [[Tuple2 k] v]] [(con list) (con data)])
                            )
                            (lam
                              ds
                              [List [[Tuple2 k] v]]
                              [
                                [
                                  [
                                    {
                                      [ { Nil_match [[Tuple2 k] v] } ds ]
                                      (fun Unit [(con list) (con data)])
                                    }
                                    (lam thunk Unit fToDataMap)
                                  ]
                                  (lam
                                    x
                                    [[Tuple2 k] v]
                                    (lam
                                      xs
                                      [List [[Tuple2 k] v]]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            { (builtin mkCons) (con data) }
                                            [
                                              [
                                                [
                                                  {
                                                    {
                                                      fToDataTuple2_ctoBuiltinData
                                                      k
                                                    }
                                                    v
                                                  }
                                                  dToData
                                                ]
                                                dToData
                                              ]
                                              x
                                            ]
                                          ]
                                          [ go xs ]
                                        ]
                                      )
                                    )
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                          [ (builtin listData) [ go eta ] ]
                        )
                      )
                    )
                  )
                )
              )
            )
            (termbind
              (nonstrict)
              (vardecl
                fToDataValue
                (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)] (con data))
              )
              [
                [
                  {
                    { fToDataMap_ctoBuiltinData (con bytestring) } (con integer)
                  }
                  fToDataByteString_ctoBuiltinData
                ]
                fToDataInteger_ctoBuiltinData
              ]
            )
            (datatypebind
              (datatype
                (tyvardecl TxOut (type))

                TxOut_match
                (vardecl
                  TxOut
                  (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
                )
              )
            )
            (termbind
              (strict)
              (vardecl fToDataTxOut_ctoBuiltinData (fun TxOut (con data)))
              (lam
                ds
                TxOut
                [
                  { [ TxOut_match ds ] (con data) }
                  (lam
                    arg
                    Address
                    (lam
                      arg
                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      (lam
                        arg
                        [Maybe (con bytestring)]
                        [
                          [ (builtin constrData) (con integer 0) ]
                          [
                            [
                              { (builtin mkCons) (con data) }
                              [ fToDataAddress_ctoBuiltinData arg ]
                            ]
                            [
                              [
                                { (builtin mkCons) (con data) }
                                [
                                  [
                                    [
                                      {
                                        {
                                          fToDataMap_ctoBuiltinData
                                          (con bytestring)
                                        }
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                      }
                                      fToDataByteString_ctoBuiltinData
                                    ]
                                    fToDataValue
                                  ]
                                  arg
                                ]
                              ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [
                                    [
                                      {
                                        fToDataMaybe_ctoBuiltinData
                                        (con bytestring)
                                      }
                                      fToDataByteString_ctoBuiltinData
                                    ]
                                    arg
                                  ]
                                ]
                                [ (builtin mkNilData) (con unit ()) ]
                              ]
                            ]
                          ]
                        ]
                      )
                    )
                  )
                ]
              )
            )
            (termbind
              (strict)
              (vardecl
                bad_name
                (all a (type) (fun [(lam a (type) (fun a (fun a a))) a] (fun a (fun a a))))
              )
              (abs a (type) (lam v [(lam a (type) (fun a (fun a a))) a] v))
            )
            (datatypebind
              (datatype
                (tyvardecl HeadParameters (type))

                HeadParameters_match
                (vardecl
                  HeadParameters
                  (fun [List (con bytestring)] (fun (con bytestring) HeadParameters))
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                asDatum
                (all a (type) (fun [(lam a (type) (fun a (con data))) a] (fun a (con data))))
              )
              (abs
                a
                (type)
                (lam
                  dToData
                  [(lam a (type) (fun a (con data))) a]
                  (lam x a [ dToData x ])
                )
              )
            )
            (termbind
              (strict)
              (vardecl fEqTxOutRef_c (fun TxOutRef (fun TxOutRef Bool)))
              (lam
                l
                TxOutRef
                (lam
                  r
                  TxOutRef
                  [
                    [
                      [
                        {
                          [
                            Bool_match
                            [
                              [
                                [
                                  { (builtin ifThenElse) Bool }
                                  [
                                    [
                                      (builtin equalsByteString)
                                      [
                                        {
                                          [ TxOutRef_match l ] (con bytestring)
                                        }
                                        (lam
                                          ds
                                          (con bytestring)
                                          (lam ds (con integer) ds)
                                        )
                                      ]
                                    ]
                                    [
                                      { [ TxOutRef_match r ] (con bytestring) }
                                      (lam
                                        ds
                                        (con bytestring)
                                        (lam ds (con integer) ds)
                                      )
                                    ]
                                  ]
                                ]
                                True
                              ]
                              False
                            ]
                          ]
                          (fun Unit Bool)
                        }
                        (lam
                          thunk
                          Unit
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [
                                  [
                                    (builtin equalsInteger)
                                    [
                                      { [ TxOutRef_match l ] (con integer) }
                                      (lam
                                        ds
                                        (con bytestring)
                                        (lam ds (con integer) ds)
                                      )
                                    ]
                                  ]
                                  [
                                    { [ TxOutRef_match r ] (con integer) }
                                    (lam
                                      ds
                                      (con bytestring)
                                      (lam ds (con integer) ds)
                                    )
                                  ]
                                ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      ]
                      (lam thunk Unit False)
                    ]
                    Unit
                  ]
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl TxInInfo (type))

                TxInInfo_match
                (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
              )
            )
            (datatypebind
              (datatype
                (tyvardecl DCert (type))

                DCert_match
                (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
                (vardecl
                  DCertDelegDelegate
                  (fun StakingCredential (fun (con bytestring) DCert))
                )
                (vardecl DCertDelegRegKey (fun StakingCredential DCert))
                (vardecl DCertGenesis DCert)
                (vardecl DCertMir DCert)
                (vardecl
                  DCertPoolRegister
                  (fun (con bytestring) (fun (con bytestring) DCert))
                )
                (vardecl
                  DCertPoolRetire
                  (fun (con bytestring) (fun (con integer) DCert))
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl ScriptPurpose (type))

                ScriptPurpose_match
                (vardecl Certifying (fun DCert ScriptPurpose))
                (vardecl Minting (fun (con bytestring) ScriptPurpose))
                (vardecl Rewarding (fun StakingCredential ScriptPurpose))
                (vardecl Spending (fun TxOutRef ScriptPurpose))
              )
            )
            (datatypebind
              (datatype
                (tyvardecl TxInfo (type))

                TxInfo_match
                (vardecl
                  TxInfo
                  (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
                )
              )
            )
            (datatypebind
              (datatype
                (tyvardecl ScriptContext (type))

                ScriptContext_match
                (vardecl
                  ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                findUtxo
                (fun TxOutRef (fun ScriptContext [Maybe [[Tuple2 TxOutRef] TxOut]]))
              )
              (lam
                ref
                TxOutRef
                (lam
                  ctx
                  ScriptContext
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl
                        f
                        (fun TxInInfo (fun [List [[Tuple2 TxOutRef] TxOut]] [List [[Tuple2 TxOutRef] TxOut]]))
                      )
                      (lam
                        e
                        TxInInfo
                        (lam
                          xs
                          [List [[Tuple2 TxOutRef] TxOut]]
                          [
                            [
                              [
                                {
                                  [
                                    { Maybe_match [[Tuple2 TxOutRef] TxOut] }
                                    [
                                      [
                                        [
                                          {
                                            [
                                              Bool_match
                                              [
                                                [ fEqTxOutRef_c ref ]
                                                [
                                                  {
                                                    [ TxInInfo_match e ]
                                                    TxOutRef
                                                  }
                                                  (lam
                                                    ds
                                                    TxOutRef
                                                    (lam ds TxOut ds)
                                                  )
                                                ]
                                              ]
                                            ]
                                            (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                                          }
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              { Just [[Tuple2 TxOutRef] TxOut] }
                                              [
                                                [
                                                  { { Tuple2 TxOutRef } TxOut }
                                                  [
                                                    {
                                                      [ TxInInfo_match e ]
                                                      TxOutRef
                                                    }
                                                    (lam
                                                      ds
                                                      TxOutRef
                                                      (lam ds TxOut ds)
                                                    )
                                                  ]
                                                ]
                                                [
                                                  { [ TxInInfo_match e ] TxOut }
                                                  (lam
                                                    ds
                                                    TxOutRef
                                                    (lam ds TxOut ds)
                                                  )
                                                ]
                                              ]
                                            ]
                                          )
                                        ]
                                        (lam
                                          thunk
                                          Unit
                                          { Nothing [[Tuple2 TxOutRef] TxOut] }
                                        )
                                      ]
                                      Unit
                                    ]
                                  ]
                                  (fun Unit [List [[Tuple2 TxOutRef] TxOut]])
                                }
                                (lam
                                  e
                                  [[Tuple2 TxOutRef] TxOut]
                                  (lam
                                    thunk
                                    Unit
                                    [
                                      [ { Cons [[Tuple2 TxOutRef] TxOut] } e ]
                                      xs
                                    ]
                                  )
                                )
                              ]
                              (lam thunk Unit xs)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    [
                      [
                        [
                          {
                            [
                              { Nil_match [[Tuple2 TxOutRef] TxOut] }
                              [
                                [
                                  [
                                    {
                                      { foldr TxInInfo }
                                      [List [[Tuple2 TxOutRef] TxOut]]
                                    }
                                    f
                                  ]
                                  { Nil [[Tuple2 TxOutRef] TxOut] }
                                ]
                                [
                                  {
                                    [
                                      TxInfo_match
                                      [
                                        { [ ScriptContext_match ctx ] TxInfo }
                                        (lam ds TxInfo (lam ds ScriptPurpose ds)
                                        )
                                      ]
                                    ]
                                    [List TxInInfo]
                                  }
                                  (lam
                                    ds
                                    [List TxInInfo]
                                    (lam
                                      ds
                                      [List TxOut]
                                      (lam
                                        ds
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        (lam
                                          ds
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          (lam
                                            ds
                                            [List DCert]
                                            (lam
                                              ds
                                              [List [[Tuple2 StakingCredential] (con integer)]]
                                              (lam
                                                ds
                                                [Interval (con integer)]
                                                (lam
                                                  ds
                                                  [List (con bytestring)]
                                                  (lam
                                                    ds
                                                    [List [[Tuple2 (con bytestring)] (con data)]]
                                                    (lam ds (con bytestring) ds)
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                ]
                              ]
                            ]
                            (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                          }
                          (lam thunk Unit { Nothing [[Tuple2 TxOutRef] TxOut] })
                        ]
                        (lam
                          utxo
                          [[Tuple2 TxOutRef] TxOut]
                          (lam
                            ds
                            [List [[Tuple2 TxOutRef] TxOut]]
                            (lam
                              thunk
                              Unit
                              [
                                [
                                  [
                                    {
                                      [
                                        { Nil_match [[Tuple2 TxOutRef] TxOut] }
                                        ds
                                      ]
                                      (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                                    }
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        { Just [[Tuple2 TxOutRef] TxOut] } utxo
                                      ]
                                    )
                                  ]
                                  (lam
                                    ipv
                                    [[Tuple2 TxOutRef] TxOut]
                                    (lam
                                      ipv
                                      [List [[Tuple2 TxOutRef] TxOut]]
                                      (lam
                                        thunk
                                        Unit
                                        { Nothing [[Tuple2 TxOutRef] TxOut] }
                                      )
                                    )
                                  )
                                ]
                                Unit
                              ]
                            )
                          )
                        )
                      ]
                      Unit
                    ]
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl fst (all a (type) (all b (type) (fun [[Tuple2 a] b] a))))
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    ds
                    [[Tuple2 a] b]
                    [
                      { [ { { Tuple2_match a } b } ds ] a }
                      (lam a a (lam ds b a))
                    ]
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                foldr
                (all a (type) (all b (type) (fun (fun a (fun b b)) (fun b (fun [List a] b)))))
              )
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    k
                    (fun a (fun b b))
                    (lam
                      z
                      b
                      (let
                        (rec)
                        (termbind
                          (strict)
                          (vardecl go (fun [List a] b))
                          (lam
                            ds
                            [List a]
                            [
                              [
                                [
                                  { [ { Nil_match a } ds ] (fun Unit b) }
                                  (lam thunk Unit z)
                                ]
                                (lam
                                  y
                                  a
                                  (lam
                                    ys
                                    [List a]
                                    (lam thunk Unit [ [ k y ] [ go ys ] ])
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                        go
                      )
                    )
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                p1Monoid
                (all a (type) (fun [Monoid a] [(lam a (type) (fun a (fun a a))) a]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [Monoid a]
                  [
                    {
                      [ { Monoid_match a } v ]
                      [(lam a (type) (fun a (fun a a))) a]
                    }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl mempty (all a (type) (fun [Monoid a] a)))
              (abs
                a
                (type)
                (lam
                  v
                  [Monoid a]
                  [
                    { [ { Monoid_match a } v ] a }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl mconcat (all a (type) (fun [Monoid a] (fun [List a] a))))
              (abs
                a
                (type)
                (lam
                  dMonoid
                  [Monoid a]
                  [
                    [ { { foldr a } a } [ { p1Monoid a } dMonoid ] ]
                    [ { mempty a } dMonoid ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                mkParty
                (fun (con bytestring) (fun (con bytestring) [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
              )
              (lam
                policyId
                (con bytestring)
                (lam
                  vk
                  (con bytestring)
                  [
                    [
                      {
                        Cons
                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                      }
                      [
                        [
                          {
                            { Tuple2 (con bytestring) }
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                          }
                          policyId
                        ]
                        [
                          [
                            { Cons [[Tuple2 (con bytestring)] (con integer)] }
                            [
                              [
                                { { Tuple2 (con bytestring) } (con integer) } vk
                              ]
                              (con integer 1)
                            ]
                          ]
                          { Nil [[Tuple2 (con bytestring)] (con integer)] }
                        ]
                      ]
                    ]
                    {
                      Nil
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                build
                (all a (type) (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [List a]))
              )
              (abs
                a
                (type)
                (lam
                  g
                  (all b (type) (fun (fun a (fun b b)) (fun b b)))
                  [ [ { g [List a] } { Cons a } ] { Nil a } ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                mustBeSignedBy
                (all i (type) (all o (type) (fun (con bytestring) [[TxConstraints i] o])))
              )
              (abs
                i
                (type)
                (abs
                  o
                  (type)
                  (lam
                    x
                    (con bytestring)
                    [
                      [
                        [
                          { { TxConstraints i } o }
                          [
                            { build TxConstraint }
                            (abs
                              a
                              (type)
                              (lam
                                c
                                (fun TxConstraint (fun a a))
                                (lam n a [ [ c [ MustBeSignedBy x ] ] n ])
                              )
                            )
                          ]
                        ]
                        { Nil [InputConstraint i] }
                      ]
                      { Nil [OutputConstraint o] }
                    ]
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                mustPayToOtherScript
                (all i (type) (all o (type) (fun (con bytestring) (fun (con data) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[TxConstraints i] o])))))
              )
              (abs
                i
                (type)
                (abs
                  o
                  (type)
                  (lam
                    vh
                    (con bytestring)
                    (lam
                      dv
                      (con data)
                      (lam
                        vl
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        [
                          [
                            [
                              { { TxConstraints i } o }
                              [
                                [
                                  [
                                    {
                                      { foldr TxConstraint } [List TxConstraint]
                                    }
                                    { Cons TxConstraint }
                                  ]
                                  [
                                    { build TxConstraint }
                                    (abs
                                      a
                                      (type)
                                      (lam
                                        c
                                        (fun TxConstraint (fun a a))
                                        (lam
                                          n
                                          a
                                          [ [ c [ MustIncludeDatum dv ] ] n ]
                                        )
                                      )
                                    )
                                  ]
                                ]
                                [
                                  { build TxConstraint }
                                  (abs
                                    a
                                    (type)
                                    (lam
                                      c
                                      (fun TxConstraint (fun a a))
                                      (lam
                                        n
                                        a
                                        [
                                          [
                                            c
                                            [
                                              [ [ MustPayToOtherScript vh ] dv ]
                                              vl
                                            ]
                                          ]
                                          n
                                        ]
                                      )
                                    )
                                  )
                                ]
                              ]
                            ]
                            [
                              [
                                [
                                  {
                                    { foldr [InputConstraint i] }
                                    [List [InputConstraint i]]
                                  }
                                  { Cons [InputConstraint i] }
                                ]
                                { Nil [InputConstraint i] }
                              ]
                              { Nil [InputConstraint i] }
                            ]
                          ]
                          [
                            [
                              [
                                {
                                  { foldr [OutputConstraint o] }
                                  [List [OutputConstraint o]]
                                }
                                { Cons [OutputConstraint o] }
                              ]
                              { Nil [OutputConstraint o] }
                            ]
                            { Nil [OutputConstraint o] }
                          ]
                        ]
                      )
                    )
                  )
                )
              )
            )
            (termbind
              (strict)
              (vardecl fToDataUnit_ctoBuiltinData (fun Unit (con data)))
              (lam
                ds
                Unit
                [
                  { [ Unit_match ds ] (con data) }
                  [
                    [ (builtin constrData) (con integer 0) ]
                    [ (builtin mkNilData) (con unit ()) ]
                  ]
                ]
              )
            )
            (datatypebind
              (datatype
                (tyvardecl MultiplicativeMonoid (fun (type) (type)))
                (tyvardecl a (type))
                MultiplicativeMonoid_match
                (vardecl
                  CConsMultiplicativeMonoid
                  (fun [(lam a (type) (fun a (fun a a))) a] (fun a [MultiplicativeMonoid a]))
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                p1MultiplicativeMonoid
                (all a (type) (fun [MultiplicativeMonoid a] [(lam a (type) (fun a (fun a a))) a]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [MultiplicativeMonoid a]
                  [
                    {
                      [ { MultiplicativeMonoid_match a } v ]
                      [(lam a (type) (fun a (fun a a))) a]
                    }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl one (all a (type) (fun [MultiplicativeMonoid a] a)))
              (abs
                a
                (type)
                (lam
                  v
                  [MultiplicativeMonoid a]
                  [
                    { [ { MultiplicativeMonoid_match a } v ] a }
                    (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl
                fMonoidProduct
                (all a (type) (fun [MultiplicativeMonoid a] [Monoid [(lam a (type) a) a]]))
              )
              (abs
                a
                (type)
                (lam
                  v
                  [MultiplicativeMonoid a]
                  [
                    [
                      { CConsMonoid [(lam a (type) a) a] }
                      (lam
                        eta
                        [(lam a (type) a) a]
                        (lam
                          eta
                          [(lam a (type) a) a]
                          [ [ [ { p1MultiplicativeMonoid a } v ] eta ] eta ]
                        )
                      )
                    ]
                    [ { one a } v ]
                  ]
                )
              )
            )
            (termbind
              (strict)
              (vardecl bad_name (fun Bool (fun Bool Bool)))
              (lam
                ds
                Bool
                (lam
                  x
                  Bool
                  [
                    [
                      [
                        { [ Bool_match ds ] (fun Unit Bool) } (lam thunk Unit x)
                      ]
                      (lam thunk Unit False)
                    ]
                    Unit
                  ]
                )
              )
            )
            (termbind
              (nonstrict)
              (vardecl fMultiplicativeMonoidBool [MultiplicativeMonoid Bool])
              [ [ { CConsMultiplicativeMonoid Bool } bad_name ] True ]
            )
            (datatypebind
              (datatype
                (tyvardecl AdditiveMonoid (fun (type) (type)))
                (tyvardecl a (type))
                AdditiveMonoid_match
                (vardecl
                  CConsAdditiveMonoid
                  (fun [(lam a (type) (fun a (fun a a))) a] (fun a [AdditiveMonoid a]))
                )
              )
            )
            (termbind
              (strict)
              (vardecl bad_name (fun Bool (fun Bool Bool)))
              (lam
                ds
                Bool
                (lam
                  ds
                  Bool
                  [
                    [
                      [
                        { [ Bool_match ds ] (fun Unit Bool) }
                        (lam thunk Unit True)
                      ]
                      (lam thunk Unit ds)
                    ]
                    Unit
                  ]
                )
              )
            )
            (termbind
              (nonstrict)
              (vardecl fAdditiveMonoidBool [AdditiveMonoid Bool])
              [ [ { CConsAdditiveMonoid Bool } bad_name ] False ]
            )
            (let
              (rec)
              (termbind
                (nonstrict)
                (vardecl
                  fFoldableNil_cfoldMap
                  (all m (type) (all a (type) (fun [Monoid m] (fun (fun a m) (fun [List a] m)))))
                )
                (abs
                  m
                  (type)
                  (abs
                    a
                    (type)
                    (lam
                      dMonoid
                      [Monoid m]
                      (let
                        (nonrec)
                        (termbind
                          (nonstrict)
                          (vardecl
                            dSemigroup [(lam a (type) (fun a (fun a a))) m]
                          )
                          [ { p1Monoid m } dMonoid ]
                        )
                        (lam
                          ds
                          (fun a m)
                          (lam
                            ds
                            [List a]
                            [
                              [
                                [
                                  { [ { Nil_match a } ds ] (fun Unit m) }
                                  (lam thunk Unit [ { mempty m } dMonoid ])
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [List a]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [ dSemigroup [ ds x ] ]
                                        [
                                          [
                                            [
                                              { { fFoldableNil_cfoldMap m } a }
                                              dMonoid
                                            ]
                                            ds
                                          ]
                                          xs
                                        ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                )
              )
              (let
                (nonrec)
                (termbind
                  (strict)
                  (vardecl
                    p1AdditiveMonoid
                    (all a (type) (fun [AdditiveMonoid a] [(lam a (type) (fun a (fun a a))) a]))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      v
                      [AdditiveMonoid a]
                      [
                        {
                          [ { AdditiveMonoid_match a } v ]
                          [(lam a (type) (fun a (fun a a))) a]
                        }
                        (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl zero (all a (type) (fun [AdditiveMonoid a] a)))
                  (abs
                    a
                    (type)
                    (lam
                      v
                      [AdditiveMonoid a]
                      [
                        { [ { AdditiveMonoid_match a } v ] a }
                        (lam v [(lam a (type) (fun a (fun a a))) a] (lam v a v))
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    fMonoidSum
                    (all a (type) (fun [AdditiveMonoid a] [Monoid [(lam a (type) a) a]]))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      v
                      [AdditiveMonoid a]
                      [
                        [
                          { CConsMonoid [(lam a (type) a) a] }
                          (lam
                            eta
                            [(lam a (type) a) a]
                            (lam
                              eta
                              [(lam a (type) a) a]
                              [ [ [ { p1AdditiveMonoid a } v ] eta ] eta ]
                            )
                          )
                        ]
                        [ { zero a } v ]
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    checkOwnInputConstraint
                    (all a (type) (fun ScriptContext (fun [InputConstraint a] Bool)))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      ds
                      ScriptContext
                      (lam
                        ds
                        [InputConstraint a]
                        [
                          { [ ScriptContext_match ds ] Bool }
                          (lam
                            ds
                            TxInfo
                            (lam
                              ds
                              ScriptPurpose
                              [
                                { [ { InputConstraint_match a } ds ] Bool }
                                (lam
                                  ds
                                  a
                                  (lam
                                    ds
                                    TxOutRef
                                    [
                                      { [ TxInfo_match ds ] Bool }
                                      (lam
                                        ds
                                        [List TxInInfo]
                                        (lam
                                          ds
                                          [List TxOut]
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam
                                              ds
                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                              (lam
                                                ds
                                                [List DCert]
                                                (lam
                                                  ds
                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                  (lam
                                                    ds
                                                    [Interval (con integer)]
                                                    (lam
                                                      ds
                                                      [List (con bytestring)]
                                                      (lam
                                                        ds
                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                        (lam
                                                          ds
                                                          (con bytestring)
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    Bool_match
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            {
                                                                              fFoldableNil_cfoldMap
                                                                              [(lam a (type) a) Bool]
                                                                            }
                                                                            TxInInfo
                                                                          }
                                                                          [
                                                                            {
                                                                              fMonoidSum
                                                                              Bool
                                                                            }
                                                                            fAdditiveMonoidBool
                                                                          ]
                                                                        ]
                                                                        (lam
                                                                          ds
                                                                          TxInInfo
                                                                          [
                                                                            {
                                                                              [
                                                                                TxInInfo_match
                                                                                ds
                                                                              ]
                                                                              Bool
                                                                            }
                                                                            (lam
                                                                              ds
                                                                              TxOutRef
                                                                              (lam
                                                                                ds
                                                                                TxOut
                                                                                [
                                                                                  [
                                                                                    fEqTxOutRef_c
                                                                                    ds
                                                                                  ]
                                                                                  ds
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      ]
                                                                      ds
                                                                    ]
                                                                  ]
                                                                  (fun Unit Bool)
                                                                }
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  True
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  [
                                                                    {
                                                                      (builtin
                                                                        chooseUnit
                                                                      )
                                                                      Bool
                                                                    }
                                                                    [
                                                                      (builtin
                                                                        trace
                                                                      )
                                                                      (con
                                                                        string
                                                                          "Input constraint"
                                                                      )
                                                                    ]
                                                                  ]
                                                                  False
                                                                ]
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    fSemigroupFirst_c
                    (all a (type) (fun [(lam a (type) [Maybe a]) a] (fun [(lam a (type) [Maybe a]) a] [(lam a (type) [Maybe a]) a])))
                  )
                  (abs
                    a
                    (type)
                    (lam
                      ds
                      [(lam a (type) [Maybe a]) a]
                      (lam
                        b
                        [(lam a (type) [Maybe a]) a]
                        [
                          [
                            [
                              {
                                [ { Maybe_match a } ds ]
                                (fun Unit [(lam a (type) [Maybe a]) a])
                              }
                              (lam ipv a (lam thunk Unit ds))
                            ]
                            (lam thunk Unit b)
                          ]
                          Unit
                        ]
                      )
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    fMonoidFirst
                    (all a (type) [Monoid [(lam a (type) [Maybe a]) a]])
                  )
                  (abs
                    a
                    (type)
                    [
                      [
                        { CConsMonoid [(lam a (type) [Maybe a]) a] }
                        { fSemigroupFirst_c a }
                      ]
                      { Nothing a }
                    ]
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    findDatumHash
                    (fun (con data) (fun TxInfo [Maybe (con bytestring)]))
                  )
                  (lam
                    ds
                    (con data)
                    (lam
                      ds
                      TxInfo
                      [
                        { [ TxInfo_match ds ] [Maybe (con bytestring)] }
                        (lam
                          ds
                          [List TxInInfo]
                          (lam
                            ds
                            [List TxOut]
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [List DCert]
                                  (lam
                                    ds
                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                    (lam
                                      ds
                                      [Interval (con integer)]
                                      (lam
                                        ds
                                        [List (con bytestring)]
                                        (lam
                                          ds
                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                          (lam
                                            ds
                                            (con bytestring)
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      {
                                                        Maybe_match
                                                        [[Tuple2 (con bytestring)] (con data)]
                                                      }
                                                      [
                                                        [
                                                          [
                                                            {
                                                              {
                                                                fFoldableNil_cfoldMap
                                                                [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                              }
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                            }
                                                            {
                                                              fMonoidFirst
                                                              [[Tuple2 (con bytestring)] (con data)]
                                                            }
                                                          ]
                                                          (lam
                                                            x
                                                            [[Tuple2 (con bytestring)] (con data)]
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    {
                                                                      Tuple2_match
                                                                      (con bytestring)
                                                                    }
                                                                    (con data)
                                                                  }
                                                                  x
                                                                ]
                                                                [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                              }
                                                              (lam
                                                                ds
                                                                (con bytestring)
                                                                (lam
                                                                  ds
                                                                  (con data)
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            Bool_match
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    (builtin
                                                                                      ifThenElse
                                                                                    )
                                                                                    Bool
                                                                                  }
                                                                                  [
                                                                                    [
                                                                                      (builtin
                                                                                        equalsData
                                                                                      )
                                                                                      ds
                                                                                    ]
                                                                                    ds
                                                                                  ]
                                                                                ]
                                                                                True
                                                                              ]
                                                                              False
                                                                            ]
                                                                          ]
                                                                          (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                        }
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            {
                                                                              Just
                                                                              [[Tuple2 (con bytestring)] (con data)]
                                                                            }
                                                                            x
                                                                          ]
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        {
                                                                          Nothing
                                                                          [[Tuple2 (con bytestring)] (con data)]
                                                                        }
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            ]
                                                          )
                                                        ]
                                                        ds
                                                      ]
                                                    ]
                                                    (fun Unit [Maybe (con bytestring)])
                                                  }
                                                  (lam
                                                    a
                                                    [[Tuple2 (con bytestring)] (con data)]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [
                                                        {
                                                          Just (con bytestring)
                                                        }
                                                        [
                                                          {
                                                            [
                                                              {
                                                                {
                                                                  Tuple2_match
                                                                  (con bytestring)
                                                                }
                                                                (con data)
                                                              }
                                                              a
                                                            ]
                                                            (con bytestring)
                                                          }
                                                          (lam
                                                            a
                                                            (con bytestring)
                                                            (lam ds (con data) a
                                                            )
                                                          )
                                                        ]
                                                      ]
                                                    )
                                                  )
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  { Nothing (con bytestring) }
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl error (all a (type) (fun (con unit) a)))
                  (abs a (type) (lam thunk (con unit) (error a)))
                )
                (termbind
                  (strict)
                  (vardecl findOwnInput (fun ScriptContext [Maybe TxInInfo]))
                  (lam
                    ds
                    ScriptContext
                    [
                      { [ ScriptContext_match ds ] [Maybe TxInInfo] }
                      (lam
                        ds
                        TxInfo
                        (lam
                          ds
                          ScriptPurpose
                          [
                            { [ TxInfo_match ds ] [Maybe TxInInfo] }
                            (lam
                              ds
                              [List TxInInfo]
                              (lam
                                ds
                                [List TxOut]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [List DCert]
                                      (lam
                                        ds
                                        [List [[Tuple2 StakingCredential] (con integer)]]
                                        (lam
                                          ds
                                          [Interval (con integer)]
                                          (lam
                                            ds
                                            [List (con bytestring)]
                                            (lam
                                              ds
                                              [List [[Tuple2 (con bytestring)] (con data)]]
                                              (lam
                                                ds
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              ScriptPurpose_match
                                                              ds
                                                            ]
                                                            (fun Unit [Maybe TxInInfo])
                                                          }
                                                          (lam
                                                            default_arg0
                                                            DCert
                                                            (lam
                                                              thunk
                                                              Unit
                                                              {
                                                                Nothing TxInInfo
                                                              }
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          default_arg0
                                                          (con bytestring)
                                                          (lam
                                                            thunk
                                                            Unit
                                                            { Nothing TxInInfo }
                                                          )
                                                        )
                                                      ]
                                                      (lam
                                                        default_arg0
                                                        StakingCredential
                                                        (lam
                                                          thunk
                                                          Unit
                                                          { Nothing TxInInfo }
                                                        )
                                                      )
                                                    ]
                                                    (lam
                                                      txOutRef
                                                      TxOutRef
                                                      (lam
                                                        thunk
                                                        Unit
                                                        [
                                                          [
                                                            [
                                                              {
                                                                {
                                                                  fFoldableNil_cfoldMap
                                                                  [(lam a (type) [Maybe a]) TxInInfo]
                                                                }
                                                                TxInInfo
                                                              }
                                                              {
                                                                fMonoidFirst
                                                                TxInInfo
                                                              }
                                                            ]
                                                            (lam
                                                              x
                                                              TxInInfo
                                                              [
                                                                {
                                                                  [
                                                                    TxInInfo_match
                                                                    x
                                                                  ]
                                                                  [Maybe TxInInfo]
                                                                }
                                                                (lam
                                                                  ds
                                                                  TxOutRef
                                                                  (lam
                                                                    ds
                                                                    TxOut
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  fEqTxOutRef_c
                                                                                  ds
                                                                                ]
                                                                                txOutRef
                                                                              ]
                                                                            ]
                                                                            (fun Unit [Maybe TxInInfo])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              {
                                                                                Just
                                                                                TxInInfo
                                                                              }
                                                                              x
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          {
                                                                            Nothing
                                                                            TxInInfo
                                                                          }
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          ]
                                                          ds
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    ]
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    equalsByteString
                    (fun (con bytestring) (fun (con bytestring) Bool))
                  )
                  (lam
                    x
                    (con bytestring)
                    (lam
                      y
                      (con bytestring)
                      [
                        [
                          [
                            { (builtin ifThenElse) Bool }
                            [ [ (builtin equalsByteString) x ] y ]
                          ]
                          True
                        ]
                        False
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    fEqCredential_c (fun Credential (fun Credential Bool))
                  )
                  (lam
                    ds
                    Credential
                    (lam
                      ds
                      Credential
                      [
                        [
                          { [ Credential_match ds ] Bool }
                          (lam
                            l
                            (con bytestring)
                            [
                              [
                                { [ Credential_match ds ] Bool }
                                (lam
                                  r
                                  (con bytestring)
                                  [ [ equalsByteString l ] r ]
                                )
                              ]
                              (lam ipv (con bytestring) False)
                            ]
                          )
                        ]
                        (lam
                          a
                          (con bytestring)
                          [
                            [
                              { [ Credential_match ds ] Bool }
                              (lam ipv (con bytestring) False)
                            ]
                            (lam a (con bytestring) [ [ equalsByteString a ] a ]
                            )
                          ]
                        )
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    equalsInteger (fun (con integer) (fun (con integer) Bool))
                  )
                  (lam
                    x
                    (con integer)
                    (lam
                      y
                      (con integer)
                      [
                        [
                          [
                            { (builtin ifThenElse) Bool }
                            [ [ (builtin equalsInteger) x ] y ]
                          ]
                          True
                        ]
                        False
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl
                    fEqStakingCredential_c
                    (fun StakingCredential (fun StakingCredential Bool))
                  )
                  (lam
                    ds
                    StakingCredential
                    (lam
                      ds
                      StakingCredential
                      [
                        [
                          { [ StakingCredential_match ds ] Bool }
                          (lam
                            l
                            Credential
                            [
                              [
                                { [ StakingCredential_match ds ] Bool }
                                (lam r Credential [ [ fEqCredential_c l ] r ])
                              ]
                              (lam
                                ipv
                                (con integer)
                                (lam
                                  ipv
                                  (con integer)
                                  (lam ipv (con integer) False)
                                )
                              )
                            ]
                          )
                        ]
                        (lam
                          a
                          (con integer)
                          (lam
                            b
                            (con integer)
                            (lam
                              c
                              (con integer)
                              [
                                [
                                  { [ StakingCredential_match ds ] Bool }
                                  (lam ipv Credential False)
                                ]
                                (lam
                                  a
                                  (con integer)
                                  (lam
                                    b
                                    (con integer)
                                    (lam
                                      c
                                      (con integer)
                                      [
                                        [
                                          [
                                            {
                                              [
                                                Bool_match
                                                [
                                                  [
                                                    [
                                                      {
                                                        (builtin ifThenElse)
                                                        Bool
                                                      }
                                                      [
                                                        [
                                                          (builtin equalsInteger
                                                          )
                                                          a
                                                        ]
                                                        a
                                                      ]
                                                    ]
                                                    True
                                                  ]
                                                  False
                                                ]
                                              ]
                                              (fun Unit Bool)
                                            }
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        Bool_match
                                                        [
                                                          [
                                                            [
                                                              {
                                                                (builtin
                                                                  ifThenElse
                                                                )
                                                                Bool
                                                              }
                                                              [
                                                                [
                                                                  (builtin
                                                                    equalsInteger
                                                                  )
                                                                  b
                                                                ]
                                                                b
                                                              ]
                                                            ]
                                                            True
                                                          ]
                                                          False
                                                        ]
                                                      ]
                                                      (fun Unit Bool)
                                                    }
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [ [ equalsInteger c ] c ]
                                                    )
                                                  ]
                                                  (lam thunk Unit False)
                                                ]
                                                Unit
                                              ]
                                            )
                                          ]
                                          (lam thunk Unit False)
                                        ]
                                        Unit
                                      ]
                                    )
                                  )
                                )
                              ]
                            )
                          )
                        )
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl fEqAddress_c (fun Address (fun Address Bool)))
                  (lam
                    ds
                    Address
                    (lam
                      ds
                      Address
                      [
                        { [ Address_match ds ] Bool }
                        (lam
                          cred
                          Credential
                          (lam
                            stakingCred
                            [Maybe StakingCredential]
                            [
                              { [ Address_match ds ] Bool }
                              (lam
                                cred
                                Credential
                                (lam
                                  stakingCred
                                  [Maybe StakingCredential]
                                  (let
                                    (nonrec)
                                    (termbind
                                      (nonstrict)
                                      (vardecl j Bool)
                                      [
                                        [
                                          [
                                            {
                                              [
                                                {
                                                  Maybe_match StakingCredential
                                                }
                                                stakingCred
                                              ]
                                              (fun Unit Bool)
                                            }
                                            (lam
                                              a
                                              StakingCredential
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          {
                                                            Maybe_match
                                                            StakingCredential
                                                          }
                                                          stakingCred
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        a
                                                        StakingCredential
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              fEqStakingCredential_c
                                                              a
                                                            ]
                                                            a
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    (lam thunk Unit False)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          ]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      {
                                                        Maybe_match
                                                        StakingCredential
                                                      }
                                                      stakingCred
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam
                                                    ipv
                                                    StakingCredential
                                                    (lam thunk Unit False)
                                                  )
                                                ]
                                                (lam thunk Unit True)
                                              ]
                                              Unit
                                            ]
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                    [
                                      [
                                        { [ Credential_match cred ] Bool }
                                        (lam
                                          l
                                          (con bytestring)
                                          [
                                            [
                                              { [ Credential_match cred ] Bool }
                                              (lam
                                                r
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  [
                                                                    (builtin
                                                                      equalsByteString
                                                                    )
                                                                    l
                                                                  ]
                                                                  r
                                                                ]
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam thunk Unit j)
                                                    ]
                                                    (lam thunk Unit False)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            ]
                                            (lam ipv (con bytestring) False)
                                          ]
                                        )
                                      ]
                                      (lam
                                        a
                                        (con bytestring)
                                        [
                                          [
                                            { [ Credential_match cred ] Bool }
                                            (lam ipv (con bytestring) False)
                                          ]
                                          (lam
                                            a
                                            (con bytestring)
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      Bool_match
                                                      [
                                                        [
                                                          [
                                                            {
                                                              (builtin
                                                                ifThenElse
                                                              )
                                                              Bool
                                                            }
                                                            [
                                                              [
                                                                (builtin
                                                                  equalsByteString
                                                                )
                                                                a
                                                              ]
                                                              a
                                                            ]
                                                          ]
                                                          True
                                                        ]
                                                        False
                                                      ]
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam thunk Unit j)
                                                ]
                                                (lam thunk Unit False)
                                              ]
                                              Unit
                                            ]
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                )
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                )
                (termbind
                  (strict)
                  (vardecl getContinuingOutputs (fun ScriptContext [List TxOut])
                  )
                  (lam
                    ctx
                    ScriptContext
                    [
                      [
                        [
                          {
                            [ { Maybe_match TxInInfo } [ findOwnInput ctx ] ]
                            (fun Unit [List TxOut])
                          }
                          (lam
                            ds
                            TxInInfo
                            (lam
                              thunk
                              Unit
                              [
                                { [ TxInInfo_match ds ] [List TxOut] }
                                (lam
                                  ds
                                  TxOutRef
                                  (lam
                                    ds
                                    TxOut
                                    [
                                      { [ TxOut_match ds ] [List TxOut] }
                                      (lam
                                        ds
                                        Address
                                        (lam
                                          ds
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          (lam
                                            ds
                                            [Maybe (con bytestring)]
                                            [
                                              {
                                                [ ScriptContext_match ctx ]
                                                [List TxOut]
                                              }
                                              (lam
                                                ds
                                                TxInfo
                                                (lam
                                                  ds
                                                  ScriptPurpose
                                                  [
                                                    {
                                                      [ TxInfo_match ds ]
                                                      [List TxOut]
                                                    }
                                                    (lam
                                                      ds
                                                      [List TxInInfo]
                                                      (lam
                                                        ds
                                                        [List TxOut]
                                                        (lam
                                                          ds
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [List DCert]
                                                              (lam
                                                                ds
                                                                [List [[Tuple2 StakingCredential] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Interval (con integer)]
                                                                  (lam
                                                                    ds
                                                                    [List (con bytestring)]
                                                                    (lam
                                                                      ds
                                                                      [List [[Tuple2 (con bytestring)] (con data)]]
                                                                      (lam
                                                                        ds
                                                                        (con bytestring)
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                {
                                                                                  foldr
                                                                                  TxOut
                                                                                }
                                                                                [List TxOut]
                                                                              }
                                                                              (lam
                                                                                e
                                                                                TxOut
                                                                                (lam
                                                                                  xs
                                                                                  [List TxOut]
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        TxOut_match
                                                                                        e
                                                                                      ]
                                                                                      [List TxOut]
                                                                                    }
                                                                                    (lam
                                                                                      ds
                                                                                      Address
                                                                                      (lam
                                                                                        ds
                                                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                        (lam
                                                                                          ds
                                                                                          [Maybe (con bytestring)]
                                                                                          [
                                                                                            [
                                                                                              [
                                                                                                {
                                                                                                  [
                                                                                                    Bool_match
                                                                                                    [
                                                                                                      [
                                                                                                        fEqAddress_c
                                                                                                        ds
                                                                                                      ]
                                                                                                      ds
                                                                                                    ]
                                                                                                  ]
                                                                                                  (fun Unit [List TxOut])
                                                                                                }
                                                                                                (lam
                                                                                                  thunk
                                                                                                  Unit
                                                                                                  [
                                                                                                    [
                                                                                                      {
                                                                                                        Cons
                                                                                                        TxOut
                                                                                                      }
                                                                                                      e
                                                                                                    ]
                                                                                                    xs
                                                                                                  ]
                                                                                                )
                                                                                              ]
                                                                                              (lam
                                                                                                thunk
                                                                                                Unit
                                                                                                xs
                                                                                              )
                                                                                            ]
                                                                                            Unit
                                                                                          ]
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                            {
                                                                              Nil
                                                                              TxOut
                                                                            }
                                                                          ]
                                                                          ds
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        ]
                        (lam
                          thunk
                          Unit
                          [
                            { error [List TxOut] }
                            [
                              {
                                [
                                  Unit_match
                                  [
                                    [
                                      { (builtin chooseUnit) Unit }
                                      [
                                        (builtin trace)
                                        (con
                                          string
                                            "Can't get any continuing outputs"
                                        )
                                      ]
                                    ]
                                    Unit
                                  ]
                                ]
                                (con unit)
                              }
                              (con unit ())
                            ]
                          ]
                        )
                      ]
                      Unit
                    ]
                  )
                )
                (let
                  (rec)
                  (termbind
                    (nonstrict)
                    (vardecl
                      fFunctorNil_cfmap
                      (all a (type) (all b (type) (fun (fun a b) (fun [List a] [List b]))))
                    )
                    (abs
                      a
                      (type)
                      (abs
                        b
                        (type)
                        (lam
                          f
                          (fun a b)
                          (lam
                            l
                            [List a]
                            [
                              [
                                [
                                  { [ { Nil_match a } l ] (fun Unit [List b]) }
                                  (lam thunk Unit { Nil b })
                                ]
                                (lam
                                  x
                                  a
                                  (lam
                                    xs
                                    [List a]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [ { Cons b } [ f x ] ]
                                        [
                                          [ { { fFunctorNil_cfmap a } b } f ] xs
                                        ]
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                  )
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl
                        union
                        (all k (type) (all v (type) (all r (type) (fun [(lam a (type) (fun a (fun a Bool))) k] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] [[These v] r]]))))))
                      )
                      (abs
                        k
                        (type)
                        (abs
                          v
                          (type)
                          (abs
                            r
                            (type)
                            (lam
                              dEq
                              [(lam a (type) (fun a (fun a Bool))) k]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] v]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) k] r]
                                  [
                                    [
                                      [
                                        {
                                          { foldr [[Tuple2 k] [[These v] r]] }
                                          [List [[Tuple2 k] [[These v] r]]]
                                        }
                                        { Cons [[Tuple2 k] [[These v] r]] }
                                      ]
                                      [
                                        [
                                          {
                                            { fFunctorNil_cfmap [[Tuple2 k] r] }
                                            [[Tuple2 k] [[These v] r]]
                                          }
                                          (lam
                                            ds
                                            [[Tuple2 k] r]
                                            [
                                              {
                                                [ { { Tuple2_match k } r } ds ]
                                                [[Tuple2 k] [[These v] r]]
                                              }
                                              (lam
                                                c
                                                k
                                                (lam
                                                  b
                                                  r
                                                  [
                                                    [
                                                      {
                                                        { Tuple2 k }
                                                        [[These v] r]
                                                      }
                                                      c
                                                    ]
                                                    [ { { That v } r } b ]
                                                  ]
                                                )
                                              )
                                            ]
                                          )
                                        ]
                                        [
                                          [
                                            [
                                              {
                                                { foldr [[Tuple2 k] r] }
                                                [List [[Tuple2 k] r]]
                                              }
                                              (lam
                                                e
                                                [[Tuple2 k] r]
                                                (lam
                                                  xs
                                                  [List [[Tuple2 k] r]]
                                                  [
                                                    {
                                                      [
                                                        { { Tuple2_match k } r }
                                                        e
                                                      ]
                                                      [List [[Tuple2 k] r]]
                                                    }
                                                    (lam
                                                      c
                                                      k
                                                      (lam
                                                        ds
                                                        r
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Bool_match
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          {
                                                                            fFoldableNil_cfoldMap
                                                                            [(lam a (type) a) Bool]
                                                                          }
                                                                          [[Tuple2 k] v]
                                                                        }
                                                                        [
                                                                          {
                                                                            fMonoidSum
                                                                            Bool
                                                                          }
                                                                          fAdditiveMonoidBool
                                                                        ]
                                                                      ]
                                                                      (lam
                                                                        ds
                                                                        [[Tuple2 k] v]
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                {
                                                                                  Tuple2_match
                                                                                  k
                                                                                }
                                                                                v
                                                                              }
                                                                              ds
                                                                            ]
                                                                            Bool
                                                                          }
                                                                          (lam
                                                                            c
                                                                            k
                                                                            (lam
                                                                              ds
                                                                              v
                                                                              [
                                                                                [
                                                                                  dEq
                                                                                  c
                                                                                ]
                                                                                c
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    ]
                                                                    ds
                                                                  ]
                                                                ]
                                                                (fun Unit [List [[Tuple2 k] r]])
                                                              }
                                                              (lam thunk Unit xs
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  {
                                                                    Cons
                                                                    [[Tuple2 k] r]
                                                                  }
                                                                  e
                                                                ]
                                                                xs
                                                              ]
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            ]
                                            { Nil [[Tuple2 k] r] }
                                          ]
                                          ds
                                        ]
                                      ]
                                    ]
                                    [
                                      [
                                        {
                                          { fFunctorNil_cfmap [[Tuple2 k] v] }
                                          [[Tuple2 k] [[These v] r]]
                                        }
                                        (lam
                                          ds
                                          [[Tuple2 k] v]
                                          [
                                            {
                                              [ { { Tuple2_match k } v } ds ]
                                              [[Tuple2 k] [[These v] r]]
                                            }
                                            (lam
                                              c
                                              k
                                              (lam
                                                i
                                                v
                                                (let
                                                  (rec)
                                                  (termbind
                                                    (strict)
                                                    (vardecl
                                                      go
                                                      (fun [List [[Tuple2 k] r]] [[These v] r])
                                                    )
                                                    (lam
                                                      ds
                                                      [List [[Tuple2 k] r]]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Nil_match
                                                                  [[Tuple2 k] r]
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit [[These v] r])
                                                            }
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                { { This v } r }
                                                                i
                                                              ]
                                                            )
                                                          ]
                                                          (lam
                                                            ds
                                                            [[Tuple2 k] r]
                                                            (lam
                                                              xs
                                                              [List [[Tuple2 k] r]]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          k
                                                                        }
                                                                        r
                                                                      }
                                                                      ds
                                                                    ]
                                                                    [[These v] r]
                                                                  }
                                                                  (lam
                                                                    c
                                                                    k
                                                                    (lam
                                                                      i
                                                                      r
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                [
                                                                                  [
                                                                                    dEq
                                                                                    c
                                                                                  ]
                                                                                  c
                                                                                ]
                                                                              ]
                                                                              (fun Unit [[These v] r])
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      These
                                                                                      v
                                                                                    }
                                                                                    r
                                                                                  }
                                                                                  i
                                                                                ]
                                                                                i
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              go
                                                                              xs
                                                                            ]
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                  [
                                                    [
                                                      {
                                                        { Tuple2 k }
                                                        [[These v] r]
                                                      }
                                                      c
                                                    ]
                                                    [ go ds ]
                                                  ]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      ]
                                      ds
                                    ]
                                  ]
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        unionVal
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]))
                      )
                      (lam
                        ds
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          ds
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (let
                            (rec)
                            (termbind
                              (strict)
                              (vardecl
                                go
                                (fun [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                              )
                              (lam
                                ds
                                [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                                [
                                  [
                                    [
                                      {
                                        [
                                          {
                                            Nil_match
                                            [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                          }
                                          ds
                                        ]
                                        (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]])
                                      }
                                      (lam
                                        thunk
                                        Unit
                                        {
                                          Nil
                                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                        }
                                      )
                                    ]
                                    (lam
                                      ds
                                      [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                      (lam
                                        xs
                                        [List [[Tuple2 (con bytestring)] [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                }
                                                ds
                                              ]
                                              [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                            }
                                            (lam
                                              c
                                              (con bytestring)
                                              (lam
                                                i
                                                [[These [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                [
                                                  [
                                                    {
                                                      Cons
                                                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                                    }
                                                    [
                                                      [
                                                        {
                                                          {
                                                            Tuple2
                                                            (con bytestring)
                                                          }
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                        }
                                                        c
                                                      ]
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  {
                                                                    These_match
                                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                                  }
                                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                                }
                                                                i
                                                              ]
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                            }
                                                            (lam
                                                              b
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                              (let
                                                                (rec)
                                                                (termbind
                                                                  (strict)
                                                                  (vardecl
                                                                    go
                                                                    (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                  )
                                                                  (lam
                                                                    ds
                                                                    [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Nil_match
                                                                                [[Tuple2 (con bytestring)] (con integer)]
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            {
                                                                              Nil
                                                                              [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                            }
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          ds
                                                                          [[Tuple2 (con bytestring)] (con integer)]
                                                                          (lam
                                                                            xs
                                                                            [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                {
                                                                                  [
                                                                                    {
                                                                                      {
                                                                                        Tuple2_match
                                                                                        (con bytestring)
                                                                                      }
                                                                                      (con integer)
                                                                                    }
                                                                                    ds
                                                                                  ]
                                                                                  [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                                }
                                                                                (lam
                                                                                  c
                                                                                  (con bytestring)
                                                                                  (lam
                                                                                    i
                                                                                    (con integer)
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          Cons
                                                                                          [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                        }
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              {
                                                                                                Tuple2
                                                                                                (con bytestring)
                                                                                              }
                                                                                              [[These (con integer)] (con integer)]
                                                                                            }
                                                                                            c
                                                                                          ]
                                                                                          [
                                                                                            {
                                                                                              {
                                                                                                That
                                                                                                (con integer)
                                                                                              }
                                                                                              (con integer)
                                                                                            }
                                                                                            i
                                                                                          ]
                                                                                        ]
                                                                                      ]
                                                                                      [
                                                                                        go
                                                                                        xs
                                                                                      ]
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              ]
                                                                            )
                                                                          )
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                                [ go b ]
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            a
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            (lam
                                                              b
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      {
                                                                        {
                                                                          union
                                                                          (con bytestring)
                                                                        }
                                                                        (con integer)
                                                                      }
                                                                      (con integer)
                                                                    }
                                                                    equalsByteString
                                                                  ]
                                                                  a
                                                                ]
                                                                b
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          a
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                          (let
                                                            (rec)
                                                            (termbind
                                                              (strict)
                                                              (vardecl
                                                                go
                                                                (fun [List [[Tuple2 (con bytestring)] (con integer)]] [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                              )
                                                              (lam
                                                                ds
                                                                [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Nil_match
                                                                            [[Tuple2 (con bytestring)] (con integer)]
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]])
                                                                      }
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        {
                                                                          Nil
                                                                          [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                        }
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      ds
                                                                      [[Tuple2 (con bytestring)] (con integer)]
                                                                      (lam
                                                                        xs
                                                                        [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  {
                                                                                    Tuple2_match
                                                                                    (con bytestring)
                                                                                  }
                                                                                  (con integer)
                                                                                }
                                                                                ds
                                                                              ]
                                                                              [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                            }
                                                                            (lam
                                                                              c
                                                                              (con bytestring)
                                                                              (lam
                                                                                i
                                                                                (con integer)
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      Cons
                                                                                      [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            Tuple2
                                                                                            (con bytestring)
                                                                                          }
                                                                                          [[These (con integer)] (con integer)]
                                                                                        }
                                                                                        c
                                                                                      ]
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            This
                                                                                            (con integer)
                                                                                          }
                                                                                          (con integer)
                                                                                        }
                                                                                        i
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                  [
                                                                                    go
                                                                                    xs
                                                                                  ]
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            )
                                                            [ go a ]
                                                          )
                                                        )
                                                      ]
                                                    ]
                                                  ]
                                                  [ go xs ]
                                                ]
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                            [
                              go
                              [
                                [
                                  [
                                    {
                                      {
                                        { union (con bytestring) }
                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                      }
                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                    }
                                    equalsByteString
                                  ]
                                  ds
                                ]
                                ds
                              ]
                            ]
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        checkBinRel
                        (fun (fun (con integer) (fun (con integer) Bool)) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] Bool)))
                      )
                      (lam
                        f
                        (fun (con integer) (fun (con integer) Bool))
                        (lam
                          l
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (lam
                            r
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl
                                  go
                                  (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] Bool)
                                )
                                (lam
                                  xs
                                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                  [
                                    [
                                      [
                                        {
                                          [
                                            {
                                              Nil_match
                                              [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                            }
                                            xs
                                          ]
                                          (fun Unit Bool)
                                        }
                                        (lam thunk Unit True)
                                      ]
                                      (lam
                                        ds
                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                        (lam
                                          xs
                                          [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              {
                                                [
                                                  {
                                                    {
                                                      Tuple2_match
                                                      (con bytestring)
                                                    }
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                  }
                                                  ds
                                                ]
                                                Bool
                                              }
                                              (lam
                                                ds
                                                (con bytestring)
                                                (lam
                                                  x
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                  (let
                                                    (rec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        go
                                                        (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] Bool)
                                                      )
                                                      (lam
                                                        xs
                                                        [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Nil_match
                                                                    [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                  }
                                                                  xs
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [ go xs ]
                                                              )
                                                            ]
                                                            (lam
                                                              ds
                                                              [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                              (lam
                                                                xs
                                                                [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          {
                                                                            Tuple2_match
                                                                            (con bytestring)
                                                                          }
                                                                          [[These (con integer)] (con integer)]
                                                                        }
                                                                        ds
                                                                      ]
                                                                      Bool
                                                                    }
                                                                    (lam
                                                                      ds
                                                                      (con bytestring)
                                                                      (lam
                                                                        x
                                                                        [[These (con integer)] (con integer)]
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      These_match
                                                                                      (con integer)
                                                                                    }
                                                                                    (con integer)
                                                                                  }
                                                                                  x
                                                                                ]
                                                                                Bool
                                                                              }
                                                                              (lam
                                                                                b
                                                                                (con integer)
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          Bool_match
                                                                                          [
                                                                                            [
                                                                                              f
                                                                                              (con
                                                                                                integer
                                                                                                  0
                                                                                              )
                                                                                            ]
                                                                                            b
                                                                                          ]
                                                                                        ]
                                                                                        (fun Unit Bool)
                                                                                      }
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          go
                                                                                          xs
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      False
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              a
                                                                              (con integer)
                                                                              (lam
                                                                                b
                                                                                (con integer)
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        [
                                                                                          Bool_match
                                                                                          [
                                                                                            [
                                                                                              f
                                                                                              a
                                                                                            ]
                                                                                            b
                                                                                          ]
                                                                                        ]
                                                                                        (fun Unit Bool)
                                                                                      }
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          go
                                                                                          xs
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      False
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            a
                                                                            (con integer)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          f
                                                                                          a
                                                                                        ]
                                                                                        (con
                                                                                          integer
                                                                                            0
                                                                                        )
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      go
                                                                                      xs
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  False
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                    [ go x ]
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              )
                              [ go [ [ unionVal l ] r ] ]
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        checkOwnOutputConstraint
                        (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun ScriptContext (fun [OutputConstraint o] Bool))))
                      )
                      (abs
                        o
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) o]
                          (lam
                            ctx
                            ScriptContext
                            (lam
                              ds
                              [OutputConstraint o]
                              [
                                { [ ScriptContext_match ctx ] Bool }
                                (lam
                                  ds
                                  TxInfo
                                  (lam
                                    ds
                                    ScriptPurpose
                                    [
                                      {
                                        [ { OutputConstraint_match o } ds ] Bool
                                      }
                                      (lam
                                        ds
                                        o
                                        (lam
                                          ds
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          (let
                                            (nonrec)
                                            (termbind
                                              (nonstrict)
                                              (vardecl
                                                hsh [Maybe (con bytestring)]
                                              )
                                              [
                                                [ findDatumHash [ dToData ds ] ]
                                                ds
                                              ]
                                            )
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      Bool_match
                                                      [
                                                        [
                                                          [
                                                            {
                                                              {
                                                                fFoldableNil_cfoldMap
                                                                [(lam a (type) a) Bool]
                                                              }
                                                              TxOut
                                                            }
                                                            [
                                                              {
                                                                fMonoidSum Bool
                                                              }
                                                              fAdditiveMonoidBool
                                                            ]
                                                          ]
                                                          (lam
                                                            ds
                                                            TxOut
                                                            [
                                                              {
                                                                [
                                                                  TxOut_match ds
                                                                ]
                                                                Bool
                                                              }
                                                              (lam
                                                                ds
                                                                Address
                                                                (lam
                                                                  ds
                                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Maybe (con bytestring)]
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              {
                                                                                Maybe_match
                                                                                (con bytestring)
                                                                              }
                                                                              ds
                                                                            ]
                                                                            (fun Unit Bool)
                                                                          }
                                                                          (lam
                                                                            svh
                                                                            (con bytestring)
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            [
                                                                                              checkBinRel
                                                                                              equalsInteger
                                                                                            ]
                                                                                            ds
                                                                                          ]
                                                                                          ds
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit Bool)
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              [
                                                                                                {
                                                                                                  Maybe_match
                                                                                                  (con bytestring)
                                                                                                }
                                                                                                hsh
                                                                                              ]
                                                                                              (fun Unit Bool)
                                                                                            }
                                                                                            (lam
                                                                                              a
                                                                                              (con bytestring)
                                                                                              (lam
                                                                                                thunk
                                                                                                Unit
                                                                                                [
                                                                                                  [
                                                                                                    equalsByteString
                                                                                                    a
                                                                                                  ]
                                                                                                  svh
                                                                                                ]
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            False
                                                                                          )
                                                                                        ]
                                                                                        Unit
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    False
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          False
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              )
                                                            ]
                                                          )
                                                        ]
                                                        [
                                                          getContinuingOutputs
                                                          ctx
                                                        ]
                                                      ]
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam thunk Unit True)
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      {
                                                        (builtin chooseUnit)
                                                        Bool
                                                      }
                                                      [
                                                        (builtin trace)
                                                        (con
                                                          string
                                                            "Output constraint"
                                                        )
                                                      ]
                                                    ]
                                                    False
                                                  ]
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                    (datatypebind
                      (datatype
                        (tyvardecl Ordering (type))

                        Ordering_match
                        (vardecl EQ Ordering)
                        (vardecl GT Ordering)
                        (vardecl LT Ordering)
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        fOrdData_ccompare
                        (fun (con integer) (fun (con integer) Ordering))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                {
                                  [
                                    Bool_match
                                    [
                                      [
                                        [
                                          { (builtin ifThenElse) Bool }
                                          [ [ (builtin equalsInteger) x ] y ]
                                        ]
                                        True
                                      ]
                                      False
                                    ]
                                  ]
                                  (fun Unit Ordering)
                                }
                                (lam thunk Unit EQ)
                              ]
                              (lam
                                thunk
                                Unit
                                [
                                  [
                                    [
                                      {
                                        [
                                          Bool_match
                                          [
                                            [
                                              [
                                                { (builtin ifThenElse) Bool }
                                                [
                                                  [
                                                    (builtin
                                                      lessThanEqualsInteger
                                                    )
                                                    x
                                                  ]
                                                  y
                                                ]
                                              ]
                                              True
                                            ]
                                            False
                                          ]
                                        ]
                                        (fun Unit Ordering)
                                      }
                                      (lam thunk Unit LT)
                                    ]
                                    (lam thunk Unit GT)
                                  ]
                                  Unit
                                ]
                              )
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        fOrdInteger_cmax
                        (fun (con integer) (fun (con integer) (con integer)))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                {
                                  [
                                    Bool_match
                                    [
                                      [
                                        [
                                          { (builtin ifThenElse) Bool }
                                          [
                                            [
                                              (builtin lessThanEqualsInteger) x
                                            ]
                                            y
                                          ]
                                        ]
                                        True
                                      ]
                                      False
                                    ]
                                  ]
                                  (fun Unit (con integer))
                                }
                                (lam thunk Unit y)
                              ]
                              (lam thunk Unit x)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        fOrdInteger_cmin
                        (fun (con integer) (fun (con integer) (con integer)))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                {
                                  [
                                    Bool_match
                                    [
                                      [
                                        [
                                          { (builtin ifThenElse) Bool }
                                          [
                                            [
                                              (builtin lessThanEqualsInteger) x
                                            ]
                                            y
                                          ]
                                        ]
                                        True
                                      ]
                                      False
                                    ]
                                  ]
                                  (fun Unit (con integer))
                                }
                                (lam thunk Unit x)
                              ]
                              (lam thunk Unit y)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        greaterThanEqInteger
                        (fun (con integer) (fun (con integer) Bool))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [ [ (builtin greaterThanEqualsInteger) x ] y ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        greaterThanInteger
                        (fun (con integer) (fun (con integer) Bool))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [ [ (builtin greaterThanInteger) x ] y ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        lessThanInteger
                        (fun (con integer) (fun (con integer) Bool))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [ [ (builtin lessThanInteger) x ] y ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      )
                    )
                    (datatypebind
                      (datatype
                        (tyvardecl Ord (fun (type) (type)))
                        (tyvardecl a (type))
                        Ord_match
                        (vardecl
                          CConsOrd
                          (fun [(lam a (type) (fun a (fun a Bool))) a] (fun (fun a (fun a Ordering)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a Bool)) (fun (fun a (fun a a)) (fun (fun a (fun a a)) [Ord a]))))))))
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        lessThanEqInteger
                        (fun (con integer) (fun (con integer) Bool))
                      )
                      (lam
                        x
                        (con integer)
                        (lam
                          y
                          (con integer)
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [ [ (builtin lessThanEqualsInteger) x ] y ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      )
                    )
                    (termbind
                      (nonstrict)
                      (vardecl fOrdPOSIXTime [Ord (con integer)])
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [ { CConsOrd (con integer) } equalsInteger ]
                                    fOrdData_ccompare
                                  ]
                                  lessThanInteger
                                ]
                                lessThanEqInteger
                              ]
                              greaterThanInteger
                            ]
                            greaterThanEqInteger
                          ]
                          fOrdInteger_cmax
                        ]
                        fOrdInteger_cmin
                      ]
                    )
                    (termbind
                      (strict)
                      (vardecl
                        compare
                        (all a (type) (fun [Ord a] (fun a (fun a Ordering))))
                      )
                      (abs
                        a
                        (type)
                        (lam
                          v
                          [Ord a]
                          [
                            { [ { Ord_match a } v ] (fun a (fun a Ordering)) }
                            (lam
                              v
                              [(lam a (type) (fun a (fun a Bool))) a]
                              (lam
                                v
                                (fun a (fun a Ordering))
                                (lam
                                  v
                                  (fun a (fun a Bool))
                                  (lam
                                    v
                                    (fun a (fun a Bool))
                                    (lam
                                      v
                                      (fun a (fun a Bool))
                                      (lam
                                        v
                                        (fun a (fun a Bool))
                                        (lam
                                          v
                                          (fun a (fun a a))
                                          (lam v (fun a (fun a a)) v)
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        hull_ccompare
                        (all a (type) (fun [Ord a] (fun [Extended a] (fun [Extended a] Ordering))))
                      )
                      (abs
                        a
                        (type)
                        (lam
                          dOrd
                          [Ord a]
                          (lam
                            ds
                            [Extended a]
                            (lam
                              ds
                              [Extended a]
                              (let
                                (nonrec)
                                (termbind
                                  (strict)
                                  (vardecl fail (fun (all a (type) a) Ordering))
                                  (lam ds (all a (type) a) (error Ordering))
                                )
                                [
                                  [
                                    [
                                      [
                                        {
                                          [ { Extended_match a } ds ]
                                          (fun Unit Ordering)
                                        }
                                        (lam
                                          default_arg0
                                          a
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                [
                                                  [
                                                    {
                                                      [
                                                        { Extended_match a } ds
                                                      ]
                                                      (fun Unit Ordering)
                                                    }
                                                    (lam
                                                      default_arg0
                                                      a
                                                      (lam
                                                        thunk
                                                        Unit
                                                        (let
                                                          (nonrec)
                                                          (termbind
                                                            (strict)
                                                            (vardecl
                                                              fail
                                                              (fun (all a (type) a) Ordering)
                                                            )
                                                            (lam
                                                              ds
                                                              (all a (type) a)
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        default_arg0
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    l
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            [
                                                                                              {
                                                                                                [
                                                                                                  {
                                                                                                    Extended_match
                                                                                                    a
                                                                                                  }
                                                                                                  ds
                                                                                                ]
                                                                                                (fun Unit Ordering)
                                                                                              }
                                                                                              (lam
                                                                                                r
                                                                                                a
                                                                                                (lam
                                                                                                  thunk
                                                                                                  Unit
                                                                                                  [
                                                                                                    [
                                                                                                      [
                                                                                                        {
                                                                                                          compare
                                                                                                          a
                                                                                                        }
                                                                                                        dOrd
                                                                                                      ]
                                                                                                      l
                                                                                                    ]
                                                                                                    r
                                                                                                  ]
                                                                                                )
                                                                                              )
                                                                                            ]
                                                                                            (lam
                                                                                              thunk
                                                                                              Unit
                                                                                              [
                                                                                                fail
                                                                                                (abs
                                                                                                  e
                                                                                                  (type)
                                                                                                  (error
                                                                                                    e
                                                                                                  )
                                                                                                )
                                                                                              ]
                                                                                            )
                                                                                          ]
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              fail
                                                                                              (abs
                                                                                                e
                                                                                                (type)
                                                                                                (error
                                                                                                  e
                                                                                                )
                                                                                              )
                                                                                            ]
                                                                                          )
                                                                                        ]
                                                                                        Unit
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                GT
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  {
                                                                                    Extended_match
                                                                                    a
                                                                                  }
                                                                                  ds
                                                                                ]
                                                                                (fun Unit Ordering)
                                                                              }
                                                                              (lam
                                                                                l
                                                                                a
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            [
                                                                                              {
                                                                                                Extended_match
                                                                                                a
                                                                                              }
                                                                                              ds
                                                                                            ]
                                                                                            (fun Unit Ordering)
                                                                                          }
                                                                                          (lam
                                                                                            r
                                                                                            a
                                                                                            (lam
                                                                                              thunk
                                                                                              Unit
                                                                                              [
                                                                                                [
                                                                                                  [
                                                                                                    {
                                                                                                      compare
                                                                                                      a
                                                                                                    }
                                                                                                    dOrd
                                                                                                  ]
                                                                                                  l
                                                                                                ]
                                                                                                r
                                                                                              ]
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                        (lam
                                                                                          thunk
                                                                                          Unit
                                                                                          [
                                                                                            fail
                                                                                            (abs
                                                                                              e
                                                                                              (type)
                                                                                              (error
                                                                                                e
                                                                                              )
                                                                                            )
                                                                                          ]
                                                                                        )
                                                                                      ]
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          fail
                                                                                          (abs
                                                                                            e
                                                                                            (type)
                                                                                            (error
                                                                                              e
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    Unit
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                fail
                                                                                (abs
                                                                                  e
                                                                                  (type)
                                                                                  (error
                                                                                    e
                                                                                  )
                                                                                )
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            GT
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    LT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                          [
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        Extended_match
                                                                        a
                                                                      }
                                                                      ds
                                                                    ]
                                                                    (fun Unit Ordering)
                                                                  }
                                                                  (lam
                                                                    default_arg0
                                                                    a
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    fail
                                                                    (abs
                                                                      e
                                                                      (type)
                                                                      (error e)
                                                                    )
                                                                  ]
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Extended_match
                                                                              a
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Ordering)
                                                                        }
                                                                        (lam
                                                                          default_arg0
                                                                          a
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          fail
                                                                          (abs
                                                                            e
                                                                            (type)
                                                                            (error
                                                                              e
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      EQ
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      )
                                                    )
                                                  ]
                                                  (lam thunk Unit GT)
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        fail
                                                        (fun (all a (type) a) Ordering)
                                                      )
                                                      (lam
                                                        ds
                                                        (all a (type) a)
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              l
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            {
                                                                                              Extended_match
                                                                                              a
                                                                                            }
                                                                                            ds
                                                                                          ]
                                                                                          (fun Unit Ordering)
                                                                                        }
                                                                                        (lam
                                                                                          r
                                                                                          a
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    compare
                                                                                                    a
                                                                                                  }
                                                                                                  dOrd
                                                                                                ]
                                                                                                l
                                                                                              ]
                                                                                              r
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          fail
                                                                                          (abs
                                                                                            e
                                                                                            (type)
                                                                                            (error
                                                                                              e
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          GT
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Extended_match
                                                                              a
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Ordering)
                                                                        }
                                                                        (lam
                                                                          l
                                                                          a
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        {
                                                                                          Extended_match
                                                                                          a
                                                                                        }
                                                                                        ds
                                                                                      ]
                                                                                      (fun Unit Ordering)
                                                                                    }
                                                                                    (lam
                                                                                      r
                                                                                      a
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          [
                                                                                            [
                                                                                              {
                                                                                                compare
                                                                                                a
                                                                                              }
                                                                                              dOrd
                                                                                            ]
                                                                                            l
                                                                                          ]
                                                                                          r
                                                                                        ]
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          fail
                                                                          (abs
                                                                            e
                                                                            (type)
                                                                            (error
                                                                              e
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      GT
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit LT)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Extended_match
                                                                  a
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit Ordering)
                                                            }
                                                            (lam
                                                              default_arg0
                                                              a
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              fail
                                                              (abs
                                                                e
                                                                (type)
                                                                (error e)
                                                              )
                                                            ]
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        Extended_match
                                                                        a
                                                                      }
                                                                      ds
                                                                    ]
                                                                    (fun Unit Ordering)
                                                                  }
                                                                  (lam
                                                                    default_arg0
                                                                    a
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    fail
                                                                    (abs
                                                                      e
                                                                      (type)
                                                                      (error e)
                                                                    )
                                                                  ]
                                                                )
                                                              ]
                                                              (lam thunk Unit EQ
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        )
                                      ]
                                      (lam
                                        thunk
                                        Unit
                                        [
                                          [
                                            [
                                              [
                                                {
                                                  [ { Extended_match a } ds ]
                                                  (fun Unit Ordering)
                                                }
                                                (lam
                                                  default_arg0
                                                  a
                                                  (lam thunk Unit LT)
                                                )
                                              ]
                                              (lam thunk Unit EQ)
                                            ]
                                            (lam thunk Unit LT)
                                          ]
                                          Unit
                                        ]
                                      )
                                    ]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            [
                                              {
                                                [ { Extended_match a } ds ]
                                                (fun Unit Ordering)
                                              }
                                              (lam
                                                default_arg0
                                                a
                                                (lam
                                                  thunk
                                                  Unit
                                                  (let
                                                    (nonrec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        fail
                                                        (fun (all a (type) a) Ordering)
                                                      )
                                                      (lam
                                                        ds
                                                        (all a (type) a)
                                                        [
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Extended_match
                                                                      a
                                                                    }
                                                                    ds
                                                                  ]
                                                                  (fun Unit Ordering)
                                                                }
                                                                (lam
                                                                  default_arg0
                                                                  a
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                {
                                                                                  Extended_match
                                                                                  a
                                                                                }
                                                                                ds
                                                                              ]
                                                                              (fun Unit Ordering)
                                                                            }
                                                                            (lam
                                                                              l
                                                                              a
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          [
                                                                                            {
                                                                                              Extended_match
                                                                                              a
                                                                                            }
                                                                                            ds
                                                                                          ]
                                                                                          (fun Unit Ordering)
                                                                                        }
                                                                                        (lam
                                                                                          r
                                                                                          a
                                                                                          (lam
                                                                                            thunk
                                                                                            Unit
                                                                                            [
                                                                                              [
                                                                                                [
                                                                                                  {
                                                                                                    compare
                                                                                                    a
                                                                                                  }
                                                                                                  dOrd
                                                                                                ]
                                                                                                l
                                                                                              ]
                                                                                              r
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          fail
                                                                                          (abs
                                                                                            e
                                                                                            (type)
                                                                                            (error
                                                                                              e
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        fail
                                                                                        (abs
                                                                                          e
                                                                                          (type)
                                                                                          (error
                                                                                            e
                                                                                          )
                                                                                        )
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  Unit
                                                                                ]
                                                                              )
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          GT
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Extended_match
                                                                              a
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Ordering)
                                                                        }
                                                                        (lam
                                                                          l
                                                                          a
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        {
                                                                                          Extended_match
                                                                                          a
                                                                                        }
                                                                                        ds
                                                                                      ]
                                                                                      (fun Unit Ordering)
                                                                                    }
                                                                                    (lam
                                                                                      r
                                                                                      a
                                                                                      (lam
                                                                                        thunk
                                                                                        Unit
                                                                                        [
                                                                                          [
                                                                                            [
                                                                                              {
                                                                                                compare
                                                                                                a
                                                                                              }
                                                                                              dOrd
                                                                                            ]
                                                                                            l
                                                                                          ]
                                                                                          r
                                                                                        ]
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    [
                                                                                      fail
                                                                                      (abs
                                                                                        e
                                                                                        (type)
                                                                                        (error
                                                                                          e
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          fail
                                                                          (abs
                                                                            e
                                                                            (type)
                                                                            (error
                                                                              e
                                                                            )
                                                                          )
                                                                        ]
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      GT
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            ]
                                                            (lam thunk Unit LT)
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Extended_match
                                                                  a
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit Ordering)
                                                            }
                                                            (lam
                                                              default_arg0
                                                              a
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              fail
                                                              (abs
                                                                e
                                                                (type)
                                                                (error e)
                                                              )
                                                            ]
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        Extended_match
                                                                        a
                                                                      }
                                                                      ds
                                                                    ]
                                                                    (fun Unit Ordering)
                                                                  }
                                                                  (lam
                                                                    default_arg0
                                                                    a
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    fail
                                                                    (abs
                                                                      e
                                                                      (type)
                                                                      (error e)
                                                                    )
                                                                  ]
                                                                )
                                                              ]
                                                              (lam thunk Unit EQ
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              )
                                            ]
                                            (lam thunk Unit GT)
                                          ]
                                          (lam
                                            thunk
                                            Unit
                                            (let
                                              (nonrec)
                                              (termbind
                                                (strict)
                                                (vardecl
                                                  fail
                                                  (fun (all a (type) a) Ordering)
                                                )
                                                (lam
                                                  ds
                                                  (all a (type) a)
                                                  [
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              {
                                                                Extended_match a
                                                              }
                                                              ds
                                                            ]
                                                            (fun Unit Ordering)
                                                          }
                                                          (lam
                                                            default_arg0
                                                            a
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          {
                                                                            Extended_match
                                                                            a
                                                                          }
                                                                          ds
                                                                        ]
                                                                        (fun Unit Ordering)
                                                                      }
                                                                      (lam
                                                                        l
                                                                        a
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          [
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      {
                                                                                        Extended_match
                                                                                        a
                                                                                      }
                                                                                      ds
                                                                                    ]
                                                                                    (fun Unit Ordering)
                                                                                  }
                                                                                  (lam
                                                                                    r
                                                                                    a
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              compare
                                                                                              a
                                                                                            }
                                                                                            dOrd
                                                                                          ]
                                                                                          l
                                                                                        ]
                                                                                        r
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    fail
                                                                                    (abs
                                                                                      e
                                                                                      (type)
                                                                                      (error
                                                                                        e
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  fail
                                                                                  (abs
                                                                                    e
                                                                                    (type)
                                                                                    (error
                                                                                      e
                                                                                    )
                                                                                  )
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        fail
                                                                        (abs
                                                                          e
                                                                          (type)
                                                                          (error
                                                                            e
                                                                          )
                                                                        )
                                                                      ]
                                                                    )
                                                                  ]
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    GT
                                                                  )
                                                                ]
                                                                Unit
                                                              ]
                                                            )
                                                          )
                                                        ]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        Extended_match
                                                                        a
                                                                      }
                                                                      ds
                                                                    ]
                                                                    (fun Unit Ordering)
                                                                  }
                                                                  (lam
                                                                    l
                                                                    a
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  {
                                                                                    Extended_match
                                                                                    a
                                                                                  }
                                                                                  ds
                                                                                ]
                                                                                (fun Unit Ordering)
                                                                              }
                                                                              (lam
                                                                                r
                                                                                a
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    [
                                                                                      [
                                                                                        {
                                                                                          compare
                                                                                          a
                                                                                        }
                                                                                        dOrd
                                                                                      ]
                                                                                      l
                                                                                    ]
                                                                                    r
                                                                                  ]
                                                                                )
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                fail
                                                                                (abs
                                                                                  e
                                                                                  (type)
                                                                                  (error
                                                                                    e
                                                                                  )
                                                                                )
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            [
                                                                              fail
                                                                              (abs
                                                                                e
                                                                                (type)
                                                                                (error
                                                                                  e
                                                                                )
                                                                              )
                                                                            ]
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    fail
                                                                    (abs
                                                                      e
                                                                      (type)
                                                                      (error e)
                                                                    )
                                                                  ]
                                                                )
                                                              ]
                                                              (lam thunk Unit GT
                                                              )
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      ]
                                                      (lam thunk Unit LT)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              )
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          { Extended_match a }
                                                          ds
                                                        ]
                                                        (fun Unit Ordering)
                                                      }
                                                      (lam
                                                        default_arg0
                                                        a
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            fail
                                                            (abs
                                                              e (type) (error e)
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [
                                                        fail
                                                        (abs e (type) (error e))
                                                      ]
                                                    )
                                                  ]
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          [
                                                            {
                                                              [
                                                                {
                                                                  Extended_match
                                                                  a
                                                                }
                                                                ds
                                                              ]
                                                              (fun Unit Ordering)
                                                            }
                                                            (lam
                                                              default_arg0
                                                              a
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  fail
                                                                  (abs
                                                                    e
                                                                    (type)
                                                                    (error e)
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              fail
                                                              (abs
                                                                e
                                                                (type)
                                                                (error e)
                                                              )
                                                            ]
                                                          )
                                                        ]
                                                        (lam thunk Unit EQ)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                ]
                                                Unit
                                              ]
                                            )
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                  ]
                                  Unit
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        fOrdUpperBound0_c
                        (all a (type) (fun [Ord a] (fun [UpperBound a] (fun [UpperBound a] Bool))))
                      )
                      (abs
                        a
                        (type)
                        (lam
                          dOrd
                          [Ord a]
                          (lam
                            x
                            [UpperBound a]
                            (lam
                              y
                              [UpperBound a]
                              [
                                { [ { UpperBound_match a } x ] Bool }
                                (lam
                                  v
                                  [Extended a]
                                  (lam
                                    in
                                    Bool
                                    [
                                      { [ { UpperBound_match a } y ] Bool }
                                      (lam
                                        v
                                        [Extended a]
                                        (lam
                                          in
                                          Bool
                                          [
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      Ordering_match
                                                      [
                                                        [
                                                          [
                                                            { hull_ccompare a }
                                                            dOrd
                                                          ]
                                                          v
                                                        ]
                                                        v
                                                      ]
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [ Bool_match in ]
                                                            (fun Unit Bool)
                                                          }
                                                          (lam thunk Unit in)
                                                        ]
                                                        (lam thunk Unit True)
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                ]
                                                (lam thunk Unit False)
                                              ]
                                              (lam thunk Unit True)
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        contains
                        (all a (type) (fun [Ord a] (fun [Interval a] (fun [Interval a] Bool))))
                      )
                      (abs
                        a
                        (type)
                        (lam
                          dOrd
                          [Ord a]
                          (lam
                            ds
                            [Interval a]
                            (lam
                              ds
                              [Interval a]
                              [
                                { [ { Interval_match a } ds ] Bool }
                                (lam
                                  l
                                  [LowerBound a]
                                  (lam
                                    h
                                    [UpperBound a]
                                    [
                                      { [ { Interval_match a } ds ] Bool }
                                      (lam
                                        l
                                        [LowerBound a]
                                        (lam
                                          h
                                          [UpperBound a]
                                          [
                                            {
                                              [ { LowerBound_match a } l ] Bool
                                            }
                                            (lam
                                              v
                                              [Extended a]
                                              (lam
                                                in
                                                Bool
                                                [
                                                  {
                                                    [ { LowerBound_match a } l ]
                                                    Bool
                                                  }
                                                  (lam
                                                    v
                                                    [Extended a]
                                                    (lam
                                                      in
                                                      Bool
                                                      [
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Ordering_match
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          hull_ccompare
                                                                          a
                                                                        }
                                                                        dOrd
                                                                      ]
                                                                      v
                                                                    ]
                                                                    v
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk
                                                                Unit
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          Bool_match
                                                                          in
                                                                        ]
                                                                        (fun Unit Bool)
                                                                      }
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          [
                                                                            [
                                                                              {
                                                                                [
                                                                                  Bool_match
                                                                                  in
                                                                                ]
                                                                                (fun Unit Bool)
                                                                              }
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        fOrdUpperBound0_c
                                                                                        a
                                                                                      }
                                                                                      dOrd
                                                                                    ]
                                                                                    h
                                                                                  ]
                                                                                  h
                                                                                ]
                                                                              )
                                                                            ]
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              False
                                                                            )
                                                                          ]
                                                                          Unit
                                                                        ]
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              fOrdUpperBound0_c
                                                                              a
                                                                            }
                                                                            dOrd
                                                                          ]
                                                                          h
                                                                        ]
                                                                        h
                                                                      ]
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            ]
                                                            (lam
                                                              thunk Unit False
                                                            )
                                                          ]
                                                          (lam
                                                            thunk
                                                            Unit
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    fOrdUpperBound0_c
                                                                    a
                                                                  }
                                                                  dOrd
                                                                ]
                                                                h
                                                              ]
                                                              h
                                                            ]
                                                          )
                                                        ]
                                                        Unit
                                                      ]
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl equalsData (fun (con data) (fun (con data) Bool))
                      )
                      (lam
                        d
                        (con data)
                        (lam
                          d
                          (con data)
                          [
                            [
                              [
                                { (builtin ifThenElse) Bool }
                                [ [ (builtin equalsData) d ] d ]
                              ]
                              True
                            ]
                            False
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        findDatum
                        (fun (con bytestring) (fun TxInfo [Maybe (con data)]))
                      )
                      (lam
                        dsh
                        (con bytestring)
                        (lam
                          ds
                          TxInfo
                          [
                            { [ TxInfo_match ds ] [Maybe (con data)] }
                            (lam
                              ds
                              [List TxInInfo]
                              (lam
                                ds
                                [List TxOut]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [List DCert]
                                      (lam
                                        ds
                                        [List [[Tuple2 StakingCredential] (con integer)]]
                                        (lam
                                          ds
                                          [Interval (con integer)]
                                          (lam
                                            ds
                                            [List (con bytestring)]
                                            (lam
                                              ds
                                              [List [[Tuple2 (con bytestring)] (con data)]]
                                              (lam
                                                ds
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          {
                                                            Maybe_match
                                                            [[Tuple2 (con bytestring)] (con data)]
                                                          }
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) [Maybe a]) [[Tuple2 (con bytestring)] (con data)]]
                                                                  }
                                                                  [[Tuple2 (con bytestring)] (con data)]
                                                                }
                                                                {
                                                                  fMonoidFirst
                                                                  [[Tuple2 (con bytestring)] (con data)]
                                                                }
                                                              ]
                                                              (lam
                                                                x
                                                                [[Tuple2 (con bytestring)] (con data)]
                                                                [
                                                                  {
                                                                    [
                                                                      {
                                                                        {
                                                                          Tuple2_match
                                                                          (con bytestring)
                                                                        }
                                                                        (con data)
                                                                      }
                                                                      x
                                                                    ]
                                                                    [Maybe [[Tuple2 (con bytestring)] (con data)]]
                                                                  }
                                                                  (lam
                                                                    dsh
                                                                    (con bytestring)
                                                                    (lam
                                                                      ds
                                                                      (con data)
                                                                      [
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Bool_match
                                                                                [
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        (builtin
                                                                                          ifThenElse
                                                                                        )
                                                                                        Bool
                                                                                      }
                                                                                      [
                                                                                        [
                                                                                          (builtin
                                                                                            equalsByteString
                                                                                          )
                                                                                          dsh
                                                                                        ]
                                                                                        dsh
                                                                                      ]
                                                                                    ]
                                                                                    True
                                                                                  ]
                                                                                  False
                                                                                ]
                                                                              ]
                                                                              (fun Unit [Maybe [[Tuple2 (con bytestring)] (con data)]])
                                                                            }
                                                                            (lam
                                                                              thunk
                                                                              Unit
                                                                              [
                                                                                {
                                                                                  Just
                                                                                  [[Tuple2 (con bytestring)] (con data)]
                                                                                }
                                                                                x
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            {
                                                                              Nothing
                                                                              [[Tuple2 (con bytestring)] (con data)]
                                                                            }
                                                                          )
                                                                        ]
                                                                        Unit
                                                                      ]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            ]
                                                            ds
                                                          ]
                                                        ]
                                                        (fun Unit [Maybe (con data)])
                                                      }
                                                      (lam
                                                        a
                                                        [[Tuple2 (con bytestring)] (con data)]
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            { Just (con data) }
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    {
                                                                      Tuple2_match
                                                                      (con bytestring)
                                                                    }
                                                                    (con data)
                                                                  }
                                                                  a
                                                                ]
                                                                (con data)
                                                              }
                                                              (lam
                                                                ds
                                                                (con bytestring)
                                                                (lam
                                                                  b (con data) b
                                                                )
                                                              )
                                                            ]
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      { Nothing (con data) }
                                                    )
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        findTxInByTxOutRef
                        (fun TxOutRef (fun TxInfo [Maybe TxInInfo]))
                      )
                      (lam
                        outRef
                        TxOutRef
                        (lam
                          ds
                          TxInfo
                          [
                            { [ TxInfo_match ds ] [Maybe TxInInfo] }
                            (lam
                              ds
                              [List TxInInfo]
                              (lam
                                ds
                                [List TxOut]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [List DCert]
                                      (lam
                                        ds
                                        [List [[Tuple2 StakingCredential] (con integer)]]
                                        (lam
                                          ds
                                          [Interval (con integer)]
                                          (lam
                                            ds
                                            [List (con bytestring)]
                                            (lam
                                              ds
                                              [List [[Tuple2 (con bytestring)] (con data)]]
                                              (lam
                                                ds
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      {
                                                        {
                                                          fFoldableNil_cfoldMap
                                                          [(lam a (type) [Maybe a]) TxInInfo]
                                                        }
                                                        TxInInfo
                                                      }
                                                      { fMonoidFirst TxInInfo }
                                                    ]
                                                    (lam
                                                      x
                                                      TxInInfo
                                                      [
                                                        {
                                                          [ TxInInfo_match x ]
                                                          [Maybe TxInInfo]
                                                        }
                                                        (lam
                                                          ds
                                                          TxOutRef
                                                          (lam
                                                            ds
                                                            TxOut
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    [
                                                                      Bool_match
                                                                      [
                                                                        [
                                                                          fEqTxOutRef_c
                                                                          ds
                                                                        ]
                                                                        outRef
                                                                      ]
                                                                    ]
                                                                    (fun Unit [Maybe TxInInfo])
                                                                  }
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      {
                                                                        Just
                                                                        TxInInfo
                                                                      }
                                                                      x
                                                                    ]
                                                                  )
                                                                ]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  {
                                                                    Nothing
                                                                    TxInInfo
                                                                  }
                                                                )
                                                              ]
                                                              Unit
                                                            ]
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  ]
                                                  ds
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        snd (all a (type) (all b (type) (fun [[Tuple2 a] b] b)))
                      )
                      (abs
                        a
                        (type)
                        (abs
                          b
                          (type)
                          (lam
                            ds
                            [[Tuple2 a] b]
                            [
                              { [ { { Tuple2_match a } b } ds ] b }
                              (lam ds a (lam b b b))
                            ]
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        txSignedBy (fun TxInfo (fun (con bytestring) Bool))
                      )
                      (lam
                        ds
                        TxInfo
                        (lam
                          k
                          (con bytestring)
                          [
                            { [ TxInfo_match ds ] Bool }
                            (lam
                              ds
                              [List TxInInfo]
                              (lam
                                ds
                                [List TxOut]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [List DCert]
                                      (lam
                                        ds
                                        [List [[Tuple2 StakingCredential] (con integer)]]
                                        (lam
                                          ds
                                          [Interval (con integer)]
                                          (lam
                                            ds
                                            [List (con bytestring)]
                                            (lam
                                              ds
                                              [List [[Tuple2 (con bytestring)] (con data)]]
                                              (lam
                                                ds
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          {
                                                            Maybe_match
                                                            (con bytestring)
                                                          }
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  {
                                                                    fFoldableNil_cfoldMap
                                                                    [(lam a (type) [Maybe a]) (con bytestring)]
                                                                  }
                                                                  (con bytestring)
                                                                }
                                                                {
                                                                  fMonoidFirst
                                                                  (con bytestring)
                                                                }
                                                              ]
                                                              (lam
                                                                x
                                                                (con bytestring)
                                                                [
                                                                  [
                                                                    [
                                                                      {
                                                                        [
                                                                          Bool_match
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  (builtin
                                                                                    ifThenElse
                                                                                  )
                                                                                  Bool
                                                                                }
                                                                                [
                                                                                  [
                                                                                    (builtin
                                                                                      equalsByteString
                                                                                    )
                                                                                    k
                                                                                  ]
                                                                                  x
                                                                                ]
                                                                              ]
                                                                              True
                                                                            ]
                                                                            False
                                                                          ]
                                                                        ]
                                                                        (fun Unit [Maybe (con bytestring)])
                                                                      }
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        [
                                                                          {
                                                                            Just
                                                                            (con bytestring)
                                                                          }
                                                                          x
                                                                        ]
                                                                      )
                                                                    ]
                                                                    (lam
                                                                      thunk
                                                                      Unit
                                                                      {
                                                                        Nothing
                                                                        (con bytestring)
                                                                      }
                                                                    )
                                                                  ]
                                                                  Unit
                                                                ]
                                                              )
                                                            ]
                                                            ds
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam
                                                        ds
                                                        (con bytestring)
                                                        (lam thunk Unit True)
                                                      )
                                                    ]
                                                    (lam thunk Unit False)
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        valueOf
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun (con bytestring) (fun (con bytestring) (con integer))))
                      )
                      (lam
                        ds
                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        (lam
                          cur
                          (con bytestring)
                          (lam
                            tn
                            (con bytestring)
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl
                                  j
                                  (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)] (con integer))
                                )
                                (lam
                                  i
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                  (let
                                    (rec)
                                    (termbind
                                      (strict)
                                      (vardecl
                                        go
                                        (fun [List [[Tuple2 (con bytestring)] (con integer)]] (con integer))
                                      )
                                      (lam
                                        ds
                                        [List [[Tuple2 (con bytestring)] (con integer)]]
                                        [
                                          [
                                            {
                                              [
                                                {
                                                  Nil_match
                                                  [[Tuple2 (con bytestring)] (con integer)]
                                                }
                                                ds
                                              ]
                                              (con integer)
                                            }
                                            (con integer 0)
                                          ]
                                          (lam
                                            ds
                                            [[Tuple2 (con bytestring)] (con integer)]
                                            (lam
                                              xs
                                              [List [[Tuple2 (con bytestring)] (con integer)]]
                                              [
                                                {
                                                  [
                                                    {
                                                      {
                                                        Tuple2_match
                                                        (con bytestring)
                                                      }
                                                      (con integer)
                                                    }
                                                    ds
                                                  ]
                                                  (con integer)
                                                }
                                                (lam
                                                  c
                                                  (con bytestring)
                                                  (lam
                                                    i
                                                    (con integer)
                                                    [
                                                      [
                                                        [
                                                          {
                                                            [
                                                              Bool_match
                                                              [
                                                                [
                                                                  [
                                                                    {
                                                                      (builtin
                                                                        ifThenElse
                                                                      )
                                                                      Bool
                                                                    }
                                                                    [
                                                                      [
                                                                        (builtin
                                                                          equalsByteString
                                                                        )
                                                                        c
                                                                      ]
                                                                      tn
                                                                    ]
                                                                  ]
                                                                  True
                                                                ]
                                                                False
                                                              ]
                                                            ]
                                                            (fun Unit (con integer))
                                                          }
                                                          (lam thunk Unit i)
                                                        ]
                                                        (lam
                                                          thunk Unit [ go xs ]
                                                        )
                                                      ]
                                                      Unit
                                                    ]
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                    [ go i ]
                                  )
                                )
                              )
                              (let
                                (rec)
                                (termbind
                                  (strict)
                                  (vardecl
                                    go
                                    (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]] (con integer))
                                  )
                                  (lam
                                    ds
                                    [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                    [
                                      [
                                        {
                                          [
                                            {
                                              Nil_match
                                              [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            }
                                            ds
                                          ]
                                          (con integer)
                                        }
                                        (con integer 0)
                                      ]
                                      (lam
                                        ds
                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                        (lam
                                          xs
                                          [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                          [
                                            {
                                              [
                                                {
                                                  {
                                                    Tuple2_match
                                                    (con bytestring)
                                                  }
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                }
                                                ds
                                              ]
                                              (con integer)
                                            }
                                            (lam
                                              c
                                              (con bytestring)
                                              (lam
                                                i
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    ifThenElse
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  [
                                                                    (builtin
                                                                      equalsByteString
                                                                    )
                                                                    c
                                                                  ]
                                                                  cur
                                                                ]
                                                              ]
                                                              True
                                                            ]
                                                            False
                                                          ]
                                                        ]
                                                        (fun Unit (con integer))
                                                      }
                                                      (lam thunk Unit [ j i ])
                                                    ]
                                                    (lam thunk Unit [ go xs ])
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    ]
                                  )
                                )
                                [ go ds ]
                              )
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        pubKeyOutputsAt
                        (fun (con bytestring) (fun TxInfo [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]))
                      )
                      (lam
                        pk
                        (con bytestring)
                        (lam
                          p
                          TxInfo
                          [
                            {
                              [ TxInfo_match p ]
                              [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                            }
                            (lam
                              ds
                              [List TxInInfo]
                              (lam
                                ds
                                [List TxOut]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                    (lam
                                      ds
                                      [List DCert]
                                      (lam
                                        ds
                                        [List [[Tuple2 StakingCredential] (con integer)]]
                                        (lam
                                          ds
                                          [Interval (con integer)]
                                          (lam
                                            ds
                                            [List (con bytestring)]
                                            (lam
                                              ds
                                              [List [[Tuple2 (con bytestring)] (con data)]]
                                              (lam
                                                ds
                                                (con bytestring)
                                                [
                                                  [
                                                    [
                                                      {
                                                        { foldr TxOut }
                                                        [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                      }
                                                      (lam
                                                        e
                                                        TxOut
                                                        (lam
                                                          xs
                                                          [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                          [
                                                            {
                                                              [ TxOut_match e ]
                                                              [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                            }
                                                            (lam
                                                              ds
                                                              Address
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Maybe (con bytestring)]
                                                                  [
                                                                    {
                                                                      [
                                                                        Address_match
                                                                        ds
                                                                      ]
                                                                      [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                    }
                                                                    (lam
                                                                      ds
                                                                      Credential
                                                                      (lam
                                                                        ds
                                                                        [Maybe StakingCredential]
                                                                        [
                                                                          [
                                                                            {
                                                                              [
                                                                                Credential_match
                                                                                ds
                                                                              ]
                                                                              [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                                                            }
                                                                            (lam
                                                                              pk
                                                                              (con bytestring)
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        Bool_match
                                                                                        [
                                                                                          [
                                                                                            [
                                                                                              {
                                                                                                (builtin
                                                                                                  ifThenElse
                                                                                                )
                                                                                                Bool
                                                                                              }
                                                                                              [
                                                                                                [
                                                                                                  (builtin
                                                                                                    equalsByteString
                                                                                                  )
                                                                                                  pk
                                                                                                ]
                                                                                                pk
                                                                                              ]
                                                                                            ]
                                                                                            True
                                                                                          ]
                                                                                          False
                                                                                        ]
                                                                                      ]
                                                                                      (fun Unit [List [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                                                                    }
                                                                                    (lam
                                                                                      thunk
                                                                                      Unit
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            Cons
                                                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          }
                                                                                          ds
                                                                                        ]
                                                                                        xs
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    xs
                                                                                  )
                                                                                ]
                                                                                Unit
                                                                              ]
                                                                            )
                                                                          ]
                                                                          (lam
                                                                            ipv
                                                                            (con bytestring)
                                                                            xs
                                                                          )
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                    {
                                                      Nil
                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                    }
                                                  ]
                                                  ds
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        addInteger
                        (fun (con integer) (fun (con integer) (con integer)))
                      )
                      (lam
                        x
                        (con integer)
                        (lam y (con integer) [ [ (builtin addInteger) x ] y ])
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        unionWith
                        (fun (fun (con integer) (fun (con integer) (con integer))) (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])))
                      )
                      (lam
                        f
                        (fun (con integer) (fun (con integer) (con integer)))
                        (lam
                          ls
                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          (lam
                            rs
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                            (let
                              (rec)
                              (termbind
                                (strict)
                                (vardecl
                                  go
                                  (fun [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]] [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                )
                                (lam
                                  ds
                                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                  [
                                    [
                                      [
                                        {
                                          [
                                            {
                                              Nil_match
                                              [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                            }
                                            ds
                                          ]
                                          (fun Unit [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]])
                                        }
                                        (lam
                                          thunk
                                          Unit
                                          {
                                            Nil
                                            [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          }
                                        )
                                      ]
                                      (lam
                                        ds
                                        [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]
                                        (lam
                                          xs
                                          [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]]]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              {
                                                [
                                                  {
                                                    {
                                                      Tuple2_match
                                                      (con bytestring)
                                                    }
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                  }
                                                  ds
                                                ]
                                                [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                                              }
                                              (lam
                                                c
                                                (con bytestring)
                                                (lam
                                                  i
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[These (con integer)] (con integer)]]
                                                  (let
                                                    (rec)
                                                    (termbind
                                                      (strict)
                                                      (vardecl
                                                        go
                                                        (fun [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]] [List [[Tuple2 (con bytestring)] (con integer)]])
                                                      )
                                                      (lam
                                                        ds
                                                        [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  {
                                                                    Nil_match
                                                                    [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                                  }
                                                                  ds
                                                                ]
                                                                (fun Unit [List [[Tuple2 (con bytestring)] (con integer)]])
                                                              }
                                                              (lam
                                                                thunk
                                                                Unit
                                                                {
                                                                  Nil
                                                                  [[Tuple2 (con bytestring)] (con integer)]
                                                                }
                                                              )
                                                            ]
                                                            (lam
                                                              ds
                                                              [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]
                                                              (lam
                                                                xs
                                                                [List [[Tuple2 (con bytestring)] [[These (con integer)] (con integer)]]]
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  [
                                                                    {
                                                                      [
                                                                        {
                                                                          {
                                                                            Tuple2_match
                                                                            (con bytestring)
                                                                          }
                                                                          [[These (con integer)] (con integer)]
                                                                        }
                                                                        ds
                                                                      ]
                                                                      [List [[Tuple2 (con bytestring)] (con integer)]]
                                                                    }
                                                                    (lam
                                                                      c
                                                                      (con bytestring)
                                                                      (lam
                                                                        i
                                                                        [[These (con integer)] (con integer)]
                                                                        [
                                                                          [
                                                                            {
                                                                              Cons
                                                                              [[Tuple2 (con bytestring)] (con integer)]
                                                                            }
                                                                            [
                                                                              [
                                                                                {
                                                                                  {
                                                                                    Tuple2
                                                                                    (con bytestring)
                                                                                  }
                                                                                  (con integer)
                                                                                }
                                                                                c
                                                                              ]
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        {
                                                                                          {
                                                                                            These_match
                                                                                            (con integer)
                                                                                          }
                                                                                          (con integer)
                                                                                        }
                                                                                        i
                                                                                      ]
                                                                                      (con integer)
                                                                                    }
                                                                                    (lam
                                                                                      b
                                                                                      (con integer)
                                                                                      [
                                                                                        [
                                                                                          f
                                                                                          (con
                                                                                            integer
                                                                                              0
                                                                                          )
                                                                                        ]
                                                                                        b
                                                                                      ]
                                                                                    )
                                                                                  ]
                                                                                  (lam
                                                                                    a
                                                                                    (con integer)
                                                                                    (lam
                                                                                      b
                                                                                      (con integer)
                                                                                      [
                                                                                        [
                                                                                          f
                                                                                          a
                                                                                        ]
                                                                                        b
                                                                                      ]
                                                                                    )
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  a
                                                                                  (con integer)
                                                                                  [
                                                                                    [
                                                                                      f
                                                                                      a
                                                                                    ]
                                                                                    (con
                                                                                      integer
                                                                                        0
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                            ]
                                                                          ]
                                                                          [
                                                                            go
                                                                            xs
                                                                          ]
                                                                        ]
                                                                      )
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                    [
                                                      [
                                                        {
                                                          Cons
                                                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        }
                                                        [
                                                          [
                                                            {
                                                              {
                                                                Tuple2
                                                                (con bytestring)
                                                              }
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
                                                            }
                                                            c
                                                          ]
                                                          [ go i ]
                                                        ]
                                                      ]
                                                      [ go xs ]
                                                    ]
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                    Unit
                                  ]
                                )
                              )
                              [ go [ [ unionVal ls ] rs ] ]
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (nonstrict)
                      (vardecl
                        fMonoidValue_c
                        (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                      )
                      [ unionWith addInteger ]
                    )
                    (termbind
                      (strict)
                      (vardecl
                        valuePaidTo
                        (fun TxInfo (fun (con bytestring) [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]))
                      )
                      (lam
                        ptx
                        TxInfo
                        (lam
                          pkh
                          (con bytestring)
                          [
                            [
                              [
                                {
                                  {
                                    foldr
                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  }
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                }
                                fMonoidValue_c
                              ]
                              {
                                Nil
                                [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              }
                            ]
                            [ [ pubKeyOutputsAt pkh ] ptx ]
                          ]
                        )
                      )
                    )
                    (termbind
                      (nonstrict)
                      (vardecl
                        fMonoidValue
                        [Monoid [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                      )
                      [
                        [
                          {
                            CConsMonoid
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          }
                          fMonoidValue_c
                        ]
                        {
                          Nil
                          [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                        }
                      ]
                    )
                    (termbind
                      (strict)
                      (vardecl
                        txOutValue
                        (fun TxOut [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                      )
                      (lam
                        ds
                        TxOut
                        [
                          {
                            [ TxOut_match ds ]
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          }
                          (lam
                            ds
                            Address
                            (lam
                              ds
                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                              (lam ds [Maybe (con bytestring)] ds)
                            )
                          )
                        ]
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        valueProduced
                        (fun TxInfo [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
                      )
                      (lam
                        x
                        TxInfo
                        [
                          {
                            [ TxInfo_match x ]
                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                          }
                          (lam
                            ds
                            [List TxInInfo]
                            (lam
                              ds
                              [List TxOut]
                              (lam
                                ds
                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                (lam
                                  ds
                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                  (lam
                                    ds
                                    [List DCert]
                                    (lam
                                      ds
                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                      (lam
                                        ds
                                        [Interval (con integer)]
                                        (lam
                                          ds
                                          [List (con bytestring)]
                                          (lam
                                            ds
                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                            (lam
                                              ds
                                              (con bytestring)
                                              [
                                                [
                                                  [
                                                    {
                                                      {
                                                        fFoldableNil_cfoldMap
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                      }
                                                      TxOut
                                                    }
                                                    fMonoidValue
                                                  ]
                                                  txOutValue
                                                ]
                                                ds
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        checkTxConstraint
                        (fun ScriptContext (fun TxConstraint Bool))
                      )
                      (lam
                        ds
                        ScriptContext
                        [
                          { [ ScriptContext_match ds ] (fun TxConstraint Bool) }
                          (lam
                            ds
                            TxInfo
                            (lam
                              ds
                              ScriptPurpose
                              (lam
                                ds
                                TxConstraint
                                [
                                  [
                                    [
                                      [
                                        [
                                          [
                                            [
                                              [
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          TxConstraint_match ds
                                                        ]
                                                        Bool
                                                      }
                                                      (lam
                                                        pubKey
                                                        (con bytestring)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Bool_match
                                                                  [
                                                                    [
                                                                      txSignedBy
                                                                      ds
                                                                    ]
                                                                    pubKey
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk Unit True
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  {
                                                                    (builtin
                                                                      chooseUnit
                                                                    )
                                                                    Bool
                                                                  }
                                                                  [
                                                                    (builtin
                                                                      trace
                                                                    )
                                                                    (con
                                                                      string
                                                                        "Missing signature"
                                                                    )
                                                                  ]
                                                                ]
                                                                False
                                                              ]
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    ]
                                                    (lam
                                                      dvh
                                                      (con bytestring)
                                                      (lam
                                                        dv
                                                        (con data)
                                                        (let
                                                          (nonrec)
                                                          (termbind
                                                            (nonstrict)
                                                            (vardecl j Bool)
                                                            [
                                                              [
                                                                {
                                                                  (builtin
                                                                    chooseUnit
                                                                  )
                                                                  Bool
                                                                }
                                                                [
                                                                  (builtin trace
                                                                  )
                                                                  (con
                                                                    string
                                                                      "MustHashDatum"
                                                                  )
                                                                ]
                                                              ]
                                                              False
                                                            ]
                                                          )
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    {
                                                                      Maybe_match
                                                                      (con data)
                                                                    }
                                                                    [
                                                                      [
                                                                        findDatum
                                                                        dvh
                                                                      ]
                                                                      ds
                                                                    ]
                                                                  ]
                                                                  (fun Unit Bool)
                                                                }
                                                                (lam
                                                                  a
                                                                  (con data)
                                                                  (lam
                                                                    thunk
                                                                    Unit
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            [
                                                                              Bool_match
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        ifThenElse
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      [
                                                                                        (builtin
                                                                                          equalsData
                                                                                        )
                                                                                        a
                                                                                      ]
                                                                                      dv
                                                                                    ]
                                                                                  ]
                                                                                  True
                                                                                ]
                                                                                False
                                                                              ]
                                                                            ]
                                                                            (fun Unit Bool)
                                                                          }
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            True
                                                                          )
                                                                        ]
                                                                        (lam
                                                                          thunk
                                                                          Unit
                                                                          j
                                                                        )
                                                                      ]
                                                                      Unit
                                                                    ]
                                                                  )
                                                                )
                                                              ]
                                                              (lam thunk Unit j)
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      )
                                                    )
                                                  ]
                                                  (lam
                                                    dv
                                                    (con data)
                                                    [
                                                      {
                                                        [ TxInfo_match ds ] Bool
                                                      }
                                                      (lam
                                                        ds
                                                        [List TxInInfo]
                                                        (lam
                                                          ds
                                                          [List TxOut]
                                                          (lam
                                                            ds
                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [List DCert]
                                                                (lam
                                                                  ds
                                                                  [List [[Tuple2 StakingCredential] (con integer)]]
                                                                  (lam
                                                                    ds
                                                                    [Interval (con integer)]
                                                                    (lam
                                                                      ds
                                                                      [List (con bytestring)]
                                                                      (lam
                                                                        ds
                                                                        [List [[Tuple2 (con bytestring)] (con data)]]
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          [
                                                                            [
                                                                              [
                                                                                {
                                                                                  [
                                                                                    Bool_match
                                                                                    [
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              fFoldableNil_cfoldMap
                                                                                              [(lam a (type) a) Bool]
                                                                                            }
                                                                                            (con data)
                                                                                          }
                                                                                          [
                                                                                            {
                                                                                              fMonoidSum
                                                                                              Bool
                                                                                            }
                                                                                            fAdditiveMonoidBool
                                                                                          ]
                                                                                        ]
                                                                                        [
                                                                                          equalsData
                                                                                          dv
                                                                                        ]
                                                                                      ]
                                                                                      [
                                                                                        [
                                                                                          {
                                                                                            {
                                                                                              fFunctorNil_cfmap
                                                                                              [[Tuple2 (con bytestring)] (con data)]
                                                                                            }
                                                                                            (con data)
                                                                                          }
                                                                                          {
                                                                                            {
                                                                                              snd
                                                                                              (con bytestring)
                                                                                            }
                                                                                            (con data)
                                                                                          }
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    ]
                                                                                  ]
                                                                                  (fun Unit Bool)
                                                                                }
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  True
                                                                                )
                                                                              ]
                                                                              (lam
                                                                                thunk
                                                                                Unit
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      (builtin
                                                                                        chooseUnit
                                                                                      )
                                                                                      Bool
                                                                                    }
                                                                                    [
                                                                                      (builtin
                                                                                        trace
                                                                                      )
                                                                                      (con
                                                                                        string
                                                                                          "Missing datum"
                                                                                      )
                                                                                    ]
                                                                                  ]
                                                                                  False
                                                                                ]
                                                                              )
                                                                            ]
                                                                            Unit
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                ]
                                                (lam
                                                  mps
                                                  (con bytestring)
                                                  (lam
                                                    ds
                                                    (con data)
                                                    (lam
                                                      tn
                                                      (con bytestring)
                                                      (lam
                                                        v
                                                        (con integer)
                                                        [
                                                          [
                                                            [
                                                              {
                                                                [
                                                                  Bool_match
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          (builtin
                                                                            ifThenElse
                                                                          )
                                                                          Bool
                                                                        }
                                                                        [
                                                                          [
                                                                            (builtin
                                                                              equalsInteger
                                                                            )
                                                                            [
                                                                              [
                                                                                [
                                                                                  valueOf
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        TxInfo_match
                                                                                        ds
                                                                                      ]
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    (lam
                                                                                      ds
                                                                                      [List TxInInfo]
                                                                                      (lam
                                                                                        ds
                                                                                        [List TxOut]
                                                                                        (lam
                                                                                          ds
                                                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          (lam
                                                                                            ds
                                                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                            (lam
                                                                                              ds
                                                                                              [List DCert]
                                                                                              (lam
                                                                                                ds
                                                                                                [List [[Tuple2 StakingCredential] (con integer)]]
                                                                                                (lam
                                                                                                  ds
                                                                                                  [Interval (con integer)]
                                                                                                  (lam
                                                                                                    ds
                                                                                                    [List (con bytestring)]
                                                                                                    (lam
                                                                                                      ds
                                                                                                      [List [[Tuple2 (con bytestring)] (con data)]]
                                                                                                      (lam
                                                                                                        ds
                                                                                                        (con bytestring)
                                                                                                        ds
                                                                                                      )
                                                                                                    )
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                ]
                                                                                mps
                                                                              ]
                                                                              tn
                                                                            ]
                                                                          ]
                                                                          v
                                                                        ]
                                                                      ]
                                                                      True
                                                                    ]
                                                                    False
                                                                  ]
                                                                ]
                                                                (fun Unit Bool)
                                                              }
                                                              (lam
                                                                thunk Unit True
                                                              )
                                                            ]
                                                            (lam
                                                              thunk
                                                              Unit
                                                              [
                                                                [
                                                                  {
                                                                    (builtin
                                                                      chooseUnit
                                                                    )
                                                                    Bool
                                                                  }
                                                                  [
                                                                    (builtin
                                                                      trace
                                                                    )
                                                                    (con
                                                                      string
                                                                        "Value minted not OK"
                                                                    )
                                                                  ]
                                                                ]
                                                                False
                                                              ]
                                                            )
                                                          ]
                                                          Unit
                                                        ]
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                              (lam
                                                vlh
                                                (con bytestring)
                                                (lam
                                                  dv
                                                  (con data)
                                                  (lam
                                                    vl
                                                    [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                    (let
                                                      (nonrec)
                                                      (termbind
                                                        (nonstrict)
                                                        (vardecl
                                                          hsh
                                                          [Maybe (con bytestring)]
                                                        )
                                                        [
                                                          [ findDatumHash dv ]
                                                          ds
                                                        ]
                                                      )
                                                      (termbind
                                                        (nonstrict)
                                                        (vardecl addr Credential
                                                        )
                                                        [ ScriptCredential vlh ]
                                                      )
                                                      (termbind
                                                        (nonstrict)
                                                        (vardecl addr Address)
                                                        [
                                                          [ Address addr ]
                                                          {
                                                            Nothing
                                                            StakingCredential
                                                          }
                                                        ]
                                                      )
                                                      [
                                                        {
                                                          [ TxInfo_match ds ]
                                                          Bool
                                                        }
                                                        (lam
                                                          ds
                                                          [List TxInInfo]
                                                          (lam
                                                            ds
                                                            [List TxOut]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [List DCert]
                                                                  (lam
                                                                    ds
                                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                                    (lam
                                                                      ds
                                                                      [Interval (con integer)]
                                                                      (lam
                                                                        ds
                                                                        [List (con bytestring)]
                                                                        (lam
                                                                          ds
                                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                                          (lam
                                                                            ds
                                                                            (con bytestring)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    [
                                                                                      Bool_match
                                                                                      [
                                                                                        [
                                                                                          [
                                                                                            {
                                                                                              {
                                                                                                fFoldableNil_cfoldMap
                                                                                                [(lam a (type) a) Bool]
                                                                                              }
                                                                                              TxOut
                                                                                            }
                                                                                            [
                                                                                              {
                                                                                                fMonoidSum
                                                                                                Bool
                                                                                              }
                                                                                              fAdditiveMonoidBool
                                                                                            ]
                                                                                          ]
                                                                                          (lam
                                                                                            ds
                                                                                            TxOut
                                                                                            [
                                                                                              {
                                                                                                [
                                                                                                  TxOut_match
                                                                                                  ds
                                                                                                ]
                                                                                                Bool
                                                                                              }
                                                                                              (lam
                                                                                                ds
                                                                                                Address
                                                                                                (lam
                                                                                                  ds
                                                                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                                  (lam
                                                                                                    ds
                                                                                                    [Maybe (con bytestring)]
                                                                                                    [
                                                                                                      [
                                                                                                        [
                                                                                                          {
                                                                                                            [
                                                                                                              {
                                                                                                                Maybe_match
                                                                                                                (con bytestring)
                                                                                                              }
                                                                                                              ds
                                                                                                            ]
                                                                                                            (fun Unit Bool)
                                                                                                          }
                                                                                                          (lam
                                                                                                            svh
                                                                                                            (con bytestring)
                                                                                                            (lam
                                                                                                              thunk
                                                                                                              Unit
                                                                                                              [
                                                                                                                [
                                                                                                                  [
                                                                                                                    {
                                                                                                                      [
                                                                                                                        Bool_match
                                                                                                                        [
                                                                                                                          [
                                                                                                                            [
                                                                                                                              checkBinRel
                                                                                                                              equalsInteger
                                                                                                                            ]
                                                                                                                            ds
                                                                                                                          ]
                                                                                                                          vl
                                                                                                                        ]
                                                                                                                      ]
                                                                                                                      (fun Unit Bool)
                                                                                                                    }
                                                                                                                    (lam
                                                                                                                      thunk
                                                                                                                      Unit
                                                                                                                      [
                                                                                                                        [
                                                                                                                          [
                                                                                                                            {
                                                                                                                              [
                                                                                                                                {
                                                                                                                                  Maybe_match
                                                                                                                                  (con bytestring)
                                                                                                                                }
                                                                                                                                hsh
                                                                                                                              ]
                                                                                                                              (fun Unit Bool)
                                                                                                                            }
                                                                                                                            (lam
                                                                                                                              a
                                                                                                                              (con bytestring)
                                                                                                                              (lam
                                                                                                                                thunk
                                                                                                                                Unit
                                                                                                                                [
                                                                                                                                  [
                                                                                                                                    [
                                                                                                                                      {
                                                                                                                                        [
                                                                                                                                          Bool_match
                                                                                                                                          [
                                                                                                                                            [
                                                                                                                                              [
                                                                                                                                                {
                                                                                                                                                  (builtin
                                                                                                                                                    ifThenElse
                                                                                                                                                  )
                                                                                                                                                  Bool
                                                                                                                                                }
                                                                                                                                                [
                                                                                                                                                  [
                                                                                                                                                    (builtin
                                                                                                                                                      equalsByteString
                                                                                                                                                    )
                                                                                                                                                    a
                                                                                                                                                  ]
                                                                                                                                                  svh
                                                                                                                                                ]
                                                                                                                                              ]
                                                                                                                                              True
                                                                                                                                            ]
                                                                                                                                            False
                                                                                                                                          ]
                                                                                                                                        ]
                                                                                                                                        (fun Unit Bool)
                                                                                                                                      }
                                                                                                                                      (lam
                                                                                                                                        thunk
                                                                                                                                        Unit
                                                                                                                                        [
                                                                                                                                          [
                                                                                                                                            fEqAddress_c
                                                                                                                                            ds
                                                                                                                                          ]
                                                                                                                                          addr
                                                                                                                                        ]
                                                                                                                                      )
                                                                                                                                    ]
                                                                                                                                    (lam
                                                                                                                                      thunk
                                                                                                                                      Unit
                                                                                                                                      False
                                                                                                                                    )
                                                                                                                                  ]
                                                                                                                                  Unit
                                                                                                                                ]
                                                                                                                              )
                                                                                                                            )
                                                                                                                          ]
                                                                                                                          (lam
                                                                                                                            thunk
                                                                                                                            Unit
                                                                                                                            False
                                                                                                                          )
                                                                                                                        ]
                                                                                                                        Unit
                                                                                                                      ]
                                                                                                                    )
                                                                                                                  ]
                                                                                                                  (lam
                                                                                                                    thunk
                                                                                                                    Unit
                                                                                                                    False
                                                                                                                  )
                                                                                                                ]
                                                                                                                Unit
                                                                                                              ]
                                                                                                            )
                                                                                                          )
                                                                                                        ]
                                                                                                        (lam
                                                                                                          thunk
                                                                                                          Unit
                                                                                                          False
                                                                                                        )
                                                                                                      ]
                                                                                                      Unit
                                                                                                    ]
                                                                                                  )
                                                                                                )
                                                                                              )
                                                                                            ]
                                                                                          )
                                                                                        ]
                                                                                        ds
                                                                                      ]
                                                                                    ]
                                                                                    (fun Unit Bool)
                                                                                  }
                                                                                  (lam
                                                                                    thunk
                                                                                    Unit
                                                                                    True
                                                                                  )
                                                                                ]
                                                                                (lam
                                                                                  thunk
                                                                                  Unit
                                                                                  [
                                                                                    [
                                                                                      {
                                                                                        (builtin
                                                                                          chooseUnit
                                                                                        )
                                                                                        Bool
                                                                                      }
                                                                                      [
                                                                                        (builtin
                                                                                          trace
                                                                                        )
                                                                                        (con
                                                                                          string
                                                                                            "MustPayToOtherScript"
                                                                                        )
                                                                                      ]
                                                                                    ]
                                                                                    False
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              Unit
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                            (lam
                                              pk
                                              (con bytestring)
                                              (lam
                                                vl
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                [
                                                  [
                                                    [
                                                      {
                                                        [
                                                          Bool_match
                                                          [
                                                            [
                                                              [
                                                                checkBinRel
                                                                lessThanEqInteger
                                                              ]
                                                              vl
                                                            ]
                                                            [
                                                              [ valuePaidTo ds ]
                                                              pk
                                                            ]
                                                          ]
                                                        ]
                                                        (fun Unit Bool)
                                                      }
                                                      (lam thunk Unit True)
                                                    ]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [
                                                        [
                                                          {
                                                            (builtin chooseUnit)
                                                            Bool
                                                          }
                                                          [
                                                            (builtin trace)
                                                            (con
                                                              string
                                                                "MustPayToPubKey"
                                                            )
                                                          ]
                                                        ]
                                                        False
                                                      ]
                                                    )
                                                  ]
                                                  Unit
                                                ]
                                              )
                                            )
                                          ]
                                          (lam
                                            vl
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      Bool_match
                                                      [
                                                        [
                                                          [
                                                            checkBinRel
                                                            lessThanEqInteger
                                                          ]
                                                          vl
                                                        ]
                                                        [ valueProduced ds ]
                                                      ]
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam thunk Unit True)
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      {
                                                        (builtin chooseUnit)
                                                        Bool
                                                      }
                                                      [
                                                        (builtin trace)
                                                        (con
                                                          string
                                                            "Produced value not OK"
                                                        )
                                                      ]
                                                    ]
                                                    False
                                                  ]
                                                )
                                              ]
                                              Unit
                                            ]
                                          )
                                        ]
                                        (lam
                                          vl
                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          checkBinRel
                                                          lessThanEqInteger
                                                        ]
                                                        vl
                                                      ]
                                                      [
                                                        {
                                                          [ TxInfo_match ds ]
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        }
                                                        (lam
                                                          ds
                                                          [List TxInInfo]
                                                          (lam
                                                            ds
                                                            [List TxOut]
                                                            (lam
                                                              ds
                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [List DCert]
                                                                  (lam
                                                                    ds
                                                                    [List [[Tuple2 StakingCredential] (con integer)]]
                                                                    (lam
                                                                      ds
                                                                      [Interval (con integer)]
                                                                      (lam
                                                                        ds
                                                                        [List (con bytestring)]
                                                                        (lam
                                                                          ds
                                                                          [List [[Tuple2 (con bytestring)] (con data)]]
                                                                          (lam
                                                                            ds
                                                                            (con bytestring)
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      fFoldableNil_cfoldMap
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    TxInInfo
                                                                                  }
                                                                                  fMonoidValue
                                                                                ]
                                                                                (lam
                                                                                  x
                                                                                  TxInInfo
                                                                                  [
                                                                                    {
                                                                                      [
                                                                                        TxInInfo_match
                                                                                        x
                                                                                      ]
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    (lam
                                                                                      ds
                                                                                      TxOutRef
                                                                                      (lam
                                                                                        ds
                                                                                        TxOut
                                                                                        [
                                                                                          {
                                                                                            [
                                                                                              TxOut_match
                                                                                              ds
                                                                                            ]
                                                                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                          }
                                                                                          (lam
                                                                                            ds
                                                                                            Address
                                                                                            (lam
                                                                                              ds
                                                                                              [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                              (lam
                                                                                                ds
                                                                                                [Maybe (con bytestring)]
                                                                                                ds
                                                                                              )
                                                                                            )
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              ]
                                                                              ds
                                                                            ]
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam thunk Unit True)
                                              ]
                                              (lam
                                                thunk
                                                Unit
                                                [
                                                  [
                                                    {
                                                      (builtin chooseUnit) Bool
                                                    }
                                                    [
                                                      (builtin trace)
                                                      (con
                                                        string
                                                          "Spent value not OK"
                                                      )
                                                    ]
                                                  ]
                                                  False
                                                ]
                                              )
                                            ]
                                            Unit
                                          ]
                                        )
                                      ]
                                      (lam
                                        txOutRef
                                        TxOutRef
                                        (let
                                          (nonrec)
                                          (termbind
                                            (nonstrict)
                                            (vardecl j Bool)
                                            [
                                              [
                                                { (builtin chooseUnit) Bool }
                                                [
                                                  (builtin trace)
                                                  (con
                                                    string
                                                      "Public key output not spent"
                                                  )
                                                ]
                                              ]
                                              False
                                            ]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    { Maybe_match TxInInfo }
                                                    [
                                                      [
                                                        findTxInByTxOutRef
                                                        txOutRef
                                                      ]
                                                      ds
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam
                                                  a
                                                  TxInInfo
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      {
                                                        [ TxInInfo_match a ]
                                                        Bool
                                                      }
                                                      (lam
                                                        ds
                                                        TxOutRef
                                                        (lam
                                                          ds
                                                          TxOut
                                                          [
                                                            {
                                                              [ TxOut_match ds ]
                                                              Bool
                                                            }
                                                            (lam
                                                              ds
                                                              Address
                                                              (lam
                                                                ds
                                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                (lam
                                                                  ds
                                                                  [Maybe (con bytestring)]
                                                                  [
                                                                    [
                                                                      [
                                                                        {
                                                                          [
                                                                            {
                                                                              Maybe_match
                                                                              (con bytestring)
                                                                            }
                                                                            ds
                                                                          ]
                                                                          (fun Unit Bool)
                                                                        }
                                                                        (lam
                                                                          ds
                                                                          (con bytestring)
                                                                          (lam
                                                                            thunk
                                                                            Unit
                                                                            j
                                                                          )
                                                                        )
                                                                      ]
                                                                      (lam
                                                                        thunk
                                                                        Unit
                                                                        True
                                                                      )
                                                                    ]
                                                                    Unit
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              ]
                                              (lam thunk Unit j)
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    ]
                                    (lam
                                      txOutRef
                                      TxOutRef
                                      (lam
                                        ds
                                        (con data)
                                        [
                                          [
                                            [
                                              {
                                                [
                                                  { Maybe_match TxInInfo }
                                                  [
                                                    [
                                                      findTxInByTxOutRef
                                                      txOutRef
                                                    ]
                                                    ds
                                                  ]
                                                ]
                                                (fun Unit Bool)
                                              }
                                              (lam
                                                ds
                                                TxInInfo
                                                (lam thunk Unit True)
                                              )
                                            ]
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                [
                                                  { (builtin chooseUnit) Bool }
                                                  [
                                                    (builtin trace)
                                                    (con
                                                      string
                                                        "Script output not spent"
                                                    )
                                                  ]
                                                ]
                                                False
                                              ]
                                            )
                                          ]
                                          Unit
                                        ]
                                      )
                                    )
                                  ]
                                  (lam
                                    interval
                                    [Interval (con integer)]
                                    [
                                      [
                                        [
                                          {
                                            [
                                              Bool_match
                                              [
                                                [
                                                  [
                                                    { contains (con integer) }
                                                    fOrdPOSIXTime
                                                  ]
                                                  interval
                                                ]
                                                [
                                                  {
                                                    [ TxInfo_match ds ]
                                                    [Interval (con integer)]
                                                  }
                                                  (lam
                                                    ds
                                                    [List TxInInfo]
                                                    (lam
                                                      ds
                                                      [List TxOut]
                                                      (lam
                                                        ds
                                                        [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                        (lam
                                                          ds
                                                          [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                          (lam
                                                            ds
                                                            [List DCert]
                                                            (lam
                                                              ds
                                                              [List [[Tuple2 StakingCredential] (con integer)]]
                                                              (lam
                                                                ds
                                                                [Interval (con integer)]
                                                                (lam
                                                                  ds
                                                                  [List (con bytestring)]
                                                                  (lam
                                                                    ds
                                                                    [List [[Tuple2 (con bytestring)] (con data)]]
                                                                    (lam
                                                                      ds
                                                                      (con bytestring)
                                                                      ds
                                                                    )
                                                                  )
                                                                )
                                                              )
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                ]
                                              ]
                                            ]
                                            (fun Unit Bool)
                                          }
                                          (lam thunk Unit True)
                                        ]
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              { (builtin chooseUnit) Bool }
                                              [
                                                (builtin trace)
                                                (con
                                                  string
                                                    "Wrong validation interval"
                                                )
                                              ]
                                            ]
                                            False
                                          ]
                                        )
                                      ]
                                      Unit
                                    ]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        checkScriptContext
                        (all i (type) (all o (type) (fun [(lam a (type) (fun a (con data))) o] (fun [[TxConstraints i] o] (fun ScriptContext Bool)))))
                      )
                      (abs
                        i
                        (type)
                        (abs
                          o
                          (type)
                          (lam
                            dToData
                            [(lam a (type) (fun a (con data))) o]
                            (lam
                              ds
                              [[TxConstraints i] o]
                              (lam
                                ptx
                                ScriptContext
                                [
                                  {
                                    [ { { TxConstraints_match i } o } ds ] Bool
                                  }
                                  (lam
                                    ds
                                    [List TxConstraint]
                                    (lam
                                      ds
                                      [List [InputConstraint i]]
                                      (lam
                                        ds
                                        [List [OutputConstraint o]]
                                        (let
                                          (nonrec)
                                          (termbind
                                            (nonstrict)
                                            (vardecl j Bool)
                                            [
                                              [
                                                { (builtin chooseUnit) Bool }
                                                [
                                                  (builtin trace)
                                                  (con
                                                    string
                                                      "checkScriptContext failed"
                                                  )
                                                ]
                                              ]
                                              False
                                            ]
                                          )
                                          [
                                            [
                                              [
                                                {
                                                  [
                                                    Bool_match
                                                    [
                                                      [
                                                        [
                                                          {
                                                            {
                                                              fFoldableNil_cfoldMap
                                                              [(lam a (type) a) Bool]
                                                            }
                                                            TxConstraint
                                                          }
                                                          [
                                                            {
                                                              fMonoidProduct
                                                              Bool
                                                            }
                                                            fMultiplicativeMonoidBool
                                                          ]
                                                        ]
                                                        [
                                                          checkTxConstraint ptx
                                                        ]
                                                      ]
                                                      ds
                                                    ]
                                                  ]
                                                  (fun Unit Bool)
                                                }
                                                (lam
                                                  thunk
                                                  Unit
                                                  [
                                                    [
                                                      [
                                                        {
                                                          [
                                                            Bool_match
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    {
                                                                      fFoldableNil_cfoldMap
                                                                      [(lam a (type) a) Bool]
                                                                    }
                                                                    [InputConstraint i]
                                                                  }
                                                                  [
                                                                    {
                                                                      fMonoidProduct
                                                                      Bool
                                                                    }
                                                                    fMultiplicativeMonoidBool
                                                                  ]
                                                                ]
                                                                [
                                                                  {
                                                                    checkOwnInputConstraint
                                                                    i
                                                                  }
                                                                  ptx
                                                                ]
                                                              ]
                                                              ds
                                                            ]
                                                          ]
                                                          (fun Unit Bool)
                                                        }
                                                        (lam
                                                          thunk
                                                          Unit
                                                          [
                                                            [
                                                              [
                                                                {
                                                                  [
                                                                    Bool_match
                                                                    [
                                                                      [
                                                                        [
                                                                          {
                                                                            {
                                                                              fFoldableNil_cfoldMap
                                                                              [(lam a (type) a) Bool]
                                                                            }
                                                                            [OutputConstraint o]
                                                                          }
                                                                          [
                                                                            {
                                                                              fMonoidProduct
                                                                              Bool
                                                                            }
                                                                            fMultiplicativeMonoidBool
                                                                          ]
                                                                        ]
                                                                        [
                                                                          [
                                                                            {
                                                                              checkOwnOutputConstraint
                                                                              o
                                                                            }
                                                                            dToData
                                                                          ]
                                                                          ptx
                                                                        ]
                                                                      ]
                                                                      ds
                                                                    ]
                                                                  ]
                                                                  (fun Unit Bool)
                                                                }
                                                                (lam
                                                                  thunk
                                                                  Unit
                                                                  True
                                                                )
                                                              ]
                                                              (lam thunk Unit j)
                                                            ]
                                                            Unit
                                                          ]
                                                        )
                                                      ]
                                                      (lam thunk Unit j)
                                                    ]
                                                    Unit
                                                  ]
                                                )
                                              ]
                                              (lam thunk Unit j)
                                            ]
                                            Unit
                                          ]
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        findContractInput
                        (fun (con bytestring) (fun ScriptContext [Maybe TxOutRef]))
                      )
                      (lam
                        script
                        (con bytestring)
                        (lam
                          ctx
                          ScriptContext
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl predicate (fun TxInInfo Bool))
                              (lam
                                x
                                TxInInfo
                                [
                                  {
                                    [
                                      Address_match
                                      [
                                        {
                                          [
                                            TxOut_match
                                            [
                                              { [ TxInInfo_match x ] TxOut }
                                              (lam ds TxOutRef (lam ds TxOut ds)
                                              )
                                            ]
                                          ]
                                          Address
                                        }
                                        (lam
                                          ds
                                          Address
                                          (lam
                                            ds
                                            [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                            (lam ds [Maybe (con bytestring)] ds)
                                          )
                                        )
                                      ]
                                    ]
                                    Bool
                                  }
                                  (lam
                                    ds
                                    Credential
                                    (lam
                                      ds
                                      [Maybe StakingCredential]
                                      [
                                        [
                                          { [ Credential_match ds ] Bool }
                                          (lam ipv (con bytestring) False)
                                        ]
                                        (lam
                                          script
                                          (con bytestring)
                                          [ [ equalsByteString script ] script ]
                                        )
                                      ]
                                    )
                                  )
                                ]
                              )
                            )
                            (termbind
                              (strict)
                              (vardecl
                                f
                                (fun TxInInfo (fun [List [[Tuple2 TxOutRef] TxOut]] [List [[Tuple2 TxOutRef] TxOut]]))
                              )
                              (lam
                                e
                                TxInInfo
                                (lam
                                  xs
                                  [List [[Tuple2 TxOutRef] TxOut]]
                                  [
                                    [
                                      [
                                        {
                                          [
                                            {
                                              Maybe_match
                                              [[Tuple2 TxOutRef] TxOut]
                                            }
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      Bool_match [ predicate e ]
                                                    ]
                                                    (fun Unit [Maybe [[Tuple2 TxOutRef] TxOut]])
                                                  }
                                                  (lam
                                                    thunk
                                                    Unit
                                                    [
                                                      {
                                                        Just
                                                        [[Tuple2 TxOutRef] TxOut]
                                                      }
                                                      [
                                                        [
                                                          {
                                                            { Tuple2 TxOutRef }
                                                            TxOut
                                                          }
                                                          [
                                                            {
                                                              [
                                                                TxInInfo_match e
                                                              ]
                                                              TxOutRef
                                                            }
                                                            (lam
                                                              ds
                                                              TxOutRef
                                                              (lam ds TxOut ds)
                                                            )
                                                          ]
                                                        ]
                                                        [
                                                          {
                                                            [ TxInInfo_match e ]
                                                            TxOut
                                                          }
                                                          (lam
                                                            ds
                                                            TxOutRef
                                                            (lam ds TxOut ds)
                                                          )
                                                        ]
                                                      ]
                                                    ]
                                                  )
                                                ]
                                                (lam
                                                  thunk
                                                  Unit
                                                  {
                                                    Nothing
                                                    [[Tuple2 TxOutRef] TxOut]
                                                  }
                                                )
                                              ]
                                              Unit
                                            ]
                                          ]
                                          (fun Unit [List [[Tuple2 TxOutRef] TxOut]])
                                        }
                                        (lam
                                          e
                                          [[Tuple2 TxOutRef] TxOut]
                                          (lam
                                            thunk
                                            Unit
                                            [
                                              [
                                                {
                                                  Cons [[Tuple2 TxOutRef] TxOut]
                                                }
                                                e
                                              ]
                                              xs
                                            ]
                                          )
                                        )
                                      ]
                                      (lam thunk Unit xs)
                                    ]
                                    Unit
                                  ]
                                )
                              )
                            )
                            [
                              [
                                [
                                  {
                                    [
                                      { Nil_match [[Tuple2 TxOutRef] TxOut] }
                                      [
                                        [
                                          [
                                            {
                                              { foldr TxInInfo }
                                              [List [[Tuple2 TxOutRef] TxOut]]
                                            }
                                            f
                                          ]
                                          { Nil [[Tuple2 TxOutRef] TxOut] }
                                        ]
                                        [
                                          {
                                            [
                                              TxInfo_match
                                              [
                                                {
                                                  [ ScriptContext_match ctx ]
                                                  TxInfo
                                                }
                                                (lam
                                                  ds
                                                  TxInfo
                                                  (lam ds ScriptPurpose ds)
                                                )
                                              ]
                                            ]
                                            [List TxInInfo]
                                          }
                                          (lam
                                            ds
                                            [List TxInInfo]
                                            (lam
                                              ds
                                              [List TxOut]
                                              (lam
                                                ds
                                                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                (lam
                                                  ds
                                                  [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                  (lam
                                                    ds
                                                    [List DCert]
                                                    (lam
                                                      ds
                                                      [List [[Tuple2 StakingCredential] (con integer)]]
                                                      (lam
                                                        ds
                                                        [Interval (con integer)]
                                                        (lam
                                                          ds
                                                          [List (con bytestring)]
                                                          (lam
                                                            ds
                                                            [List [[Tuple2 (con bytestring)] (con data)]]
                                                            (lam
                                                              ds
                                                              (con bytestring)
                                                              ds
                                                            )
                                                          )
                                                        )
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        ]
                                      ]
                                    ]
                                    (fun Unit [Maybe TxOutRef])
                                  }
                                  (lam thunk Unit { Nothing TxOutRef })
                                ]
                                (lam
                                  utxo
                                  [[Tuple2 TxOutRef] TxOut]
                                  (lam
                                    ds
                                    [List [[Tuple2 TxOutRef] TxOut]]
                                    (lam
                                      thunk
                                      Unit
                                      [
                                        [
                                          [
                                            {
                                              [
                                                {
                                                  Nil_match
                                                  [[Tuple2 TxOutRef] TxOut]
                                                }
                                                ds
                                              ]
                                              (fun Unit [Maybe TxOutRef])
                                            }
                                            (lam
                                              thunk
                                              Unit
                                              [
                                                { Just TxOutRef }
                                                [
                                                  {
                                                    [
                                                      {
                                                        {
                                                          Tuple2_match TxOutRef
                                                        }
                                                        TxOut
                                                      }
                                                      utxo
                                                    ]
                                                    TxOutRef
                                                  }
                                                  (lam
                                                    a TxOutRef (lam ds TxOut a)
                                                  )
                                                ]
                                              ]
                                            )
                                          ]
                                          (lam
                                            ipv
                                            [[Tuple2 TxOutRef] TxOut]
                                            (lam
                                              ipv
                                              [List [[Tuple2 TxOutRef] TxOut]]
                                              (lam
                                                thunk Unit { Nothing TxOutRef }
                                              )
                                            )
                                          )
                                        ]
                                        Unit
                                      ]
                                    )
                                  )
                                )
                              ]
                              Unit
                            ]
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        mustRunContract
                        (all redeemer (type) (fun [(lam a (type) (fun a (con data))) redeemer] (fun (con bytestring) (fun redeemer (fun ScriptContext Bool)))))
                      )
                      (abs
                        redeemer
                        (type)
                        (lam
                          dToData
                          [(lam a (type) (fun a (con data))) redeemer]
                          (lam
                            script
                            (con bytestring)
                            (lam
                              redeemer
                              redeemer
                              (lam
                                ctx
                                ScriptContext
                                [
                                  [
                                    [
                                      {
                                        [
                                          { Maybe_match TxOutRef }
                                          [ [ findContractInput script ] ctx ]
                                        ]
                                        (fun Unit Bool)
                                      }
                                      (lam
                                        contractRef
                                        TxOutRef
                                        (lam
                                          thunk
                                          Unit
                                          [
                                            [
                                              [
                                                {
                                                  { checkScriptContext Unit }
                                                  Unit
                                                }
                                                fToDataUnit_ctoBuiltinData
                                              ]
                                              [
                                                [
                                                  [
                                                    {
                                                      {
                                                        foldr
                                                        [[TxConstraints Unit] Unit]
                                                      }
                                                      [[TxConstraints Unit] Unit]
                                                    }
                                                    {
                                                      {
                                                        fMonoidTxConstraints_c
                                                        Unit
                                                      }
                                                      Unit
                                                    }
                                                  ]
                                                  {
                                                    {
                                                      fMonoidTxConstraints_cmempty
                                                      Unit
                                                    }
                                                    Unit
                                                  }
                                                ]
                                                [
                                                  {
                                                    build
                                                    [[TxConstraints Unit] Unit]
                                                  }
                                                  (abs
                                                    a
                                                    (type)
                                                    (lam
                                                      c
                                                      (fun [[TxConstraints Unit] Unit] (fun a a))
                                                      (lam
                                                        n
                                                        a
                                                        [
                                                          [
                                                            c
                                                            [
                                                              [
                                                                [
                                                                  {
                                                                    {
                                                                      TxConstraints
                                                                      Unit
                                                                    }
                                                                    Unit
                                                                  }
                                                                  [
                                                                    {
                                                                      build
                                                                      TxConstraint
                                                                    }
                                                                    (abs
                                                                      a
                                                                      (type)
                                                                      (lam
                                                                        c
                                                                        (fun TxConstraint (fun a a))
                                                                        (lam
                                                                          n
                                                                          a
                                                                          [
                                                                            [
                                                                              c
                                                                              [
                                                                                [
                                                                                  MustSpendScriptOutput
                                                                                  contractRef
                                                                                ]
                                                                                [
                                                                                  dToData
                                                                                  redeemer
                                                                                ]
                                                                              ]
                                                                            ]
                                                                            n
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  ]
                                                                ]
                                                                {
                                                                  Nil
                                                                  [InputConstraint Unit]
                                                                }
                                                              ]
                                                              {
                                                                Nil
                                                                [OutputConstraint Unit]
                                                              }
                                                            ]
                                                          ]
                                                          n
                                                        ]
                                                      )
                                                    )
                                                  )
                                                ]
                                              ]
                                            ]
                                            ctx
                                          ]
                                        )
                                      )
                                    ]
                                    (lam thunk Unit False)
                                  ]
                                  Unit
                                ]
                              )
                            )
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        mustSpendPubKeyOutput
                        (all i (type) (all o (type) (fun TxOutRef [[TxConstraints i] o])))
                      )
                      (abs
                        i
                        (type)
                        (abs
                          o
                          (type)
                          (lam
                            x
                            TxOutRef
                            [
                              [
                                [
                                  { { TxConstraints i } o }
                                  [
                                    { build TxConstraint }
                                    (abs
                                      a
                                      (type)
                                      (lam
                                        c
                                        (fun TxConstraint (fun a a))
                                        (lam
                                          n
                                          a
                                          [
                                            [ c [ MustSpendPubKeyOutput x ] ] n
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                ]
                                { Nil [InputConstraint i] }
                              ]
                              { Nil [OutputConstraint o] }
                            ]
                          )
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl bad_name (fun Bool (fun Bool Bool)))
                      (lam
                        l
                        Bool
                        (lam
                          r
                          Bool
                          [
                            [
                              [
                                { [ Bool_match l ] (fun Unit Bool) }
                                (lam thunk Unit True)
                              ]
                              (lam thunk Unit r)
                            ]
                            Unit
                          ]
                        )
                      )
                    )
                    (termbind
                      (strict)
                      (vardecl
                        initialValidator
                        (fun HeadParameters (fun (con bytestring) (fun (con bytestring) (fun (con bytestring) (fun TxOutRef (fun ScriptContext Bool))))))
                      )
                      (lam
                        ds
                        HeadParameters
                        (lam
                          hydraScript
                          (con bytestring)
                          (lam
                            commitScript
                            (con bytestring)
                            (lam
                              vk
                              (con bytestring)
                              (lam
                                ref
                                TxOutRef
                                (lam
                                  ctx
                                  ScriptContext
                                  [
                                    { [ HeadParameters_match ds ] Bool }
                                    (lam
                                      ds
                                      [List (con bytestring)]
                                      (lam
                                        ds
                                        (con bytestring)
                                        [
                                          [
                                            bad_name
                                            [
                                              [
                                                [
                                                  {
                                                    [
                                                      {
                                                        Maybe_match
                                                        [[Tuple2 TxOutRef] TxOut]
                                                      }
                                                      [ [ findUtxo ref ] ctx ]
                                                    ]
                                                    (fun Unit Bool)
                                                  }
                                                  (lam
                                                    utxo
                                                    [[Tuple2 TxOutRef] TxOut]
                                                    (lam
                                                      thunk
                                                      Unit
                                                      [
                                                        [
                                                          [
                                                            {
                                                              {
                                                                checkScriptContext
                                                                TxOutRef
                                                              }
                                                              (con bytestring)
                                                            }
                                                            fToDataByteString_ctoBuiltinData
                                                          ]
                                                          [
                                                            [
                                                              {
                                                                mconcat
                                                                [[TxConstraints TxOutRef] (con bytestring)]
                                                              }
                                                              {
                                                                {
                                                                  fMonoidTxConstraints
                                                                  TxOutRef
                                                                }
                                                                (con bytestring)
                                                              }
                                                            ]
                                                            [
                                                              {
                                                                build
                                                                [[TxConstraints TxOutRef] (con bytestring)]
                                                              }
                                                              (abs
                                                                a
                                                                (type)
                                                                (lam
                                                                  c
                                                                  (fun [[TxConstraints TxOutRef] (con bytestring)] (fun a a))
                                                                  (lam
                                                                    n
                                                                    a
                                                                    [
                                                                      [
                                                                        c
                                                                        [
                                                                          {
                                                                            {
                                                                              mustBeSignedBy
                                                                              TxOutRef
                                                                            }
                                                                            (con bytestring)
                                                                          }
                                                                          vk
                                                                        ]
                                                                      ]
                                                                      [
                                                                        [
                                                                          c
                                                                          [
                                                                            {
                                                                              {
                                                                                mustSpendPubKeyOutput
                                                                                TxOutRef
                                                                              }
                                                                              (con bytestring)
                                                                            }
                                                                            [
                                                                              {
                                                                                {
                                                                                  fst
                                                                                  TxOutRef
                                                                                }
                                                                                TxOut
                                                                              }
                                                                              utxo
                                                                            ]
                                                                          ]
                                                                        ]
                                                                        [
                                                                          [
                                                                            c
                                                                            [
                                                                              [
                                                                                [
                                                                                  {
                                                                                    {
                                                                                      mustPayToOtherScript
                                                                                      TxOutRef
                                                                                    }
                                                                                    (con bytestring)
                                                                                  }
                                                                                  commitScript
                                                                                ]
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      asDatum
                                                                                      TxOut
                                                                                    }
                                                                                    fToDataTxOut_ctoBuiltinData
                                                                                  ]
                                                                                  [
                                                                                    {
                                                                                      {
                                                                                        snd
                                                                                        TxOutRef
                                                                                      }
                                                                                      TxOut
                                                                                    }
                                                                                    utxo
                                                                                  ]
                                                                                ]
                                                                              ]
                                                                              [
                                                                                [
                                                                                  [
                                                                                    {
                                                                                      bad_name
                                                                                      [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                                                                                    }
                                                                                    fMonoidValue_c
                                                                                  ]
                                                                                  [
                                                                                    txOutValue
                                                                                    [
                                                                                      {
                                                                                        {
                                                                                          snd
                                                                                          TxOutRef
                                                                                        }
                                                                                        TxOut
                                                                                      }
                                                                                      utxo
                                                                                    ]
                                                                                  ]
                                                                                ]
                                                                                [
                                                                                  [
                                                                                    mkParty
                                                                                    ds
                                                                                  ]
                                                                                  vk
                                                                                ]
                                                                              ]
                                                                            ]
                                                                          ]
                                                                          n
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  )
                                                                )
                                                              )
                                                            ]
                                                          ]
                                                        ]
                                                        ctx
                                                      ]
                                                    )
                                                  )
                                                ]
                                                (lam thunk Unit False)
                                              ]
                                              Unit
                                            ]
                                          ]
                                          [
                                            [
                                              [
                                                [
                                                  { mustRunContract Transition }
                                                  ctoBuiltinData
                                                ]
                                                hydraScript
                                              ]
                                              Abort
                                            ]
                                            ctx
                                          ]
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    initialValidator
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Credential (type))

        Credential_match
        (vardecl PubKeyCredential (fun (con bytestring) Credential))
        (vardecl ScriptCredential (fun (con bytestring) Credential))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl StakingCredential (type))

        StakingCredential_match
        (vardecl StakingHash (fun Credential StakingCredential))
        (vardecl
          StakingPtr
          (fun (con integer) (fun (con integer) (fun (con integer) StakingCredential)))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl DCert (type))

        DCert_match
        (vardecl DCertDelegDeRegKey (fun StakingCredential DCert))
        (vardecl
          DCertDelegDelegate
          (fun StakingCredential (fun (con bytestring) DCert))
        )
        (vardecl DCertDelegRegKey (fun StakingCredential DCert))
        (vardecl DCertGenesis DCert)
        (vardecl DCertMir DCert)
        (vardecl
          DCertPoolRegister (fun (con bytestring) (fun (con bytestring) DCert))
        )
        (vardecl
          DCertPoolRetire (fun (con bytestring) (fun (con integer) DCert))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl TxOutRef (type))

        TxOutRef_match
        (vardecl TxOutRef (fun (con bytestring) (fun (con integer) TxOutRef)))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl ScriptPurpose (type))

        ScriptPurpose_match
        (vardecl Certifying (fun DCert ScriptPurpose))
        (vardecl Minting (fun (con bytestring) ScriptPurpose))
        (vardecl Rewarding (fun StakingCredential ScriptPurpose))
        (vardecl Spending (fun TxOutRef ScriptPurpose))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Extended (fun (type) (type)))
        (tyvardecl a (type))
        Extended_match
        (vardecl Finite (fun a [Extended a]))
        (vardecl NegInf [Extended a])
        (vardecl PosInf [Extended a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype
        (tyvardecl LowerBound (fun (type) (type)))
        (tyvardecl a (type))
        LowerBound_match
        (vardecl LowerBound (fun [Extended a] (fun Bool [LowerBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl UpperBound (fun (type) (type)))
        (tyvardecl a (type))
        UpperBound_match
        (vardecl UpperBound (fun [Extended a] (fun Bool [UpperBound a])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Interval (fun (type) (type)))
        (tyvardecl a (type))
        Interval_match
        (vardecl Interval (fun [LowerBound a] (fun [UpperBound a] [Interval a]))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [Maybe a])) (vardecl Nothing [Maybe a])
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Address (type))

        Address_match
        (vardecl
          Address (fun Credential (fun [Maybe StakingCredential] Address))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [[Tuple2 a] b])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
        )
      )
      (let
        (nonrec)
        (datatypebind
          (datatype
            (tyvardecl TxOut (type))

            TxOut_match
            (vardecl
              TxOut
              (fun Address (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [Maybe (con bytestring)] TxOut)))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInInfo (type))

            TxInInfo_match
            (vardecl TxInInfo (fun TxOutRef (fun TxOut TxInInfo)))
          )
        )
        (datatypebind
          (datatype
            (tyvardecl TxInfo (type))

            TxInfo_match
            (vardecl
              TxInfo
              (fun [List TxInInfo] (fun [List TxOut] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]] (fun [List DCert] (fun [List [[Tuple2 StakingCredential] (con integer)]] (fun [Interval (con integer)] (fun [List (con bytestring)] (fun [List [[Tuple2 (con bytestring)] (con data)]] (fun (con bytestring) TxInfo))))))))))
            )
          )
        )
        (datatypebind
          (datatype
            (tyvardecl ScriptContext (type))

            ScriptContext_match
            (vardecl
              ScriptContext (fun TxInfo (fun ScriptPurpose ScriptContext))
            )
          )
        )
        (termbind
          (strict)
          (vardecl error (all a (type) (fun (con unit) a)))
          (abs a (type) (lam thunk (con unit) (error a)))
        )
        (datatypebind
          (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxId_cunsafeFromBuiltinData
            (fun (con data) (con bytestring))
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ { error (con bytestring) } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit (con bytestring)) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
            (fun (con data) TxOutRef)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [ { error TxOutRef } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOutRef) [ [ TxOutRef x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOutRef) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataCredential_cunsafeFromBuiltinData
            (fun (con data) Credential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [ { error Credential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ PubKeyCredential x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Credential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x Credential) [ ScriptCredential x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Credential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
            (fun (con data) StakingCredential)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ { error StakingCredential } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x StakingCredential) [ StakingHash x ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit StakingCredential) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [ (builtin unIData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [ [ [ StakingPtr x ] x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit StakingCredential) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataDCert_cunsafeFromBuiltinData (fun (con data) DCert)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x DCert) [ { error DCert } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegRegKey x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x DCert) [ DCertDelegDeRegKey x ])
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertDelegDelegate x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRegister x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 3) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con integer))
                [
                  (builtin unIData)
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [ (builtin unBData) [ { (builtin headList) (con data) } t ] ]
              )
              (termbind
                (nonstrict) (vardecl x DCert) [ [ DCertPoolRetire x ] x ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 4) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit DCert) }
                        [ [ (builtin equalsInteger) index ] (con integer 5) ]
                      ]
                      (lam ds Unit DCertGenesis)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit DCert) }
                      [ [ (builtin equalsInteger) index ] (con integer 6) ]
                    ]
                    (lam ds Unit DCertMir)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptPurpose)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [ { error ScriptPurpose } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  (builtin unBData)
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Minting x ])
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Spending x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 1) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x StakingCredential)
                [
                  fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Rewarding x ])
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                        [ [ (builtin equalsInteger) index ] (con integer 2) ]
                      ]
                      (lam ds Unit x)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x DCert)
                [
                  fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  ]
                ]
              )
              (termbind (nonstrict) (vardecl x ScriptPurpose) [ Certifying x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptPurpose) }
                      [ [ (builtin equalsInteger) index ] (con integer 3) ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
            (fun (con data) (con data))
          )
          (lam d (con data) d)
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
            (all a (type) (all b (type) (fun [(lam a (type) (fun (con data) a)) a] (fun [(lam a (type) (fun (con data) a)) b] (fun (con data) [[Tuple2 a] b])))))
          )
          (abs
            a
            (type)
            (abs
              b
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) a]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) b]
                  (lam
                    d
                    (con data)
                    (let
                      (nonrec)
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ { error [[Tuple2 a] b] } (con unit ()) ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl
                          tup
                          [[(con pair) (con integer)] [(con list) (con data)]]
                        )
                        [ (builtin unConstrData) d ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl t [(con list) (con data)])
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x b)
                        [
                          dUnsafeFromData
                          [
                            { (builtin headList) (con data) }
                            [ { (builtin tailList) (con data) } t ]
                          ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x a)
                        [
                          dUnsafeFromData
                          [ { (builtin headList) (con data) } t ]
                        ]
                      )
                      (termbind
                        (nonstrict)
                        (vardecl x [[Tuple2 a] b])
                        [ [ { { Tuple2 a } b } x ] x ]
                      )
                      [
                        [
                          [
                            [
                              { (builtin ifThenElse) (fun Unit [[Tuple2 a] b]) }
                              [
                                [
                                  (builtin equalsInteger)
                                  [
                                    {
                                      { (builtin fstPair) (con integer) }
                                      [(con list) (con data)]
                                    }
                                    tup
                                  ]
                                ]
                                (con integer 0)
                              ]
                            ]
                            (lam ds Unit x)
                          ]
                          (lam ds Unit x)
                        ]
                        Unit
                      ]
                    )
                  )
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataNil_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [List a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (rec)
                  (termbind
                    (strict)
                    (vardecl go (fun [(con list) (con data)] [List a]))
                    (lam
                      l
                      [(con list) (con data)]
                      [
                        [
                          [
                            [
                              {
                                { (builtin chooseList) (fun Unit [List a]) }
                                (con data)
                              }
                              (lam ds Unit { Nil a })
                            ]
                            (lam
                              ds
                              Unit
                              [
                                [
                                  { Cons a }
                                  [
                                    dUnsafeFromData
                                    [ { (builtin headList) (con data) } l ]
                                  ]
                                ]
                                [ go [ { (builtin tailList) (con data) } l ] ]
                              ]
                            )
                          ]
                          l
                        ]
                        Unit
                      ]
                    )
                  )
                  [ go [ (builtin unListData) d ] ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataBool_cunsafeFromBuiltinData (fun (con data) Bool)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x Bool) [ { error Bool } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) } [(con list) (con data)]
                  }
                  [ (builtin unConstrData) d ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Bool)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun Unit Bool) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds Unit False)
                    ]
                    (lam ds Unit x)
                  ]
                  Unit
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Bool) }
                      [ [ (builtin equalsInteger) index ] (con integer 1) ]
                    ]
                    (lam ds Unit True)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataExtended_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Extended a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [ { error [Extended a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 0)
                            ]
                          ]
                          (lam ds Unit { NegInf a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict) (vardecl x [Extended a]) [ { Finite a } x ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Extended a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit x)
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Extended a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 2) ]
                        ]
                        (lam ds Unit { PosInf a })
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [UpperBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ { error [UpperBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [ [ { UpperBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [UpperBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [LowerBound a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ { error [LowerBound a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x Bool)
                    [
                      fUnsafeFromDataBool_cunsafeFromBuiltinData
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Extended a])
                    [
                      [
                        { fUnsafeFromDataExtended_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [ [ { LowerBound a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [LowerBound a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataInterval_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Interval a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ { error [Interval a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl t [(con list) (con data)])
                    [
                      {
                        { (builtin sndPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [UpperBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [
                        { (builtin headList) (con data) }
                        [ { (builtin tailList) (con data) } t ]
                      ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [LowerBound a])
                    [
                      [
                        { fUnsafeFromDataInterval_cunsafeFromBuiltinData a }
                        dUnsafeFromData
                      ]
                      [ { (builtin headList) (con data) } t ]
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Interval a])
                    [ [ { Interval a } x ] x ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Interval a]) }
                          [
                            [
                              (builtin equalsInteger)
                              [
                                {
                                  { (builtin fstPair) (con integer) }
                                  [(con list) (con data)]
                                }
                                tup
                              ]
                            ]
                            (con integer 0)
                          ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMap
            (all k (type) (all v (type) (fun [(lam a (type) (fun (con data) a)) k] (fun [(lam a (type) (fun (con data) a)) v] (fun (con data) [List [[Tuple2 k] v]])))))
          )
          (abs
            k
            (type)
            (abs
              v
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) k]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) v]
                  (lam
                    eta
                    (con data)
                    [
                      [
                        {
                          fUnsafeFromDataNil_cunsafeFromBuiltinData
                          [[Tuple2 k] v]
                        }
                        [
                          [
                            {
                              { fUnsafeFromDataTuple2_cunsafeFromBuiltinData k }
                              v
                            }
                            dUnsafeFromData
                          ]
                          dUnsafeFromData
                        ]
                      ]
                      eta
                    ]
                  )
                )
              )
            )
          )
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [List [[Tuple2 (con bytestring)] (con integer)]])
          )
          [
            [
              { { fUnsafeFromDataMap (con bytestring) } (con integer) }
              (builtin unBData)
            ]
            (builtin unIData)
          ]
        )
        (termbind
          (nonstrict)
          (vardecl
            fUnsafeFromDataValue
            (fun (con data) [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]])
          )
          [
            [
              {
                {
                  fUnsafeFromDataTuple2_cunsafeFromBuiltinData (con bytestring)
                }
                [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]
              }
              (builtin unBData)
            ]
            fUnsafeFromDataValue
          ]
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataMaybe_cunsafeFromBuiltinData
            (all a (type) (fun [(lam a (type) (fun (con data) a)) a] (fun (con data) [Maybe a])))
          )
          (abs
            a
            (type)
            (lam
              dUnsafeFromData
              [(lam a (type) (fun (con data) a)) a]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [ { error [Maybe a] } (con unit ()) ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl
                      tup [[(con pair) (con integer)] [(con list) (con data)]]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [(con list) (con data)]
                      }
                      tup
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x [Maybe a])
                    [
                      [
                        [
                          [
                            { (builtin ifThenElse) (fun Unit [Maybe a]) }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam ds Unit { Nothing a })
                        ]
                        (lam ds Unit x)
                      ]
                      Unit
                    ]
                  )
                  (termbind
                    (nonstrict)
                    (vardecl x a)
                    [
                      dUnsafeFromData
                      [
                        { (builtin headList) (con data) }
                        [
                          {
                            { (builtin sndPair) (con integer) }
                            [(con list) (con data)]
                          }
                          tup
                        ]
                      ]
                    ]
                  )
                  (termbind (nonstrict) (vardecl x [Maybe a]) [ { Just a } x ])
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun Unit [Maybe a]) }
                          [ [ (builtin equalsInteger) index ] (con integer 0) ]
                        ]
                        (lam ds Unit x)
                      ]
                      (lam ds Unit x)
                    ]
                    Unit
                  ]
                )
              )
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataAddress_cunsafeFromBuiltinData
            (fun (con data) Address)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x Address)
                [ { error Address } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe StakingCredential])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      StakingCredential
                    }
                    fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Credential)
                [
                  fUnsafeFromDataCredential_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x Address) [ [ Address x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit Address) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataTxOut_cunsafeFromBuiltinData (fun (con data) TxOut)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict) (vardecl x TxOut) [ { error TxOut } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Maybe (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataMaybe_cunsafeFromBuiltinData
                      (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x Address)
                [
                  fUnsafeFromDataAddress_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxOut) [ [ [ TxOut x ] x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxOut) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInInfo)
                [ { error TxInInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOut)
                [
                  fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxOutRef)
                [
                  fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind (nonstrict) (vardecl x TxInInfo) [ [ TxInInfo x ] x ])
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) TxInfo)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [ { error TxInfo } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (nonstrict)
                (vardecl x (con bytestring))
                [
                  fUnsafeFromDataTxId_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 (con bytestring)] (con data)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] (con data)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            (con bytestring)
                          }
                          (con data)
                        }
                        (builtin unBData)
                      ]
                      fUnsafeFromDataBuiltinData_cunsafeFromBuiltinData
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List (con bytestring)])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData (con bytestring)
                    }
                    (builtin unBData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [Interval (con integer)])
                [
                  [
                    {
                      fUnsafeFromDataInterval_cunsafeFromBuiltinData
                      (con integer)
                    }
                    (builtin unIData)
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List [[Tuple2 StakingCredential] (con integer)]])
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 StakingCredential] (con integer)]
                    }
                    [
                      [
                        {
                          {
                            fUnsafeFromDataTuple2_cunsafeFromBuiltinData
                            StakingCredential
                          }
                          (con integer)
                        }
                        fUnsafeFromDataStakingCredential_cunsafeFromBuiltinData
                      ]
                      (builtin unIData)
                    ]
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List DCert])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData DCert }
                    fUnsafeFromDataDCert_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  x
                  [List [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]]
                )
                [
                  [
                    {
                      fUnsafeFromDataNil_cunsafeFromBuiltinData
                      [[Tuple2 (con bytestring)] [[(lam k (type) (lam v (type) [List [[Tuple2 k] v]])) (con bytestring)] (con integer)]]
                    }
                    fUnsafeFromDataValue
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxOut])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxOut }
                    fUnsafeFromDataTxOut_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x [List TxInInfo])
                [
                  [
                    { fUnsafeFromDataNil_cunsafeFromBuiltinData TxInInfo }
                    fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  ]
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  [ [ [ [ [ [ [ [ [ TxInfo x ] x ] x ] x ] x ] x ] x ] x ] x ] x
                ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit TxInfo) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl
            fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
            (fun (con data) ScriptContext)
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (nonstrict)
                (vardecl x ScriptContext)
                [ { error ScriptContext } (con unit ()) ]
              )
              (termbind
                (nonstrict)
                (vardecl
                  tup [[(con pair) (con integer)] [(con list) (con data)]]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [(con list) (con data)])
                [
                  {
                    { (builtin sndPair) (con integer) } [(con list) (con data)]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x ScriptPurpose)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [
                    { (builtin headList) (con data) }
                    [ { (builtin tailList) (con data) } t ]
                  ]
                ]
              )
              (termbind
                (nonstrict)
                (vardecl x TxInfo)
                [
                  fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                  [ { (builtin headList) (con data) } t ]
                ]
              )
              (termbind
                (nonstrict) (vardecl x ScriptContext) [ [ ScriptContext x ] x ]
              )
              [
                [
                  [
                    [
                      { (builtin ifThenElse) (fun Unit ScriptContext) }
                      [
                        [
                          (builtin equalsInteger)
                          [
                            {
                              { (builtin fstPair) (con integer) }
                              [(con list) (con data)]
                            }
                            tup
                          ]
                        ]
                        (con integer 0)
                      ]
                    ]
                    (lam ds Unit x)
                  ]
                  (lam ds Unit x)
                ]
                Unit
              ]
            )
          )
        )
        (termbind
          (strict)
          (vardecl check (fun Bool Unit))
          (lam
            b
            Bool
            [
              [
                [ { [ Bool_match b ] (fun Unit Unit) } (lam thunk Unit Unit) ]
                (lam
                  thunk
                  Unit
                  [
                    { error Unit }
                    [
                      {
                        [
                          Unit_match
                          [
                            [
                              { (builtin chooseUnit) Unit }
                              [
                                (builtin trace) (con string "Check has failed")
                              ]
                            ]
                            Unit
                          ]
                        ]
                        (con unit)
                      }
                      (con unit ())
                    ]
                  ]
                )
              ]
              Unit
            ]
          )
        )
        (termbind
          (strict)
          (vardecl
            wrapValidator
            (all d (type) (all r (type) (fun [(lam a (type) (fun (con data) a)) d] (fun [(lam a (type) (fun (con data) a)) r] (fun (fun d (fun r (fun ScriptContext Bool))) (fun (con data) (fun (con data) (fun (con data) Unit))))))))
          )
          (abs
            d
            (type)
            (abs
              r
              (type)
              (lam
                dUnsafeFromData
                [(lam a (type) (fun (con data) a)) d]
                (lam
                  dUnsafeFromData
                  [(lam a (type) (fun (con data) a)) r]
                  (lam
                    f
                    (fun d (fun r (fun ScriptContext Bool)))
                    (lam
                      d
                      (con data)
                      (lam
                        r
                        (con data)
                        (lam
                          p
                          (con data)
                          [
                            check
                            [
                              [
                                [ f [ dUnsafeFromData d ] ]
                                [ dUnsafeFromData r ]
                              ]
                              [
                                fUnsafeFromDataScriptContext_cunsafeFromBuiltinData
                                p
                              ]
                            ]
                          ]
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
        [
          [ { { wrapValidator (con bytestring) } TxOutRef } (builtin unBData) ]
          fUnsafeFromDataTxOutRef_cunsafeFromBuiltinData
        ]
      )
    )
  )
)
